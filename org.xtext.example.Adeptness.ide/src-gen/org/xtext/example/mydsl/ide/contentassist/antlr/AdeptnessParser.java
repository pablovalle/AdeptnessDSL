/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalAdeptnessParser;
import org.xtext.example.mydsl.services.AdeptnessGrammarAccess;

public class AdeptnessParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AdeptnessGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AdeptnessGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getBAccess().getAlternatives(), "rule__B__Alternatives");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getSignalAccess().getGroup(), "rule__Signal__Group__0");
			builder.put(grammarAccess.getCheck_Static_upper_onlyAccess().getGroup(), "rule__Check_Static_upper_only__Group__0");
			builder.put(grammarAccess.getCheck_Static_lower_onlyAccess().getGroup(), "rule__Check_Static_lower_only__Group__0");
			builder.put(grammarAccess.getCheck_RangeAccess().getGroup(), "rule__Check_Range__Group__0");
			builder.put(grammarAccess.getCheck_GapAccess().getGroup(), "rule__Check_Gap__Group__0");
			builder.put(grammarAccess.getInclusiveBoundAccess().getGroup(), "rule__InclusiveBound__Group__0");
			builder.put(grammarAccess.getBound_upAccess().getGroup(), "rule__Bound_up__Group__0");
			builder.put(grammarAccess.getBound_DownAccess().getGroup(), "rule__Bound_Down__Group__0");
			builder.put(grammarAccess.getDAccess().getGroup(), "rule__D__Group__0");
			builder.put(grammarAccess.getDAccess().getGroup_2(), "rule__D__Group_2__0");
			builder.put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
			builder.put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
			builder.put(grammarAccess.getAdeptnessAccess().getElementsAssignment(), "rule__Adeptness__ElementsAssignment");
			builder.put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getSignalAccess().getNameAssignment_1(), "rule__Signal__NameAssignment_1");
			builder.put(grammarAccess.getSignalAccess().getCheck_static_upperAssignment_3(), "rule__Signal__Check_static_upperAssignment_3");
			builder.put(grammarAccess.getSignalAccess().getCheck_static_lowerAssignment_4(), "rule__Signal__Check_static_lowerAssignment_4");
			builder.put(grammarAccess.getSignalAccess().getCheck_rangeAssignment_5(), "rule__Signal__Check_rangeAssignment_5");
			builder.put(grammarAccess.getSignalAccess().getCheck_gapAssignment_6(), "rule__Signal__Check_gapAssignment_6");
			builder.put(grammarAccess.getCheck_Static_upper_onlyAccess().getNameAssignment_1(), "rule__Check_Static_upper_only__NameAssignment_1");
			builder.put(grammarAccess.getCheck_Static_upper_onlyAccess().getInclusive_boundAssignment_3(), "rule__Check_Static_upper_only__Inclusive_boundAssignment_3");
			builder.put(grammarAccess.getCheck_Static_upper_onlyAccess().getBound_upAssignment_4(), "rule__Check_Static_upper_only__Bound_upAssignment_4");
			builder.put(grammarAccess.getCheck_Static_lower_onlyAccess().getNameAssignment_1(), "rule__Check_Static_lower_only__NameAssignment_1");
			builder.put(grammarAccess.getCheck_Static_lower_onlyAccess().getInclusive_boundAssignment_3(), "rule__Check_Static_lower_only__Inclusive_boundAssignment_3");
			builder.put(grammarAccess.getCheck_Static_lower_onlyAccess().getBound_lowAssignment_4(), "rule__Check_Static_lower_only__Bound_lowAssignment_4");
			builder.put(grammarAccess.getCheck_RangeAccess().getNameAssignment_1(), "rule__Check_Range__NameAssignment_1");
			builder.put(grammarAccess.getCheck_RangeAccess().getInclusive_boundAssignment_3(), "rule__Check_Range__Inclusive_boundAssignment_3");
			builder.put(grammarAccess.getCheck_RangeAccess().getBound_lowAssignment_4(), "rule__Check_Range__Bound_lowAssignment_4");
			builder.put(grammarAccess.getCheck_RangeAccess().getBound_upAssignment_5(), "rule__Check_Range__Bound_upAssignment_5");
			builder.put(grammarAccess.getCheck_GapAccess().getNameAssignment_1(), "rule__Check_Gap__NameAssignment_1");
			builder.put(grammarAccess.getCheck_GapAccess().getInclusive_boundAssignment_3(), "rule__Check_Gap__Inclusive_boundAssignment_3");
			builder.put(grammarAccess.getCheck_GapAccess().getBound_lowAssignment_4(), "rule__Check_Gap__Bound_lowAssignment_4");
			builder.put(grammarAccess.getCheck_GapAccess().getBound_upAssignment_5(), "rule__Check_Gap__Bound_upAssignment_5");
			builder.put(grammarAccess.getInclusiveBoundAccess().getNameAssignment_1(), "rule__InclusiveBound__NameAssignment_1");
			builder.put(grammarAccess.getInclusiveBoundAccess().getValueAssignment_3(), "rule__InclusiveBound__ValueAssignment_3");
			builder.put(grammarAccess.getBound_upAccess().getNameAssignment_1(), "rule__Bound_up__NameAssignment_1");
			builder.put(grammarAccess.getBound_upAccess().getValueAssignment_3(), "rule__Bound_up__ValueAssignment_3");
			builder.put(grammarAccess.getBound_DownAccess().getNameAssignment_1(), "rule__Bound_Down__NameAssignment_1");
			builder.put(grammarAccess.getBound_DownAccess().getValueAssignment_3(), "rule__Bound_Down__ValueAssignment_3");
			builder.put(grammarAccess.getBOOLEANAccess().getBoolAssignment(), "rule__BOOLEAN__BoolAssignment");
			builder.put(grammarAccess.getDOUBLEAccess().getDValAssignment(), "rule__DOUBLE__DValAssignment");
			builder.put(grammarAccess.getDataTypeAccess().getNameAssignment_1(), "rule__DataType__NameAssignment_1");
			builder.put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getPackageDeclarationAccess().getElementsAssignment_3(), "rule__PackageDeclaration__ElementsAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AdeptnessGrammarAccess grammarAccess;

	@Override
	protected InternalAdeptnessParser createParser() {
		InternalAdeptnessParser result = new InternalAdeptnessParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AdeptnessGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AdeptnessGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
