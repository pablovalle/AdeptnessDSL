/*
 * generated by Xtext 2.24.0
 */
grammar InternalAdeptness;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.AdeptnessGrammarAccess;

}
@parser::members {
	private AdeptnessGrammarAccess grammarAccess;

	public void setGrammarAccess(AdeptnessGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleAdeptness
entryRuleAdeptness
:
{ before(grammarAccess.getAdeptnessRule()); }
	 ruleAdeptness
{ after(grammarAccess.getAdeptnessRule()); } 
	 EOF 
;

// Rule Adeptness
ruleAdeptness 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdeptnessAccess().getElementsAssignment()); }
		(rule__Adeptness__ElementsAssignment)*
		{ after(grammarAccess.getAdeptnessAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement
:
{ before(grammarAccess.getAbstractElementRule()); }
	 ruleAbstractElement
{ after(grammarAccess.getAbstractElementRule()); } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractElementAccess().getAlternatives()); }
		(rule__AbstractElement__Alternatives)
		{ after(grammarAccess.getAbstractElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
		(rule__QualifiedNameWithWildcard__Group__0)
		{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSignal
entryRuleSignal
:
{ before(grammarAccess.getSignalRule()); }
	 ruleSignal
{ after(grammarAccess.getSignalRule()); } 
	 EOF 
;

// Rule Signal
ruleSignal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSignalAccess().getGroup()); }
		(rule__Signal__Group__0)
		{ after(grammarAccess.getSignalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOracle
entryRuleOracle
:
{ before(grammarAccess.getOracleRule()); }
	 ruleOracle
{ after(grammarAccess.getOracleRule()); } 
	 EOF 
;

// Rule Oracle
ruleOracle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOracleAccess().getGroup()); }
		(rule__Oracle__Group__0)
		{ after(grammarAccess.getOracleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCheck
entryRuleCheck
:
{ before(grammarAccess.getCheckRule()); }
	 ruleCheck
{ after(grammarAccess.getCheckRule()); } 
	 EOF 
;

// Rule Check
ruleCheck 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCheckAccess().getGroup()); }
		(rule__Check__Group__0)
		{ after(grammarAccess.getCheckAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFailReason
entryRuleFailReason
:
{ before(grammarAccess.getFailReasonRule()); }
	 ruleFailReason
{ after(grammarAccess.getFailReasonRule()); } 
	 EOF 
;

// Rule FailReason
ruleFailReason 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFailReasonAccess().getGroup()); }
		(rule__FailReason__Group__0)
		{ after(grammarAccess.getFailReasonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXPeaks
entryRuleXPeaks
:
{ before(grammarAccess.getXPeaksRule()); }
	 ruleXPeaks
{ after(grammarAccess.getXPeaksRule()); } 
	 EOF 
;

// Rule XPeaks
ruleXPeaks 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXPeaksAccess().getGroup()); }
		(rule__XPeaks__Group__0)
		{ after(grammarAccess.getXPeaksAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstDeg
entryRuleConstDeg
:
{ before(grammarAccess.getConstDegRule()); }
	 ruleConstDeg
{ after(grammarAccess.getConstDegRule()); } 
	 EOF 
;

// Rule ConstDeg
ruleConstDeg 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstDegAccess().getGroup()); }
		(rule__ConstDeg__Group__0)
		{ after(grammarAccess.getConstDegAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHighTime
entryRuleHighTime
:
{ before(grammarAccess.getHighTimeRule()); }
	 ruleHighTime
{ after(grammarAccess.getHighTimeRule()); } 
	 EOF 
;

// Rule HighTime
ruleHighTime 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHighTimeAccess().getGroup()); }
		(rule__HighTime__Group__0)
		{ after(grammarAccess.getHighTimeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHighPeak
entryRuleHighPeak
:
{ before(grammarAccess.getHighPeakRule()); }
	 ruleHighPeak
{ after(grammarAccess.getHighPeakRule()); } 
	 EOF 
;

// Rule HighPeak
ruleHighPeak 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHighPeakAccess().getGroup()); }
		(rule__HighPeak__Group__0)
		{ after(grammarAccess.getHighPeakAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReference
entryRuleReference
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferenceAccess().getGroup()); }
		(rule__Reference__Group__0)
		{ after(grammarAccess.getReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUpper
entryRuleUpper
:
{ before(grammarAccess.getUpperRule()); }
	 ruleUpper
{ after(grammarAccess.getUpperRule()); } 
	 EOF 
;

// Rule Upper
ruleUpper 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpperAccess().getGroup()); }
		(rule__Upper__Group__0)
		{ after(grammarAccess.getUpperAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLower
entryRuleLower
:
{ before(grammarAccess.getLowerRule()); }
	 ruleLower
{ after(grammarAccess.getLowerRule()); } 
	 EOF 
;

// Rule Lower
ruleLower 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLowerAccess().getGroup()); }
		(rule__Lower__Group__0)
		{ after(grammarAccess.getLowerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRange
entryRuleRange
:
{ before(grammarAccess.getRangeRule()); }
	 ruleRange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule Range
ruleRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRangeAccess().getGroup()); }
		(rule__Range__Group__0)
		{ after(grammarAccess.getRangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGap
entryRuleGap
:
{ before(grammarAccess.getGapRule()); }
	 ruleGap
{ after(grammarAccess.getGapRule()); } 
	 EOF 
;

// Rule Gap
ruleGap 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGapAccess().getGroup()); }
		(rule__Gap__Group__0)
		{ after(grammarAccess.getGapAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBound_up
entryRuleBound_up
:
{ before(grammarAccess.getBound_upRule()); }
	 ruleBound_up
{ after(grammarAccess.getBound_upRule()); } 
	 EOF 
;

// Rule Bound_up
ruleBound_up 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBound_upAccess().getValueAssignment()); }
		(rule__Bound_up__ValueAssignment)
		{ after(grammarAccess.getBound_upAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBound_Down
entryRuleBound_Down
:
{ before(grammarAccess.getBound_DownRule()); }
	 ruleBound_Down
{ after(grammarAccess.getBound_DownRule()); } 
	 EOF 
;

// Rule Bound_Down
ruleBound_Down 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBound_DownAccess().getValueAssignment()); }
		(rule__Bound_Down__ValueAssignment)
		{ after(grammarAccess.getBound_DownAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN
:
{ before(grammarAccess.getBOOLEANRule()); }
	 ruleBOOLEAN
{ after(grammarAccess.getBOOLEANRule()); } 
	 EOF 
;

// Rule BOOLEAN
ruleBOOLEAN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBOOLEANAccess().getBoolAssignment()); }
		(rule__BOOLEAN__BoolAssignment)
		{ after(grammarAccess.getBOOLEANAccess().getBoolAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleb
entryRuleb
:
{ before(grammarAccess.getBRule()); }
	 ruleb
{ after(grammarAccess.getBRule()); } 
	 EOF 
;

// Rule b
ruleb 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBAccess().getAlternatives()); }
		(rule__B__Alternatives)
		{ after(grammarAccess.getBAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDOUBLE
entryRuleDOUBLE
:
{ before(grammarAccess.getDOUBLERule()); }
	 ruleDOUBLE
{ after(grammarAccess.getDOUBLERule()); } 
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDOUBLEAccess().getDValAssignment()); }
		(rule__DOUBLE__DValAssignment)
		{ after(grammarAccess.getDOUBLEAccess().getDValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuled
entryRuled
:
{ before(grammarAccess.getDRule()); }
	 ruled
{ after(grammarAccess.getDRule()); } 
	 EOF 
;

// Rule d
ruled 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDAccess().getGroup()); }
		(rule__D__Group__0)
		{ after(grammarAccess.getDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataType
entryRuleDataType
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypeAccess().getGroup()); }
		(rule__DataType__Group__0)
		{ after(grammarAccess.getDataTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration
:
{ before(grammarAccess.getPackageDeclarationRule()); }
	 rulePackageDeclaration
{ after(grammarAccess.getPackageDeclarationRule()); } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPackageDeclarationAccess().getGroup()); }
		(rule__PackageDeclaration__Group__0)
		{ after(grammarAccess.getPackageDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractElementAccess().getPackageDeclarationParserRuleCall_0()); }
		rulePackageDeclaration
		{ after(grammarAccess.getAbstractElementAccess().getPackageDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractElementAccess().getTypeParserRuleCall_1()); }
		ruleType
		{ after(grammarAccess.getAbstractElementAccess().getTypeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractElementAccess().getImportParserRuleCall_2()); }
		ruleImport
		{ after(grammarAccess.getAbstractElementAccess().getImportParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_0()); }
		ruleDataType
		{ after(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getSignalParserRuleCall_1()); }
		ruleSignal
		{ after(grammarAccess.getTypeAccess().getSignalParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFailReasonAccess().getHighPeakAssignment_3_0()); }
		(rule__FailReason__HighPeakAssignment_3_0)
		{ after(grammarAccess.getFailReasonAccess().getHighPeakAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getFailReasonAccess().getHighTimeAssignment_3_1()); }
		(rule__FailReason__HighTimeAssignment_3_1)
		{ after(grammarAccess.getFailReasonAccess().getHighTimeAssignment_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getFailReasonAccess().getConstDegAssignment_3_2()); }
		(rule__FailReason__ConstDegAssignment_3_2)
		{ after(grammarAccess.getFailReasonAccess().getConstDegAssignment_3_2()); }
	)
	|
	(
		{ before(grammarAccess.getFailReasonAccess().getXPeaksAssignment_3_3()); }
		(rule__FailReason__XPeaksAssignment_3_3)
		{ after(grammarAccess.getFailReasonAccess().getXPeaksAssignment_3_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getUpperAssignment_0_0()); }
		(rule__Reference__UpperAssignment_0_0)
		{ after(grammarAccess.getReferenceAccess().getUpperAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getReferenceAccess().getLowerAssignment_0_1()); }
		(rule__Reference__LowerAssignment_0_1)
		{ after(grammarAccess.getReferenceAccess().getLowerAssignment_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getReferenceAccess().getRangeAssignment_0_2()); }
		(rule__Reference__RangeAssignment_0_2)
		{ after(grammarAccess.getReferenceAccess().getRangeAssignment_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getReferenceAccess().getGapAssignment_0_3()); }
		(rule__Reference__GapAssignment_0_3)
		{ after(grammarAccess.getReferenceAccess().getGapAssignment_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__B__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBAccess().getTrueKeyword_0()); }
		'true'
		{ after(grammarAccess.getBAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getBAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
	(rule__Import__ImportedNamespaceAssignment_1)
	{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
	{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
	('.*')?
	{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__0__Impl
	rule__Signal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getCPSKeyword_0()); }
	'CPS'
	{ after(grammarAccess.getSignalAccess().getCPSKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__1__Impl
	rule__Signal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getNameAssignment_1()); }
	(rule__Signal__NameAssignment_1)
	{ after(grammarAccess.getSignalAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__2__Impl
	rule__Signal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getSignalAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__3__Impl
	rule__Signal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSignalAccess().getOracleAssignment_3()); }
		(rule__Signal__OracleAssignment_3)
		{ after(grammarAccess.getSignalAccess().getOracleAssignment_3()); }
	)
	(
		{ before(grammarAccess.getSignalAccess().getOracleAssignment_3()); }
		(rule__Signal__OracleAssignment_3)*
		{ after(grammarAccess.getSignalAccess().getOracleAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getENDCPSKeyword_4()); }
	'ENDCPS'
	{ after(grammarAccess.getSignalAccess().getENDCPSKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Oracle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Oracle__Group__0__Impl
	rule__Oracle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Oracle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOracleAccess().getORACLEKeyword_0()); }
	'ORACLE'
	{ after(grammarAccess.getOracleAccess().getORACLEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Oracle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Oracle__Group__1__Impl
	rule__Oracle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Oracle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOracleAccess().getNameAssignment_1()); }
	(rule__Oracle__NameAssignment_1)
	{ after(grammarAccess.getOracleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Oracle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Oracle__Group__2__Impl
	rule__Oracle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Oracle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOracleAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getOracleAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Oracle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Oracle__Group__3__Impl
	rule__Oracle__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Oracle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getOracleAccess().getCheckAssignment_3()); }
		(rule__Oracle__CheckAssignment_3)
		{ after(grammarAccess.getOracleAccess().getCheckAssignment_3()); }
	)
	(
		{ before(grammarAccess.getOracleAccess().getCheckAssignment_3()); }
		(rule__Oracle__CheckAssignment_3)*
		{ after(grammarAccess.getOracleAccess().getCheckAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Oracle__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Oracle__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Oracle__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOracleAccess().getENDORACLEKeyword_4()); }
	'ENDORACLE'
	{ after(grammarAccess.getOracleAccess().getENDORACLEKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__0__Impl
	rule__Check__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getChecksKeyword_0()); }
	'checks:'
	{ after(grammarAccess.getCheckAccess().getChecksKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__1__Impl
	rule__Check__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getNameAssignment_1()); }
	(rule__Check__NameAssignment_1)
	{ after(grammarAccess.getCheckAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__2__Impl
	rule__Check__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getReferenceAssignment_2()); }
	(rule__Check__ReferenceAssignment_2)
	{ after(grammarAccess.getCheckAccess().getReferenceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__3__Impl
	rule__Check__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCheckAccess().getFailReasonAssignment_3()); }
		(rule__Check__FailReasonAssignment_3)
		{ after(grammarAccess.getCheckAccess().getFailReasonAssignment_3()); }
	)
	(
		{ before(grammarAccess.getCheckAccess().getFailReasonAssignment_3()); }
		(rule__Check__FailReasonAssignment_3)*
		{ after(grammarAccess.getCheckAccess().getFailReasonAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getDescriptionAssignment_4()); }
	(rule__Check__DescriptionAssignment_4)
	{ after(grammarAccess.getCheckAccess().getDescriptionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FailReason__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FailReason__Group__0__Impl
	rule__FailReason__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFailReasonAccess().getFailsKeyword_0()); }
	'fails'
	{ after(grammarAccess.getFailReasonAccess().getFailsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FailReason__Group__1__Impl
	rule__FailReason__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFailReasonAccess().getIfKeyword_1()); }
	'if'
	{ after(grammarAccess.getFailReasonAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FailReason__Group__2__Impl
	rule__FailReason__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFailReasonAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getFailReasonAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FailReason__Group__3__Impl
	rule__FailReason__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFailReasonAccess().getAlternatives_3()); }
	(rule__FailReason__Alternatives_3)
	{ after(grammarAccess.getFailReasonAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FailReason__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFailReasonAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getFailReasonAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XPeaks__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XPeaks__Group__0__Impl
	rule__XPeaks__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXPeaksAccess().getConfidence_is_belowKeyword_0()); }
	'confidence_is_below'
	{ after(grammarAccess.getXPeaksAccess().getConfidence_is_belowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XPeaks__Group__1__Impl
	rule__XPeaks__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXPeaksAccess().getCantAssignment_1()); }
	(rule__XPeaks__CantAssignment_1)
	{ after(grammarAccess.getXPeaksAccess().getCantAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XPeaks__Group__2__Impl
	rule__XPeaks__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXPeaksAccess().getMore_thanKeyword_2()); }
	'more_than'
	{ after(grammarAccess.getXPeaksAccess().getMore_thanKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XPeaks__Group__3__Impl
	rule__XPeaks__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXPeaksAccess().getNPeaksAssignment_3()); }
	(rule__XPeaks__NPeaksAssignment_3)
	{ after(grammarAccess.getXPeaksAccess().getNPeaksAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XPeaks__Group__4__Impl
	rule__XPeaks__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXPeaksAccess().getTimesKeyword_4()); }
	'times'
	{ after(grammarAccess.getXPeaksAccess().getTimesKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XPeaks__Group__5__Impl
	rule__XPeaks__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXPeaksAccess().getWithinKeyword_5()); }
	'within'
	{ after(grammarAccess.getXPeaksAccess().getWithinKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XPeaks__Group__6__Impl
	rule__XPeaks__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXPeaksAccess().getTimeAssignment_6()); }
	(rule__XPeaks__TimeAssignment_6)
	{ after(grammarAccess.getXPeaksAccess().getTimeAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XPeaks__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXPeaksAccess().getSecondsKeyword_7()); }
	'seconds'
	{ after(grammarAccess.getXPeaksAccess().getSecondsKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstDeg__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDeg__Group__0__Impl
	rule__ConstDeg__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDeg__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDegAccess().getConfidence_is_in_constant_degradationKeyword_0()); }
	'confidence_is_in_constant_degradation'
	{ after(grammarAccess.getConstDegAccess().getConfidence_is_in_constant_degradationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDeg__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDeg__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDeg__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDegAccess().getCantAssignment_1()); }
	(rule__ConstDeg__CantAssignment_1)
	{ after(grammarAccess.getConstDegAccess().getCantAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HighTime__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HighTime__Group__0__Impl
	rule__HighTime__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HighTime__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighTimeAccess().getConfidence_is_belowKeyword_0()); }
	'confidence_is_below'
	{ after(grammarAccess.getHighTimeAccess().getConfidence_is_belowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HighTime__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HighTime__Group__1__Impl
	rule__HighTime__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HighTime__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighTimeAccess().getCantAssignment_1()); }
	(rule__HighTime__CantAssignment_1)
	{ after(grammarAccess.getHighTimeAccess().getCantAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HighTime__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HighTime__Group__2__Impl
	rule__HighTime__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HighTime__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighTimeAccess().getWithinKeyword_2()); }
	'within'
	{ after(grammarAccess.getHighTimeAccess().getWithinKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HighTime__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HighTime__Group__3__Impl
	rule__HighTime__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__HighTime__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighTimeAccess().getTimeAssignment_3()); }
	(rule__HighTime__TimeAssignment_3)
	{ after(grammarAccess.getHighTimeAccess().getTimeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HighTime__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HighTime__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HighTime__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighTimeAccess().getSecondsKeyword_4()); }
	'seconds'
	{ after(grammarAccess.getHighTimeAccess().getSecondsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HighPeak__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HighPeak__Group__0__Impl
	rule__HighPeak__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HighPeak__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighPeakAccess().getConfidence_is_belowKeyword_0()); }
	'confidence_is_below'
	{ after(grammarAccess.getHighPeakAccess().getConfidence_is_belowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HighPeak__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HighPeak__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HighPeak__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighPeakAccess().getCantAssignment_1()); }
	(rule__HighPeak__CantAssignment_1)
	{ after(grammarAccess.getHighPeakAccess().getCantAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__0__Impl
	rule__Reference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getAlternatives_0()); }
	(rule__Reference__Alternatives_0)
	{ after(grammarAccess.getReferenceAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getReferenceAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Upper__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Upper__Group__0__Impl
	rule__Upper__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Upper__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpperAccess().getIs_belowKeyword_0()); }
	'is_below'
	{ after(grammarAccess.getUpperAccess().getIs_belowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Upper__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Upper__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Upper__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpperAccess().getBound_uppAssignment_1()); }
	(rule__Upper__Bound_uppAssignment_1)
	{ after(grammarAccess.getUpperAccess().getBound_uppAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Lower__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lower__Group__0__Impl
	rule__Lower__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lower__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLowerAccess().getIs_aboveKeyword_0()); }
	'is_above'
	{ after(grammarAccess.getLowerAccess().getIs_aboveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lower__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lower__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lower__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLowerAccess().getBound_lowerAssignment_1()); }
	(rule__Lower__Bound_lowerAssignment_1)
	{ after(grammarAccess.getLowerAccess().getBound_lowerAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__0__Impl
	rule__Range__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getIs_in_range_betweenKeyword_0()); }
	'is_in_range_between'
	{ after(grammarAccess.getRangeAccess().getIs_in_range_betweenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__1__Impl
	rule__Range__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getBound_lowerAssignment_1()); }
	(rule__Range__Bound_lowerAssignment_1)
	{ after(grammarAccess.getRangeAccess().getBound_lowerAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__2__Impl
	rule__Range__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getAndKeyword_2()); }
	'and'
	{ after(grammarAccess.getRangeAccess().getAndKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getBound_uppAssignment_3()); }
	(rule__Range__Bound_uppAssignment_3)
	{ after(grammarAccess.getRangeAccess().getBound_uppAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Gap__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Gap__Group__0__Impl
	rule__Gap__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Gap__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGapAccess().getNot_in_range_betweenKeyword_0()); }
	'not_in_range_between'
	{ after(grammarAccess.getGapAccess().getNot_in_range_betweenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gap__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Gap__Group__1__Impl
	rule__Gap__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Gap__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGapAccess().getBound_lowerAssignment_1()); }
	(rule__Gap__Bound_lowerAssignment_1)
	{ after(grammarAccess.getGapAccess().getBound_lowerAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gap__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Gap__Group__2__Impl
	rule__Gap__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Gap__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGapAccess().getAndKeyword_2()); }
	'and'
	{ after(grammarAccess.getGapAccess().getAndKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gap__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Gap__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Gap__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGapAccess().getBound_uppAssignment_3()); }
	(rule__Gap__Bound_uppAssignment_3)
	{ after(grammarAccess.getGapAccess().getBound_uppAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__D__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__D__Group__0__Impl
	rule__D__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__D__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getDAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__D__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__D__Group__1__Impl
	rule__D__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__D__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getDAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__D__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__D__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__D__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDAccess().getGroup_2()); }
	(rule__D__Group_2__0)?
	{ after(grammarAccess.getDAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__D__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__D__Group_2__0__Impl
	rule__D__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__D__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDAccess().getFullStopKeyword_2_0()); }
	'.'
	{ after(grammarAccess.getDAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__D__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__D__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__D__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDAccess().getINTTerminalRuleCall_2_1()); }
	RULE_INT
	{ after(grammarAccess.getDAccess().getINTTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group__0__Impl
	rule__DataType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0()); }
	'datatype'
	{ after(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
	(rule__DataType__NameAssignment_1)
	{ after(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageDeclaration__Group__0__Impl
	rule__PackageDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }
	'package'
	{ after(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageDeclaration__Group__1__Impl
	rule__PackageDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
	(rule__PackageDeclaration__NameAssignment_1)
	{ after(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageDeclaration__Group__2__Impl
	rule__PackageDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageDeclaration__Group__3__Impl
	rule__PackageDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageDeclarationAccess().getElementsAssignment_3()); }
	(rule__PackageDeclaration__ElementsAssignment_3)*
	{ after(grammarAccess.getPackageDeclarationAccess().getElementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Adeptness__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdeptnessAccess().getElementsAbstractElementParserRuleCall_0()); }
		ruleAbstractElement
		{ after(grammarAccess.getAdeptnessAccess().getElementsAbstractElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
		ruleQualifiedNameWithWildcard
		{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__OracleAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignalAccess().getOracleOracleParserRuleCall_3_0()); }
		ruleOracle
		{ after(grammarAccess.getSignalAccess().getOracleOracleParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Oracle__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOracleAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getOracleAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Oracle__CheckAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOracleAccess().getCheckCheckParserRuleCall_3_0()); }
		ruleCheck
		{ after(grammarAccess.getOracleAccess().getCheckCheckParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getCheckAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__ReferenceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckAccess().getReferenceReferenceParserRuleCall_2_0()); }
		ruleReference
		{ after(grammarAccess.getCheckAccess().getReferenceReferenceParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__FailReasonAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckAccess().getFailReasonFailReasonParserRuleCall_3_0()); }
		ruleFailReason
		{ after(grammarAccess.getCheckAccess().getFailReasonFailReasonParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__DescriptionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckAccess().getDescriptionSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getCheckAccess().getDescriptionSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__HighPeakAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFailReasonAccess().getHighPeakHighPeakParserRuleCall_3_0_0()); }
		ruleHighPeak
		{ after(grammarAccess.getFailReasonAccess().getHighPeakHighPeakParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__HighTimeAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFailReasonAccess().getHighTimeHighTimeParserRuleCall_3_1_0()); }
		ruleHighTime
		{ after(grammarAccess.getFailReasonAccess().getHighTimeHighTimeParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__ConstDegAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFailReasonAccess().getConstDegConstDegParserRuleCall_3_2_0()); }
		ruleConstDeg
		{ after(grammarAccess.getFailReasonAccess().getConstDegConstDegParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FailReason__XPeaksAssignment_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFailReasonAccess().getXPeaksXPeaksParserRuleCall_3_3_0()); }
		ruleXPeaks
		{ after(grammarAccess.getFailReasonAccess().getXPeaksXPeaksParserRuleCall_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__CantAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXPeaksAccess().getCantDOUBLEParserRuleCall_1_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getXPeaksAccess().getCantDOUBLEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__NPeaksAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXPeaksAccess().getNPeaksDOUBLEParserRuleCall_3_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getXPeaksAccess().getNPeaksDOUBLEParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XPeaks__TimeAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXPeaksAccess().getTimeDOUBLEParserRuleCall_6_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getXPeaksAccess().getTimeDOUBLEParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDeg__CantAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstDegAccess().getCantDOUBLEParserRuleCall_1_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getConstDegAccess().getCantDOUBLEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HighTime__CantAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHighTimeAccess().getCantDOUBLEParserRuleCall_1_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getHighTimeAccess().getCantDOUBLEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HighTime__TimeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHighTimeAccess().getTimeDOUBLEParserRuleCall_3_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getHighTimeAccess().getTimeDOUBLEParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HighPeak__CantAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHighPeakAccess().getCantDOUBLEParserRuleCall_1_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getHighPeakAccess().getCantDOUBLEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__UpperAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getUpperUpperParserRuleCall_0_0_0()); }
		ruleUpper
		{ after(grammarAccess.getReferenceAccess().getUpperUpperParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__LowerAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getLowerLowerParserRuleCall_0_1_0()); }
		ruleLower
		{ after(grammarAccess.getReferenceAccess().getLowerLowerParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__RangeAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getRangeRangeParserRuleCall_0_2_0()); }
		ruleRange
		{ after(grammarAccess.getReferenceAccess().getRangeRangeParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__GapAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getGapGapParserRuleCall_0_3_0()); }
		ruleGap
		{ after(grammarAccess.getReferenceAccess().getGapGapParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Upper__Bound_uppAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpperAccess().getBound_uppBound_upParserRuleCall_1_0()); }
		ruleBound_up
		{ after(grammarAccess.getUpperAccess().getBound_uppBound_upParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lower__Bound_lowerAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLowerAccess().getBound_lowerBound_DownParserRuleCall_1_0()); }
		ruleBound_Down
		{ after(grammarAccess.getLowerAccess().getBound_lowerBound_DownParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Bound_lowerAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeAccess().getBound_lowerBound_DownParserRuleCall_1_0()); }
		ruleBound_Down
		{ after(grammarAccess.getRangeAccess().getBound_lowerBound_DownParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Bound_uppAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeAccess().getBound_uppBound_upParserRuleCall_3_0()); }
		ruleBound_up
		{ after(grammarAccess.getRangeAccess().getBound_uppBound_upParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gap__Bound_lowerAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGapAccess().getBound_lowerBound_DownParserRuleCall_1_0()); }
		ruleBound_Down
		{ after(grammarAccess.getGapAccess().getBound_lowerBound_DownParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gap__Bound_uppAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGapAccess().getBound_uppBound_upParserRuleCall_3_0()); }
		ruleBound_up
		{ after(grammarAccess.getGapAccess().getBound_uppBound_upParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bound_up__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBound_upAccess().getValueDOUBLEParserRuleCall_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getBound_upAccess().getValueDOUBLEParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bound_Down__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBound_DownAccess().getValueDOUBLEParserRuleCall_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getBound_DownAccess().getValueDOUBLEParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOLEAN__BoolAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBOOLEANAccess().getBoolBParserRuleCall_0()); }
		ruleb
		{ after(grammarAccess.getBOOLEANAccess().getBoolBParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__DValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDOUBLEAccess().getDValDParserRuleCall_0()); }
		ruled
		{ after(grammarAccess.getDOUBLEAccess().getDValDParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__ElementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageDeclarationAccess().getElementsAbstractElementParserRuleCall_3_0()); }
		ruleAbstractElement
		{ after(grammarAccess.getPackageDeclarationAccess().getElementsAbstractElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
