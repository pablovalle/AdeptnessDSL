import TWOTANKS_ORACLE.adeptness
// 32 DE 32 REQUISITOS MODELADOS.

CPS PuertasPiso: implements MONITORING_PLAN_TWOTANKS
	ORACLE R0_8:
		checks: Tank2Height  is above SafeLevel;
		fails if :  confidence is below 0;
		Description: "kljklj"
	ENDORACLE
	  
		
	ORACLE R1_1:
		checks: Tank1Height is below (Tank1MaxHeight * Tank1CrossSec );
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_2:
	    checks: Tank2Height is below (Tank2MaxHeight * Tank2CrossSec);
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	
	
	ORACLE R1_5:
		while: (Tank1Height >= Tank1SensorHHeight )
	    checks: Tank1SensorHValue  should be 1;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_6:
		while: (Tank1Height < Tank1SensorHHeight )
	    checks: Tank1SensorHValue   should be 0;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_7:
		while: (Tank1Height >= Tank1SensorLHeight)
	    checks: Tank1SensorLValue should be 1;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_8:
		while: (Tank1Height < Tank1SensorLHeight)
	    checks: Tank1SensorLValue  should be 0;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_9:
		while: (Tank2Height >= Tank2SensorHHeight)
	    checks: Tank2SensorHValue should be 1;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_10:
		while: (Tank2Height < Tank2SensorHHeight)
	    checks: Tank2SensorHValue  should be 0;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_11:
		while: (Tank2Height >= Tank2SensorMHeight)
	    checks: Tank2SensorMValue  should be 1;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_12:
		while: (Tank2Height < Tank2SensorMHeight)
	    checks: Tank2SensorMValue should be 0;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_13:
		while: (Tank2Height >= Tank2SensorLHeight)
	    checks: Tank2SensorMValue should be 1;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_14:
		while: (Tank2Height < Tank2SensorLHeight)
	    checks: Tank2SensorLValue  should be 0;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_16_a:
	    checks: ( 0-TimeIncrement * Tank1ValveFlow )  is below ( ( Tank1Height - Tank1HeightPrev ) * Tank1CrossSec );
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_16_b:
	    checks: ( ( Tank1Height - Tank1HeightPrev ) * Tank1CrossSec )  is below ( TimeIncrement * Tank1PumpFlow );
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_17_a:
		while: (Pump_State == 1  &&  Valve_State == 1) 
	    checks: Tank1Height should be (Tank1HeightPrev + ( Tank1PumpFlow - ( Tank1ValveFlow * TimeIncrement / Tank1CrossSec)));
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_17_b:
		while: (Pump_State == 1  &&  Valve_State == 0) 
	    checks: Tank1Height should be (Tank1HeightPrev + (Tank1PumpFlow  * TimeIncrement / Tank1CrossSec ));
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_17_c:
		while:  (Pump_State == 0  &&  Valve_State == 1) 
	    checks: Tank1Height should be (Tank1HeightPrev - ( Tank1ValveFlow * TimeIncrement / Tank1CrossSec ));
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_17_d:
		while:  (Pump_State == 0  &&  Valve_State == 0) 
	    checks: Tank1Height should be Tank1HeightPrev ;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_18:
		while:  (Pump_State == 1  &&  Valve_State == 0) 
	    checks: Tank1Height is above Tank1HeightPrev ;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_19:
		while:  (Pump_State = 0  &&  Valve_State = 1) 
	    checks: Tank1Height is below Tank1HeightPrev ;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_20:
		while:  (Pump_State == 0  &&  Valve_State == 0) 
	    checks: Tank1Height should be Tank1HeightPrev;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_26_a:
	    checks: Tank1Height should be Tank1HeightPrev;
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_26_b:
	    checks: ( 0-1 * ( Tank2PValveFlow + Tank2EValveFlow ) ) * TimeIncrement   is below (Tank2CrossSec*(Tank2Height - Tank2HeightPrev));
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_26_c:
	    checks:  ( Tank2CrossSec * (Tank2Height - Tank2HeightPrev ) ) is below (TimeIncrement * Tank1ValveFlow );
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_27_a:
		while: (Valve_State == 1  &&  PValveState == 1  &&  EValveState == 1   )
	    checks:  Tank2Height should be (Tank2HeightPrev + (  ( (Tank1ValveFlow - Tank2PValveFlow) - Tank2EValveFlow) * TimeIncrement ) / Tank2CrossSec);
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_27_b:
		while: (  Valve_State == 1  &&  PValveState == 1  &&  EValveState == 0  ) 
		checks: Tank2Height should be (Tank2HeightPrev + ( ( ( Tank1ValveFlow - Tank2PValveFlow ) * TimeIncrement ) / Tank2CrossSec)); 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_27_c:
		while: (  Valve_State == 1  &&  PValveState == 0  &&  EValveState == 1  ) 
		checks: Tank2Height should be (Tank2HeightPrev + ( ( ( Tank1ValveFlow - Tank2EValveFlow ) * TimeIncrement ) / Tank2CrossSec )); 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_27_d:
		while: (  Valve_State == 1  &&  PValveState == 0  &&  EValveState == 0 ) 
		checks: Tank2Height should be (Tank2HeightPrev + ( ( Tank1ValveFlow * TimeIncrement ) / Tank2CrossSec )  ) ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_27_e:
		while: (  Valve_State == 0 &&  PValveState == 1  &&  EValveState == 1 ) 
		checks: Tank2Height should be (Tank2HeightPrev + ( ( ( (0-1 * Tank2PValveFlow) - Tank2EValveFlow ) * TimeIncrement ) / Tank2CrossSec ) ) ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	
	ORACLE R1_27_e:
		while: (  Valve_State == 0 &&  PValveState == 1  &&  EValveState == 0 ) 
		checks: Tank2Height should be (Tank2HeightPrev + ( ( (0-1 * Tank2PValveFlow) * TimeIncrement ) / Tank2CrossSec )) ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_27_f:
		while: (  Valve_State == 0 &&  PValveState == 0  &&  EValveState == 1) 
		checks: Tank2Height should be (Tank2HeightPrev + ( ( ( (0-1 * Tank2EValveFlow) ) * TimeIncrement ) / Tank2CrossSec )); 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_27_g:
		while: (  Valve_State == 0 &&  PValveState == 0  &&  EValveState == 0) 
		checks: Tank2Height should be Tank2HeightPrev  ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_28:
		while: ( Valve_State == 1  &&  PValveState == 0  &&  EValveState == 0  ) 
		checks: Tank2Height is above Tank2HeightPrev ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_29:
		while: ( Valve_State == 1  &&  PValveState == 1  &&  EValveState == 0  ) 
		checks: Tank2Height is above Tank2HeightPrev ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_30:
		while: ( Valve_State == 1  &&  PValveState == 0  &&  EValveState == 1 ) 
		checks: Tank2Height is below Tank2HeightPrev ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R1_31:
		while: ( Valve_State == 0  &&  PValveState == 0  &&  EValveState == 0) 
		checks: Tank2Height should be Tank2HeightPrev; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R2_1_a:
		while: ( Tank1SensorLValue == 0 ) 
		checks: Pump_State  should be 1; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R2_1_b:
		while: ( Tank1SensorLValue == 0 ) 
		checks: Valve_State should be 0; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R2_2_a:
		while: ( Tank1SensorHValue == 1 ) 
		checks: Pump_State  should be 0; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R2_2_b:
		while: ( Tank1SensorHValue == 1 ) 
		checks: Valve_State  should be 1; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R2_3_a:
		while: ( Tank1SensorHValue == 1 && Tank1SensorLValue == 1 ) 
		checks: Pump_State  should be Pump_StatePrev  ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	ORACLE R2_3_b:
		while: ( Tank1SensorHValue == 1 && Tank1SensorLValue == 1 ) 
		checks: Valve_State  should be Valve_StatePrev   ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R2_7_a:
		while: ( Tank2SensorLValue == 0 ) 
		checks: PValveState should be 0; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	ORACLE R2_7_b:
		while: (Tank2SensorLValue == 0 ) 
		checks: EValveState should be 0 ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R2_8_a:
		while: ( Tank2SensorLValue == 1  &&  Tank2SensorMValue == 0  ) 
		checks: PValveState should be 0; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	ORACLE R2_8_b:
		while: ( Tank2SensorLValue == 1  &&  Tank2SensorMValue == 0  ) 
		checks: EValveState  should be 1 ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R2_9_a:
		while: (Tank2SensorHValue  == 1 ) 
		checks: PValveState  should be 1 ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R2_9_b:
		while: (Tank2SensorHValue  == 1 ) 
		checks: EValveState  should be 1 ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	
	ORACLE R2_10_a:
		while: (Tank2SensorHValue == 0  &&  Tank2SensorMValue == 1  &&  EValveStatePrev == 1  ) 
		checks: PValveState  should be 1 ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R2_10_b:
		while: (Tank2SensorHValue == 0  &&  Tank2SensorMValue == 1  &&  EValveStatePrev == 1  ) 
		checks: EValveState  should be 1 ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	
	ORACLE R2_11_a:
		while: (Tank2SensorHValue == 0  &&  Tank2SensorMValue == 1  &&  EValveStatePrev == 0  ) 
		checks: PValveState  should be 1 ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	ORACLE R2_11_b:
		while: (Tank2SensorHValue == 0  &&  Tank2SensorMValue == 1  &&  EValveStatePrev == 0  ) 
		checks: EValveState should be 0 ; 
		fails if : confidence is below 0;
		Description: "EXPLICACION"
	ENDORACLE
	
	
ENDCPS 