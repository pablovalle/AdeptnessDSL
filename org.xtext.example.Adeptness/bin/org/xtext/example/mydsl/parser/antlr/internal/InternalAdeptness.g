/*
 * generated by Xtext 2.24.0
 */
grammar InternalAdeptness;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.AdeptnessGrammarAccess;

}

@parser::members {

 	private AdeptnessGrammarAccess grammarAccess;

    public InternalAdeptnessParser(TokenStream input, AdeptnessGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Adeptness";
   	}

   	@Override
   	protected AdeptnessGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAdeptness
entryRuleAdeptness returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdeptnessRule()); }
	iv_ruleAdeptness=ruleAdeptness
	{ $current=$iv_ruleAdeptness.current; }
	EOF;

// Rule Adeptness
ruleAdeptness returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAdeptnessAccess().getElementsAbstractElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleAbstractElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAdeptnessRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.mydsl.Adeptness.AbstractElement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	iv_ruleAbstractElement=ruleAbstractElement
	{ $current=$iv_ruleAbstractElement.current; }
	EOF;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getPackageDeclarationParserRuleCall_0());
		}
		this_PackageDeclaration_0=rulePackageDeclaration
		{
			$current = $this_PackageDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getTypeParserRuleCall_1());
		}
		this_Type_1=ruleType
		{
			$current = $this_Type_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getImportParserRuleCall_2());
		}
		this_Import_2=ruleImport
		{
			$current = $this_Import_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"org.xtext.example.mydsl.Adeptness.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_0());
		}
		this_DataType_0=ruleDataType
		{
			$current = $this_DataType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getSignalParserRuleCall_1());
		}
		this_Signal_1=ruleSignal
		{
			$current = $this_Signal_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignalRule()); }
	iv_ruleSignal=ruleSignal
	{ $current=$iv_ruleSignal.current; }
	EOF;

// Rule Signal
ruleSignal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CPS'
		{
			newLeafNode(otherlv_0, grammarAccess.getSignalAccess().getCPSKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignalRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getSignalAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSignalAccess().getOracleOracleParserRuleCall_3_0());
				}
				lv_oracle_3_0=ruleOracle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignalRule());
					}
					add(
						$current,
						"oracle",
						lv_oracle_3_0,
						"org.xtext.example.mydsl.Adeptness.Oracle");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='ENDCPS'
		{
			newLeafNode(otherlv_4, grammarAccess.getSignalAccess().getENDCPSKeyword_4());
		}
	)
;

// Entry rule entryRuleOracle
entryRuleOracle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOracleRule()); }
	iv_ruleOracle=ruleOracle
	{ $current=$iv_ruleOracle.current; }
	EOF;

// Rule Oracle
ruleOracle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ORACLE'
		{
			newLeafNode(otherlv_0, grammarAccess.getOracleAccess().getORACLEKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOracleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOracleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getOracleAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOracleAccess().getCheckCheckParserRuleCall_3_0());
				}
				lv_check_3_0=ruleCheck
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOracleRule());
					}
					add(
						$current,
						"check",
						lv_check_3_0,
						"org.xtext.example.mydsl.Adeptness.Check");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='ENDORACLE'
		{
			newLeafNode(otherlv_4, grammarAccess.getOracleAccess().getENDORACLEKeyword_4());
		}
	)
;

// Entry rule entryRuleCheck
entryRuleCheck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckRule()); }
	iv_ruleCheck=ruleCheck
	{ $current=$iv_ruleCheck.current; }
	EOF;

// Rule Check
ruleCheck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='checks:'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheckAccess().getChecksKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCheckAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheckRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckAccess().getReferenceReferenceParserRuleCall_2_0());
				}
				lv_reference_2_0=ruleReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckRule());
					}
					set(
						$current,
						"reference",
						lv_reference_2_0,
						"org.xtext.example.mydsl.Adeptness.Reference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckAccess().getFailReasonFailReasonParserRuleCall_3_0());
				}
				lv_failReason_3_0=ruleFailReason
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckRule());
					}
					add(
						$current,
						"failReason",
						lv_failReason_3_0,
						"org.xtext.example.mydsl.Adeptness.FailReason");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				lv_description_4_0=RULE_STRING
				{
					newLeafNode(lv_description_4_0, grammarAccess.getCheckAccess().getDescriptionSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheckRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleFailReason
entryRuleFailReason returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFailReasonRule()); }
	iv_ruleFailReason=ruleFailReason
	{ $current=$iv_ruleFailReason.current; }
	EOF;

// Rule FailReason
ruleFailReason returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fails'
		{
			newLeafNode(otherlv_0, grammarAccess.getFailReasonAccess().getFailsKeyword_0());
		}
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getFailReasonAccess().getIfKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFailReasonAccess().getColonKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFailReasonAccess().getHighPeakHighPeakParserRuleCall_3_0_0());
					}
					lv_highPeak_3_0=ruleHighPeak
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFailReasonRule());
						}
						set(
							$current,
							"highPeak",
							lv_highPeak_3_0,
							"org.xtext.example.mydsl.Adeptness.HighPeak");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFailReasonAccess().getHighTimeHighTimeParserRuleCall_3_1_0());
					}
					lv_highTime_4_0=ruleHighTime
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFailReasonRule());
						}
						set(
							$current,
							"highTime",
							lv_highTime_4_0,
							"org.xtext.example.mydsl.Adeptness.HighTime");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFailReasonAccess().getConstDegConstDegParserRuleCall_3_2_0());
					}
					lv_constDeg_5_0=ruleConstDeg
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFailReasonRule());
						}
						set(
							$current,
							"constDeg",
							lv_constDeg_5_0,
							"org.xtext.example.mydsl.Adeptness.ConstDeg");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFailReasonAccess().getXPeaksXPeaksParserRuleCall_3_3_0());
					}
					lv_xPeaks_6_0=ruleXPeaks
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFailReasonRule());
						}
						set(
							$current,
							"xPeaks",
							lv_xPeaks_6_0,
							"org.xtext.example.mydsl.Adeptness.XPeaks");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getFailReasonAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleXPeaks
entryRuleXPeaks returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXPeaksRule()); }
	iv_ruleXPeaks=ruleXPeaks
	{ $current=$iv_ruleXPeaks.current; }
	EOF;

// Rule XPeaks
ruleXPeaks returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='confidence_is_below'
		{
			newLeafNode(otherlv_0, grammarAccess.getXPeaksAccess().getConfidence_is_belowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXPeaksAccess().getCantDOUBLEParserRuleCall_1_0());
				}
				lv_cant_1_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXPeaksRule());
					}
					set(
						$current,
						"cant",
						lv_cant_1_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='more_than'
		{
			newLeafNode(otherlv_2, grammarAccess.getXPeaksAccess().getMore_thanKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXPeaksAccess().getNPeaksDOUBLEParserRuleCall_3_0());
				}
				lv_nPeaks_3_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXPeaksRule());
					}
					set(
						$current,
						"nPeaks",
						lv_nPeaks_3_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='times'
		{
			newLeafNode(otherlv_4, grammarAccess.getXPeaksAccess().getTimesKeyword_4());
		}
		otherlv_5='within'
		{
			newLeafNode(otherlv_5, grammarAccess.getXPeaksAccess().getWithinKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXPeaksAccess().getTimeDOUBLEParserRuleCall_6_0());
				}
				lv_time_6_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXPeaksRule());
					}
					set(
						$current,
						"time",
						lv_time_6_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='seconds'
		{
			newLeafNode(otherlv_7, grammarAccess.getXPeaksAccess().getSecondsKeyword_7());
		}
	)
;

// Entry rule entryRuleConstDeg
entryRuleConstDeg returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstDegRule()); }
	iv_ruleConstDeg=ruleConstDeg
	{ $current=$iv_ruleConstDeg.current; }
	EOF;

// Rule ConstDeg
ruleConstDeg returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='confidence_is_in_constant_degradation'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstDegAccess().getConfidence_is_in_constant_degradationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstDegAccess().getCantDOUBLEParserRuleCall_1_0());
				}
				lv_cant_1_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstDegRule());
					}
					set(
						$current,
						"cant",
						lv_cant_1_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHighTime
entryRuleHighTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHighTimeRule()); }
	iv_ruleHighTime=ruleHighTime
	{ $current=$iv_ruleHighTime.current; }
	EOF;

// Rule HighTime
ruleHighTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='confidence_is_below'
		{
			newLeafNode(otherlv_0, grammarAccess.getHighTimeAccess().getConfidence_is_belowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHighTimeAccess().getCantDOUBLEParserRuleCall_1_0());
				}
				lv_cant_1_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHighTimeRule());
					}
					set(
						$current,
						"cant",
						lv_cant_1_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='within'
		{
			newLeafNode(otherlv_2, grammarAccess.getHighTimeAccess().getWithinKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHighTimeAccess().getTimeDOUBLEParserRuleCall_3_0());
				}
				lv_time_3_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHighTimeRule());
					}
					set(
						$current,
						"time",
						lv_time_3_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='seconds'
		{
			newLeafNode(otherlv_4, grammarAccess.getHighTimeAccess().getSecondsKeyword_4());
		}
	)
;

// Entry rule entryRuleHighPeak
entryRuleHighPeak returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHighPeakRule()); }
	iv_ruleHighPeak=ruleHighPeak
	{ $current=$iv_ruleHighPeak.current; }
	EOF;

// Rule HighPeak
ruleHighPeak returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='confidence_is_below'
		{
			newLeafNode(otherlv_0, grammarAccess.getHighPeakAccess().getConfidence_is_belowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHighPeakAccess().getCantDOUBLEParserRuleCall_1_0());
				}
				lv_cant_1_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHighPeakRule());
					}
					set(
						$current,
						"cant",
						lv_cant_1_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	iv_ruleReference=ruleReference
	{ $current=$iv_ruleReference.current; }
	EOF;

// Rule Reference
ruleReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceAccess().getUpperUpperParserRuleCall_0_0_0());
					}
					lv_upper_0_0=ruleUpper
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceRule());
						}
						set(
							$current,
							"upper",
							lv_upper_0_0,
							"org.xtext.example.mydsl.Adeptness.Upper");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceAccess().getLowerLowerParserRuleCall_0_1_0());
					}
					lv_lower_1_0=ruleLower
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceRule());
						}
						set(
							$current,
							"lower",
							lv_lower_1_0,
							"org.xtext.example.mydsl.Adeptness.Lower");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceAccess().getRangeRangeParserRuleCall_0_2_0());
					}
					lv_range_2_0=ruleRange
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceRule());
						}
						set(
							$current,
							"range",
							lv_range_2_0,
							"org.xtext.example.mydsl.Adeptness.Range");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceAccess().getGapGapParserRuleCall_0_3_0());
					}
					lv_gap_3_0=ruleGap
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceRule());
						}
						set(
							$current,
							"gap",
							lv_gap_3_0,
							"org.xtext.example.mydsl.Adeptness.Gap");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getReferenceAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleUpper
entryRuleUpper returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpperRule()); }
	iv_ruleUpper=ruleUpper
	{ $current=$iv_ruleUpper.current; }
	EOF;

// Rule Upper
ruleUpper returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='is_below'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpperAccess().getIs_belowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpperAccess().getBound_uppBound_upParserRuleCall_1_0());
				}
				lv_bound_upp_1_0=ruleBound_up
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpperRule());
					}
					set(
						$current,
						"bound_upp",
						lv_bound_upp_1_0,
						"org.xtext.example.mydsl.Adeptness.Bound_up");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLower
entryRuleLower returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLowerRule()); }
	iv_ruleLower=ruleLower
	{ $current=$iv_ruleLower.current; }
	EOF;

// Rule Lower
ruleLower returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='is_above'
		{
			newLeafNode(otherlv_0, grammarAccess.getLowerAccess().getIs_aboveKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLowerAccess().getBound_lowerBound_DownParserRuleCall_1_0());
				}
				lv_bound_lower_1_0=ruleBound_Down
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLowerRule());
					}
					set(
						$current,
						"bound_lower",
						lv_bound_lower_1_0,
						"org.xtext.example.mydsl.Adeptness.Bound_Down");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	iv_ruleRange=ruleRange
	{ $current=$iv_ruleRange.current; }
	EOF;

// Rule Range
ruleRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='is_in_range_between'
		{
			newLeafNode(otherlv_0, grammarAccess.getRangeAccess().getIs_in_range_betweenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getBound_lowerBound_DownParserRuleCall_1_0());
				}
				lv_bound_lower_1_0=ruleBound_Down
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"bound_lower",
						lv_bound_lower_1_0,
						"org.xtext.example.mydsl.Adeptness.Bound_Down");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='and'
		{
			newLeafNode(otherlv_2, grammarAccess.getRangeAccess().getAndKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getBound_uppBound_upParserRuleCall_3_0());
				}
				lv_bound_upp_3_0=ruleBound_up
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"bound_upp",
						lv_bound_upp_3_0,
						"org.xtext.example.mydsl.Adeptness.Bound_up");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGap
entryRuleGap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGapRule()); }
	iv_ruleGap=ruleGap
	{ $current=$iv_ruleGap.current; }
	EOF;

// Rule Gap
ruleGap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='not_in_range_between'
		{
			newLeafNode(otherlv_0, grammarAccess.getGapAccess().getNot_in_range_betweenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGapAccess().getBound_lowerBound_DownParserRuleCall_1_0());
				}
				lv_bound_lower_1_0=ruleBound_Down
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGapRule());
					}
					set(
						$current,
						"bound_lower",
						lv_bound_lower_1_0,
						"org.xtext.example.mydsl.Adeptness.Bound_Down");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='and'
		{
			newLeafNode(otherlv_2, grammarAccess.getGapAccess().getAndKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGapAccess().getBound_uppBound_upParserRuleCall_3_0());
				}
				lv_bound_upp_3_0=ruleBound_up
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGapRule());
					}
					set(
						$current,
						"bound_upp",
						lv_bound_upp_3_0,
						"org.xtext.example.mydsl.Adeptness.Bound_up");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBound_up
entryRuleBound_up returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBound_upRule()); }
	iv_ruleBound_up=ruleBound_up
	{ $current=$iv_ruleBound_up.current; }
	EOF;

// Rule Bound_up
ruleBound_up returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBound_upAccess().getValueDOUBLEParserRuleCall_0());
			}
			lv_value_0_0=ruleDOUBLE
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBound_upRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.example.mydsl.Adeptness.DOUBLE");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBound_Down
entryRuleBound_Down returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBound_DownRule()); }
	iv_ruleBound_Down=ruleBound_Down
	{ $current=$iv_ruleBound_Down.current; }
	EOF;

// Rule Bound_Down
ruleBound_Down returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBound_DownAccess().getValueDOUBLEParserRuleCall_0());
			}
			lv_value_0_0=ruleDOUBLE
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBound_DownRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.example.mydsl.Adeptness.DOUBLE");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); }
	iv_ruleBOOLEAN=ruleBOOLEAN
	{ $current=$iv_ruleBOOLEAN.current; }
	EOF;

// Rule BOOLEAN
ruleBOOLEAN returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBOOLEANAccess().getBoolBParserRuleCall_0());
			}
			lv_bool_0_0=ruleb
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBOOLEANRule());
				}
				set(
					$current,
					"bool",
					lv_bool_0_0,
					"org.xtext.example.mydsl.Adeptness.b");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleb
entryRuleb returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBRule()); }
	iv_ruleb=ruleb
	{ $current=$iv_ruleb.current.getText(); }
	EOF;

// Rule b
ruleb returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); }
	iv_ruleDOUBLE=ruleDOUBLE
	{ $current=$iv_ruleDOUBLE.current; }
	EOF;

// Rule DOUBLE
ruleDOUBLE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDOUBLEAccess().getDValDParserRuleCall_0());
			}
			lv_dVal_0_0=ruled
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDOUBLERule());
				}
				set(
					$current,
					"dVal",
					lv_dVal_0_0,
					"org.xtext.example.mydsl.Adeptness.d");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuled
entryRuled returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDRule()); }
	iv_ruled=ruled
	{ $current=$iv_ruled.current.getText(); }
	EOF;

// Rule d
ruled returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getDAccess().getINTTerminalRuleCall_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDAccess().getFullStopKeyword_2_0());
			}
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getDAccess().getINTTerminalRuleCall_2_1());
			}
		)?
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='datatype'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataTypeAccess().getDatatypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	iv_rulePackageDeclaration=rulePackageDeclaration
	{ $current=$iv_rulePackageDeclaration.current; }
	EOF;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.mydsl.Adeptness.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getElementsAbstractElementParserRuleCall_3_0());
				}
				lv_elements_3_0=ruleAbstractElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					add(
						$current,
						"elements",
						lv_elements_3_0,
						"org.xtext.example.mydsl.Adeptness.AbstractElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
