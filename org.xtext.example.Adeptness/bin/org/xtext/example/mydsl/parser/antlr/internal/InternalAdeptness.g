/*
 * generated by Xtext 2.21.0
 */
grammar InternalAdeptness;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.AdeptnessGrammarAccess;

}

@parser::members {

 	private AdeptnessGrammarAccess grammarAccess;

    public InternalAdeptnessParser(TokenStream input, AdeptnessGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Adeptness";
   	}

   	@Override
   	protected AdeptnessGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAdeptness
entryRuleAdeptness returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdeptnessRule()); }
	iv_ruleAdeptness=ruleAdeptness
	{ $current=$iv_ruleAdeptness.current; }
	EOF;

// Rule Adeptness
ruleAdeptness returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAdeptnessAccess().getElementsAbstractElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleAbstractElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAdeptnessRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.mydsl.Adeptness.AbstractElement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	iv_ruleAbstractElement=ruleAbstractElement
	{ $current=$iv_ruleAbstractElement.current; }
	EOF;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getPackageDeclarationParserRuleCall_0());
		}
		this_PackageDeclaration_0=rulePackageDeclaration
		{
			$current = $this_PackageDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getTypeParserRuleCall_1());
		}
		this_Type_1=ruleType
		{
			$current = $this_Type_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getImportParserRuleCall_2());
		}
		this_Import_2=ruleImport
		{
			$current = $this_Import_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"org.xtext.example.mydsl.Adeptness.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_0());
		}
		this_DataType_0=ruleDataType
		{
			$current = $this_DataType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getSignalParserRuleCall_1());
		}
		this_Signal_1=ruleSignal
		{
			$current = $this_Signal_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignalRule()); }
	iv_ruleSignal=ruleSignal
	{ $current=$iv_ruleSignal.current; }
	EOF;

// Rule Signal
ruleSignal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='signal'
		{
			newLeafNode(otherlv_0, grammarAccess.getSignalAccess().getSignalKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignalRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSignalAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSignalAccess().getCheck_static_upperCheck_Static_upper_onlyParserRuleCall_3_0());
				}
				lv_check_static_upper_3_0=ruleCheck_Static_upper_only
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignalRule());
					}
					add(
						$current,
						"check_static_upper",
						lv_check_static_upper_3_0,
						"org.xtext.example.mydsl.Adeptness.Check_Static_upper_only");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSignalAccess().getCheck_static_lowerCheck_Static_lower_onlyParserRuleCall_4_0());
				}
				lv_check_static_lower_4_0=ruleCheck_Static_lower_only
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignalRule());
					}
					add(
						$current,
						"check_static_lower",
						lv_check_static_lower_4_0,
						"org.xtext.example.mydsl.Adeptness.Check_Static_lower_only");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSignalAccess().getCheck_rangeCheck_RangeParserRuleCall_5_0());
				}
				lv_check_range_5_0=ruleCheck_Range
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignalRule());
					}
					add(
						$current,
						"check_range",
						lv_check_range_5_0,
						"org.xtext.example.mydsl.Adeptness.Check_Range");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSignalAccess().getCheck_gapCheck_GapParserRuleCall_6_0());
				}
				lv_check_gap_6_0=ruleCheck_Gap
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignalRule());
					}
					add(
						$current,
						"check_gap",
						lv_check_gap_6_0,
						"org.xtext.example.mydsl.Adeptness.Check_Gap");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getSignalAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleCheck_Static_upper_only
entryRuleCheck_Static_upper_only returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheck_Static_upper_onlyRule()); }
	iv_ruleCheck_Static_upper_only=ruleCheck_Static_upper_only
	{ $current=$iv_ruleCheck_Static_upper_only.current; }
	EOF;

// Rule Check_Static_upper_only
ruleCheck_Static_upper_only returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Check_Static_Upper'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheck_Static_upper_onlyAccess().getCheck_Static_UpperKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCheck_Static_upper_onlyAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheck_Static_upper_onlyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getCheck_Static_upper_onlyAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCheck_Static_upper_onlyAccess().getInclusive_boundInclusiveBoundParserRuleCall_3_0());
				}
				lv_inclusive_bound_3_0=ruleInclusiveBound
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheck_Static_upper_onlyRule());
					}
					set(
						$current,
						"inclusive_bound",
						lv_inclusive_bound_3_0,
						"org.xtext.example.mydsl.Adeptness.InclusiveBound");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCheck_Static_upper_onlyAccess().getBound_upBound_upParserRuleCall_4_0());
				}
				lv_bound_up_4_0=ruleBound_up
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheck_Static_upper_onlyRule());
					}
					set(
						$current,
						"bound_up",
						lv_bound_up_4_0,
						"org.xtext.example.mydsl.Adeptness.Bound_up");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getCheck_Static_upper_onlyAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleCheck_Static_lower_only
entryRuleCheck_Static_lower_only returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheck_Static_lower_onlyRule()); }
	iv_ruleCheck_Static_lower_only=ruleCheck_Static_lower_only
	{ $current=$iv_ruleCheck_Static_lower_only.current; }
	EOF;

// Rule Check_Static_lower_only
ruleCheck_Static_lower_only returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Check_Static_Lower'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheck_Static_lower_onlyAccess().getCheck_Static_LowerKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCheck_Static_lower_onlyAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheck_Static_lower_onlyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getCheck_Static_lower_onlyAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCheck_Static_lower_onlyAccess().getInclusive_boundInclusiveBoundParserRuleCall_3_0());
				}
				lv_inclusive_bound_3_0=ruleInclusiveBound
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheck_Static_lower_onlyRule());
					}
					set(
						$current,
						"inclusive_bound",
						lv_inclusive_bound_3_0,
						"org.xtext.example.mydsl.Adeptness.InclusiveBound");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCheck_Static_lower_onlyAccess().getBound_lowBound_DownParserRuleCall_4_0());
				}
				lv_bound_low_4_0=ruleBound_Down
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheck_Static_lower_onlyRule());
					}
					set(
						$current,
						"bound_low",
						lv_bound_low_4_0,
						"org.xtext.example.mydsl.Adeptness.Bound_Down");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getCheck_Static_lower_onlyAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleCheck_Range
entryRuleCheck_Range returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheck_RangeRule()); }
	iv_ruleCheck_Range=ruleCheck_Range
	{ $current=$iv_ruleCheck_Range.current; }
	EOF;

// Rule Check_Range
ruleCheck_Range returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Check_Range'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheck_RangeAccess().getCheck_RangeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCheck_RangeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheck_RangeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getCheck_RangeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCheck_RangeAccess().getInclusive_boundInclusiveBoundParserRuleCall_3_0());
				}
				lv_inclusive_bound_3_0=ruleInclusiveBound
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheck_RangeRule());
					}
					set(
						$current,
						"inclusive_bound",
						lv_inclusive_bound_3_0,
						"org.xtext.example.mydsl.Adeptness.InclusiveBound");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCheck_RangeAccess().getBound_lowBound_DownParserRuleCall_4_0());
				}
				lv_bound_low_4_0=ruleBound_Down
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheck_RangeRule());
					}
					set(
						$current,
						"bound_low",
						lv_bound_low_4_0,
						"org.xtext.example.mydsl.Adeptness.Bound_Down");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCheck_RangeAccess().getBound_upBound_upParserRuleCall_5_0());
				}
				lv_bound_up_5_0=ruleBound_up
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheck_RangeRule());
					}
					set(
						$current,
						"bound_up",
						lv_bound_up_5_0,
						"org.xtext.example.mydsl.Adeptness.Bound_up");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getCheck_RangeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleCheck_Gap
entryRuleCheck_Gap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheck_GapRule()); }
	iv_ruleCheck_Gap=ruleCheck_Gap
	{ $current=$iv_ruleCheck_Gap.current; }
	EOF;

// Rule Check_Gap
ruleCheck_Gap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Check_Gap'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheck_GapAccess().getCheck_GapKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCheck_GapAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheck_GapRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getCheck_GapAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCheck_GapAccess().getInclusive_boundInclusiveBoundParserRuleCall_3_0());
				}
				lv_inclusive_bound_3_0=ruleInclusiveBound
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheck_GapRule());
					}
					set(
						$current,
						"inclusive_bound",
						lv_inclusive_bound_3_0,
						"org.xtext.example.mydsl.Adeptness.InclusiveBound");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCheck_GapAccess().getBound_lowBound_DownParserRuleCall_4_0());
				}
				lv_bound_low_4_0=ruleBound_Down
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheck_GapRule());
					}
					set(
						$current,
						"bound_low",
						lv_bound_low_4_0,
						"org.xtext.example.mydsl.Adeptness.Bound_Down");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCheck_GapAccess().getBound_upBound_upParserRuleCall_5_0());
				}
				lv_bound_up_5_0=ruleBound_up
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheck_GapRule());
					}
					set(
						$current,
						"bound_up",
						lv_bound_up_5_0,
						"org.xtext.example.mydsl.Adeptness.Bound_up");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getCheck_GapAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleInclusiveBound
entryRuleInclusiveBound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInclusiveBoundRule()); }
	iv_ruleInclusiveBound=ruleInclusiveBound
	{ $current=$iv_ruleInclusiveBound.current; }
	EOF;

// Rule InclusiveBound
ruleInclusiveBound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='inclusiveBound'
		{
			newLeafNode(otherlv_0, grammarAccess.getInclusiveBoundAccess().getInclusiveBoundKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInclusiveBoundAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInclusiveBoundRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getInclusiveBoundAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInclusiveBoundAccess().getValueBOOLEANParserRuleCall_3_0());
				}
				lv_value_3_0=ruleBOOLEAN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInclusiveBoundRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.example.mydsl.Adeptness.BOOLEAN");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBound_up
entryRuleBound_up returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBound_upRule()); }
	iv_ruleBound_up=ruleBound_up
	{ $current=$iv_ruleBound_up.current; }
	EOF;

// Rule Bound_up
ruleBound_up returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='bound_up'
		{
			newLeafNode(otherlv_0, grammarAccess.getBound_upAccess().getBound_upKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getBound_upAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBound_upRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getBound_upAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBound_upAccess().getValueDOUBLEParserRuleCall_3_0());
				}
				lv_value_3_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBound_upRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBound_Down
entryRuleBound_Down returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBound_DownRule()); }
	iv_ruleBound_Down=ruleBound_Down
	{ $current=$iv_ruleBound_Down.current; }
	EOF;

// Rule Bound_Down
ruleBound_Down returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='bound_down'
		{
			newLeafNode(otherlv_0, grammarAccess.getBound_DownAccess().getBound_downKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getBound_DownAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBound_DownRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getBound_DownAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBound_DownAccess().getValueDOUBLEParserRuleCall_3_0());
				}
				lv_value_3_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBound_DownRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); }
	iv_ruleBOOLEAN=ruleBOOLEAN
	{ $current=$iv_ruleBOOLEAN.current; }
	EOF;

// Rule BOOLEAN
ruleBOOLEAN returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBOOLEANAccess().getBoolBParserRuleCall_0());
			}
			lv_bool_0_0=ruleb
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBOOLEANRule());
				}
				set(
					$current,
					"bool",
					lv_bool_0_0,
					"org.xtext.example.mydsl.Adeptness.b");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleb
entryRuleb returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBRule()); }
	iv_ruleb=ruleb
	{ $current=$iv_ruleb.current.getText(); }
	EOF;

// Rule b
ruleb returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); }
	iv_ruleDOUBLE=ruleDOUBLE
	{ $current=$iv_ruleDOUBLE.current; }
	EOF;

// Rule DOUBLE
ruleDOUBLE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDOUBLEAccess().getDValDParserRuleCall_0());
			}
			lv_dVal_0_0=ruled
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDOUBLERule());
				}
				set(
					$current,
					"dVal",
					lv_dVal_0_0,
					"org.xtext.example.mydsl.Adeptness.d");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuled
entryRuled returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDRule()); }
	iv_ruled=ruled
	{ $current=$iv_ruled.current.getText(); }
	EOF;

// Rule d
ruled returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getDAccess().getINTTerminalRuleCall_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDAccess().getFullStopKeyword_2_0());
			}
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getDAccess().getINTTerminalRuleCall_2_1());
			}
		)?
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='datatype'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataTypeAccess().getDatatypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	iv_rulePackageDeclaration=rulePackageDeclaration
	{ $current=$iv_rulePackageDeclaration.current; }
	EOF;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.mydsl.Adeptness.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getElementsAbstractElementParserRuleCall_3_0());
				}
				lv_elements_3_0=ruleAbstractElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					add(
						$current,
						"elements",
						lv_elements_3_0,
						"org.xtext.example.mydsl.Adeptness.AbstractElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
