grammar org.xtext.example.mydsl.Adeptness with org.eclipse.xtext.common.Terminals

generate adeptness "http://www.xtext.org/example/mydsl/Adeptness"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Adeptness:
	(elements+=AbstractElement)*
;

AbstractElement:
	PackageDeclaration | Type | Import
;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard
;

QualifiedNameWithWildcard:
	QualifiedName '.*'?
;

QualifiedName:
	ID ('.' ID)*
;

Type:
	DataType | Signal
;
//Each signal could have more than one oracles
Signal:
	'CPS' name=ID ':'
		(oracle+=Oracle)+';'
		/*(check_static_upper+=Check_Static_upper_only)*
		(check_static_lower+=Check_Static_lower_only)*
		(check_range+=Check_Range)*
		(check_gap+=Check_Gap)*/
;


Oracle: 
	'Oracle' name=ID ':'
		(check+=Check)+';'
;

Check:
	'checks:' name=STRING 'is'
	(reference=Reference)
	(failReason+=FailReason)+
	(description=STRING) ','
	
;
FailReason:
	'fails' 'if' ':'
	((highPeak=HighPeak)|(highTime=HighTime)|(constDeg=ConstDeg)|(HigPeaks=HighPeaks)) ','
;

HighPeaks:
	'value' 'is' 'higher' 'than' (cant=DOUBLE) 'in' 'interval' 'of' (time=DOUBLE)
;

ConstDeg:
	'constant' 'degradation' (((upper=Upper)|(lower=Lower)))
;

HighTime:
	'higher' 'than' (cant=DOUBLE) 'in' 'a' 'time' 'of' (time=DOUBLE)
;

HighPeak:
	'highest' 'value' 'is' 'higher' 'than' (cant=DOUBLE)
;

Reference:
	((upper=Upper)|(lower=Lower)|(range=Range)|(gap=Gap))','
;
//Oracle for upper limit --> Below reference signal
Upper:
	'below' 'than' (bound_upp=Bound_up)
;
//Oracle for lower limit --> Above reference signal
Lower:
	'above' 'than' (bound_lower=Bound_Down)
;
//Oracle for Above and Below limit --> In range reference signal
Range:
	'in' 'range' 'between' (bound_lower=Bound_Down) 'and' (bound_upp=Bound_up)
;
//Oracle for !Above and !Below limit --> Gap reference signal
Gap:
	'not' 'in' 'range' 'between' (bound_lower=Bound_Down) 'and' (bound_upp=Bound_up)
;

//If the limits must be included ==
InclusiveBound:
	'inclusiveBound' name=ID '=' value= BOOLEAN
;
//Upper limit

Bound_up:
	value=DOUBLE
;
//Lower limit
Bound_Down:
	 value=DOUBLE
;
//Boolean declaration
BOOLEAN:
	bool=b	
;
b returns ecore::EBoolean: 'true' | 'false';
//Double declaration
DOUBLE:
	dVal = d
;
d returns ecore::EDouble : ('-')? INT('.'INT)?;


//DataType declaration
DataType:
	'datatype' name=ID
;
//Package declaration
PackageDeclaration:
	'package' name=QualifiedName '{'
		(elements+=AbstractElement)*
	'}'	
;
