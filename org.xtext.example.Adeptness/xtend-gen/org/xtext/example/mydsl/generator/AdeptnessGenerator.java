/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.adeptness.Checks;
import org.xtext.example.mydsl.adeptness.DOUBLE;
import org.xtext.example.mydsl.adeptness.Gap;
import org.xtext.example.mydsl.adeptness.Lower;
import org.xtext.example.mydsl.adeptness.Oracle;
import org.xtext.example.mydsl.adeptness.Range;
import org.xtext.example.mydsl.adeptness.Signal;
import org.xtext.example.mydsl.adeptness.Upper;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AdeptnessGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Signal> _filter = Iterables.<Signal>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Signal.class);
    for (final Signal e : _filter) {
    }
  }
  
  /**
   * def createXML(Iterable<Signal> signals)'''
   * <?xml version='1.0' encoding="UTF-8"?>
   * «FOR s : signals»
   * <Signal>
   * <SignalDescription name="«s.fullyQualifiedName.toString("/")»">
   * <TypeSignalDescription name="Static">
   * «FOR c: s.check_gap»
   * <Type name="«c.name.toString»">
   * <Parameters>
   * <«c.inclusive_bound.eClass.name.toString()»>«c.inclusive_bound.value.bool»</«c.inclusive_bound.eClass.name.toString()»>
   * <«c.bound_up.eClass.name.toString()»>«c.bound_up.value.DVal»</«c.bound_up.eClass.name.toString()»>
   * <«c.bound_low.eClass.name.toString()»>«c.bound_low.value.DVal»</«c.bound_low.eClass.name.toString()»>
   * </Parameters>
   * </Type>
   * «ENDFOR»
   * </TypeSignalDescription>
   * <TypeSignalDescription name="Static_Low">
   * «FOR l: s.check_static_lower»
   * <Type name="«l.name.toString»">
   * <Parameters>
   * <«l.inclusive_bound.eClass.name.toString()»>«l.inclusive_bound.value.bool»</«l.inclusive_bound.eClass.name.toString()»>
   * <«l.bound_low.eClass.name.toString()»>«l.bound_low.value.DVal»</«l.bound_low.eClass.name.toString()»>
   * </Parameters>
   * </Type>
   * «ENDFOR»
   * </TypeSignalDescription>
   * <TypeSignalDescription name="Static_Up">
   * «FOR u: s.check_static_upper»
   * <Type name="«u.name.toString»">
   * <Parameters>
   * <«u.inclusive_bound.eClass.name.toString()»>«u.inclusive_bound.value.bool»</«u.inclusive_bound.eClass.name.toString()»>
   * <«u.bound_up.eClass.name.toString()»>«u.bound_up.value.DVal»</«u.bound_up.eClass.name.toString()»>
   * </Parameters>
   * </Type>
   * «ENDFOR»
   * </TypeSignalDescription>
   * <TypeSignalDescription name="Dynamic">
   * «FOR d: s.check_range»
   * <Type name="«d.name.toString»">
   * <Parameters>
   * <«d.inclusive_bound.eClass.name.toString()»>«d.inclusive_bound.value.bool»</«d.inclusive_bound.eClass.name.toString()»>
   * <«d.bound_up.eClass.name.toString()»>«d.bound_up.value.DVal»</«d.bound_up.eClass.name.toString()»>
   * <«d.bound_low.eClass.name.toString()»>«d.bound_low.value.DVal»</«d.bound_low.eClass.name.toString()»>
   * </Parameters>
   * </Type>
   * «ENDFOR»
   * </TypeSignalDescription>
   * </SignalDescription>
   * </Signal>
   * «ENDFOR»
   * '''
   */
  public CharSequence create_oracle_m(final Oracle param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("def= legacy_code(\'initialize\');");
    _builder.newLine();
    _builder.append("def.OutputFcnSpec= \'double y1=");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append("(double u1)\';");
    _builder.newLineIfNotEmpty();
    _builder.append("def.SourceFiles= {\'");
    String _string_1 = param.getName().toString();
    _builder.append(_string_1);
    _builder.append(".c\'};");
    _builder.newLineIfNotEmpty();
    _builder.append("def.HeaderFiles= {\'");
    String _string_2 = param.getName().toString();
    _builder.append(_string_2);
    _builder.append(".h\'};");
    _builder.newLineIfNotEmpty();
    _builder.append("def.SFunctionName= \'S_");
    String _string_3 = param.getName().toString();
    _builder.append(_string_3);
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("legacy_code(\'sfcn_cmex_generate\' ,def)");
    _builder.newLine();
    _builder.append("legacy_code(\'compile\' ,def)");
    _builder.newLine();
    _builder.append("exit");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_oracle_h(final Oracle param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#ifndef ");
    String _upperCase = param.getName().toString().toUpperCase();
    _builder.append(_upperCase);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.append("#define ");
    String _upperCase_1 = param.getName().toString().toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    {
      EList<Checks> _check = param.getCheck();
      for(final Checks param1 : _check) {
        {
          Upper _upper = param1.getReference().getUpper();
          boolean _tripleNotEquals = (_upper != null);
          if (_tripleNotEquals) {
            _builder.append("struct Ret{");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("int assert;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("double diff;");
            _builder.newLine();
            _builder.append("};");
            _builder.newLine();
            _builder.append("struct Ret BelowReference (double ");
            String _string = param1.getName().toString();
            _builder.append(_string);
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          } else {
            Lower _lower = param1.getReference().getLower();
            boolean _tripleNotEquals_1 = (_lower != null);
            if (_tripleNotEquals_1) {
              _builder.append("struct Ret{");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("int assert;");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("double diff;");
              _builder.newLine();
              _builder.append("};");
              _builder.newLine();
              _builder.append("struct Ret AboveRefrence (double ");
              String _string_1 = param1.getName().toString();
              _builder.append(_string_1);
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              Range _range = param1.getReference().getRange();
              boolean _tripleNotEquals_2 = (_range != null);
              if (_tripleNotEquals_2) {
                _builder.append("struct Ret{");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("int assert;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("double diff_up;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("double diff_down;");
                _builder.newLine();
                _builder.append("};");
                _builder.newLine();
                _builder.append("struct Ret RangeReference (double ");
                String _string_2 = param1.getName().toString();
                _builder.append(_string_2);
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              } else {
                Gap _gap = param1.getReference().getGap();
                boolean _tripleNotEquals_3 = (_gap != null);
                if (_tripleNotEquals_3) {
                  _builder.append("struct Ret{");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("int assert;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("double diff_up;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("double diff_down;");
                  _builder.newLine();
                  _builder.append("};");
                  _builder.newLine();
                  _builder.append("struct Ret GapReference (double ");
                  String _string_3 = param1.getName().toString();
                  _builder.append(_string_3);
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_oracle_c(final Oracle param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include \"");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append(".h\"");
    _builder.newLineIfNotEmpty();
    {
      EList<Checks> _check = param.getCheck();
      for(final Checks param1 : _check) {
        _builder.append("//Comment: ");
        String _string_1 = param1.getDescription().getValue().toString();
        _builder.append(_string_1);
        _builder.newLineIfNotEmpty();
        {
          Upper _upper = param1.getReference().getUpper();
          boolean _tripleNotEquals = (_upper != null);
          if (_tripleNotEquals) {
            _builder.append("struct Ret BelowReference (double ");
            String _string_2 = param1.getName().toString();
            _builder.append(_string_2);
            _builder.append("){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("struct Ret ret;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("ret.assert=0;");
            _builder.newLine();
            {
              DOUBLE _value = param1.getReference().getUpper().getBound_upp().getValue();
              boolean _tripleNotEquals_1 = (_value != null);
              if (_tripleNotEquals_1) {
                _builder.append("\t");
                _builder.append("if(");
                String _string_3 = param1.getName().toString();
                _builder.append(_string_3, "\t");
                _builder.append("<=");
                double _dVal = param1.getReference().getUpper().getBound_upp().getValue().getDVal();
                _builder.append(_dVal, "\t");
                _builder.append("){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("ret.assertret=1;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("ret.diff=");
                double _dVal_1 = param1.getReference().getUpper().getBound_upp().getValue().getDVal();
                _builder.append(_dVal_1, "\t");
                _builder.append("-");
                String _string_4 = param1.getName().toString();
                _builder.append(_string_4, "\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t");
                _builder.append("if(");
                String _string_5 = param1.getName().toString();
                _builder.append(_string_5, "\t");
                _builder.append("<=");
                String _string_6 = param1.getReference().getUpper().getBound_upp().getName().toString();
                _builder.append(_string_6, "\t");
                _builder.append("){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("ret.assertret=1;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("ret.diff=");
                String _string_7 = param1.getReference().getUpper().getBound_upp().getName().toString();
                _builder.append(_string_7, "\t");
                _builder.append("-");
                String _string_8 = param1.getName().toString();
                _builder.append(_string_8, "\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            Lower _lower = param1.getReference().getLower();
            boolean _tripleNotEquals_2 = (_lower != null);
            if (_tripleNotEquals_2) {
              _builder.append("struct Ret AboveReference (double ");
              String _string_9 = param1.getName().toString();
              _builder.append(_string_9);
              _builder.append("){");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("struct Ret ret;");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("ret.assert=0;");
              _builder.newLine();
              {
                DOUBLE _value_1 = param1.getReference().getLower().getBound_lower().getValue();
                boolean _tripleNotEquals_3 = (_value_1 != null);
                if (_tripleNotEquals_3) {
                  _builder.append("\t");
                  _builder.append("if(");
                  String _string_10 = param1.getName().toString();
                  _builder.append(_string_10, "\t");
                  _builder.append(">=");
                  double _dVal_2 = param1.getReference().getLower().getBound_lower().getValue().getDVal();
                  _builder.append(_dVal_2, "\t");
                  _builder.append("){");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t");
                  _builder.append("ret.assert=1;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("ret.diff=");
                  String _string_11 = param1.getName().toString();
                  _builder.append(_string_11, "\t");
                  _builder.append("-");
                  double _dVal_3 = param1.getReference().getLower().getBound_lower().getValue().getDVal();
                  _builder.append(_dVal_3, "\t");
                  _builder.append(";");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("\t");
                  _builder.append("if(");
                  String _string_12 = param1.getName().toString();
                  _builder.append(_string_12, "\t");
                  _builder.append(">=");
                  String _string_13 = param1.getReference().getLower().getBound_lower().getName().toString();
                  _builder.append(_string_13, "\t");
                  _builder.append("){");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t");
                  _builder.append("ret.assert=1;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("ret.diff=");
                  String _string_14 = param1.getName().toString();
                  _builder.append(_string_14, "\t");
                  _builder.append("-");
                  String _string_15 = param1.getReference().getLower().getBound_lower().getName().toString();
                  _builder.append(_string_15, "\t");
                  _builder.append(";");
                  _builder.newLineIfNotEmpty();
                }
              }
            } else {
              Range _range = param1.getReference().getRange();
              boolean _tripleNotEquals_4 = (_range != null);
              if (_tripleNotEquals_4) {
                _builder.append("struct Ret RangeReference (double ");
                String _string_16 = param1.getName().toString();
                _builder.append(_string_16);
                _builder.append("){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("struct Ret ret;");
                _builder.newLine();
                _builder.append("\t");
                _builder.newLine();
                {
                  if (((param1.getReference().getRange().getBound_lower().getValue() != null) && (param1.getReference().getRange().getBound_upp().getValue() != null))) {
                    _builder.append("\t");
                    _builder.append("if(");
                    String _string_17 = param1.getName().toString();
                    _builder.append(_string_17, "\t");
                    _builder.append(">=");
                    double _dVal_4 = param1.getReference().getRange().getBound_lower().getValue().getDVal();
                    _builder.append(_dVal_4, "\t");
                    _builder.append(" && ");
                    String _string_18 = param1.getName().toString();
                    _builder.append(_string_18, "\t");
                    _builder.append("<=");
                    double _dVal_5 = param1.getReference().getRange().getBound_upp().getValue().getDVal();
                    _builder.append(_dVal_5, "\t");
                    _builder.append("){");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("ret.assert=1;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("ret.diff_up=");
                    double _dVal_6 = param1.getReference().getRange().getBound_upp().getValue().getDVal();
                    _builder.append(_dVal_6, "\t");
                    _builder.append("-");
                    String _string_19 = param1.getName().toString();
                    _builder.append(_string_19, "\t");
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("ret.diff_down=");
                    String _string_20 = param1.getName().toString();
                    _builder.append(_string_20, "\t");
                    _builder.append("-");
                    double _dVal_7 = param1.getReference().getRange().getBound_lower().getValue().getDVal();
                    _builder.append(_dVal_7, "\t");
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                  } else {
                    if (((param1.getReference().getRange().getBound_lower().getValue() == null) && (param1.getReference().getRange().getBound_upp().getValue() != null))) {
                      _builder.append("\t");
                      _builder.append("if(");
                      String _string_21 = param1.getName().toString();
                      _builder.append(_string_21, "\t");
                      _builder.append(">=");
                      String _string_22 = param1.getReference().getRange().getBound_lower().getName().toString();
                      _builder.append(_string_22, "\t");
                      _builder.append(" && ");
                      String _string_23 = param1.getName().toString();
                      _builder.append(_string_23, "\t");
                      _builder.append("<=");
                      double _dVal_8 = param1.getReference().getRange().getBound_upp().getValue().getDVal();
                      _builder.append(_dVal_8, "\t");
                      _builder.append("){");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("ret.assert=1;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("ret.diff_up=");
                      double _dVal_9 = param1.getReference().getRange().getBound_upp().getValue().getDVal();
                      _builder.append(_dVal_9, "\t");
                      _builder.append("-");
                      String _string_24 = param1.getName().toString();
                      _builder.append(_string_24, "\t");
                      _builder.append(";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("ret.diff_down=");
                      String _string_25 = param1.getName().toString();
                      _builder.append(_string_25, "\t");
                      _builder.append("-");
                      String _string_26 = param1.getReference().getRange().getBound_lower().getName().toString();
                      _builder.append(_string_26, "\t");
                      _builder.append(";");
                      _builder.newLineIfNotEmpty();
                    } else {
                      if (((param1.getReference().getRange().getBound_lower().getValue() != null) && (param1.getReference().getRange().getBound_upp().getValue() == null))) {
                        _builder.append("\t");
                        _builder.append("if(");
                        String _string_27 = param1.getName().toString();
                        _builder.append(_string_27, "\t");
                        _builder.append(">=");
                        double _dVal_10 = param1.getReference().getRange().getBound_lower().getValue().getDVal();
                        _builder.append(_dVal_10, "\t");
                        _builder.append(" && ");
                        String _string_28 = param1.getName().toString();
                        _builder.append(_string_28, "\t");
                        _builder.append("<=");
                        String _string_29 = param1.getReference().getRange().getBound_upp().getName().toString();
                        _builder.append(_string_29, "\t");
                        _builder.append("){");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("ret.assert=1;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("ret.diff_up=");
                        String _string_30 = param1.getReference().getRange().getBound_upp().getName().toString();
                        _builder.append(_string_30, "\t");
                        _builder.append("-");
                        String _string_31 = param1.getName().toString();
                        _builder.append(_string_31, "\t");
                        _builder.append(";");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("ret.diff_down=");
                        String _string_32 = param1.getName().toString();
                        _builder.append(_string_32, "\t");
                        _builder.append("-");
                        double _dVal_11 = param1.getReference().getRange().getBound_lower().getValue().getDVal();
                        _builder.append(_dVal_11, "\t");
                        _builder.append(";");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t");
                        _builder.append("if(");
                        String _string_33 = param1.getName().toString();
                        _builder.append(_string_33, "\t");
                        _builder.append(">=");
                        String _string_34 = param1.getReference().getRange().getBound_lower().getName().toString();
                        _builder.append(_string_34, "\t");
                        _builder.append(" && ");
                        String _string_35 = param1.getName().toString();
                        _builder.append(_string_35, "\t");
                        _builder.append("<=");
                        String _string_36 = param1.getReference().getRange().getBound_upp().getName().toString();
                        _builder.append(_string_36, "\t");
                        _builder.append("){");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("ret.assert=1;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("ret.diff_up=");
                        String _string_37 = param1.getReference().getRange().getBound_upp().getName().toString();
                        _builder.append(_string_37, "\t");
                        _builder.append("-");
                        String _string_38 = param1.getName().toString();
                        _builder.append(_string_38, "\t");
                        _builder.append(";");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("ret.diff_down=");
                        String _string_39 = param1.getName().toString();
                        _builder.append(_string_39, "\t");
                        _builder.append("-");
                        String _string_40 = param1.getReference().getRange().getBound_lower().getName().toString();
                        _builder.append(_string_40, "\t");
                        _builder.append(";");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              } else {
                Gap _gap = param1.getReference().getGap();
                boolean _tripleNotEquals_5 = (_gap != null);
                if (_tripleNotEquals_5) {
                  _builder.append("struct Ret GapReference (double ");
                  String _string_41 = param1.getName().toString();
                  _builder.append(_string_41);
                  _builder.append("){");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("struct Ret ret;");
                  _builder.newLine();
                  {
                    if (((param1.getReference().getGap().getBound_lower().getValue() != null) && (param1.getReference().getGap().getBound_upp().getValue() != null))) {
                      _builder.append("\t");
                      _builder.append("if(");
                      String _string_42 = param1.getName().toString();
                      _builder.append(_string_42, "\t");
                      _builder.append("<=");
                      double _dVal_12 = param1.getReference().getGap().getBound_lower().getValue().getDVal();
                      _builder.append(_dVal_12, "\t");
                      _builder.append(" || ");
                      String _string_43 = param1.getName().toString();
                      _builder.append(_string_43, "\t");
                      _builder.append(">=");
                      double _dVal_13 = param1.getReference().getGap().getBound_upp().getValue().getDVal();
                      _builder.append(_dVal_13, "\t");
                      _builder.append("){");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("ret.assert=1;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("ret.diff_up=");
                      String _string_44 = param1.getName().toString();
                      _builder.append(_string_44, "\t");
                      _builder.append("-");
                      double _dVal_14 = param1.getReference().getGap().getBound_upp().getValue().getDVal();
                      _builder.append(_dVal_14, "\t");
                      _builder.append(";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("ret.diff_down=");
                      double _dVal_15 = param1.getReference().getGap().getBound_lower().getValue().getDVal();
                      _builder.append(_dVal_15, "\t");
                      _builder.append("-");
                      String _string_45 = param1.getName().toString();
                      _builder.append(_string_45, "\t");
                      _builder.append(";");
                      _builder.newLineIfNotEmpty();
                    } else {
                      if (((param1.getReference().getGap().getBound_lower().getValue() == null) && (param1.getReference().getGap().getBound_upp().getValue() != null))) {
                        _builder.append("\t");
                        _builder.append("if(");
                        String _string_46 = param1.getName().toString();
                        _builder.append(_string_46, "\t");
                        _builder.append("<=");
                        String _string_47 = param1.getReference().getGap().getBound_lower().getName().toString();
                        _builder.append(_string_47, "\t");
                        _builder.append(" || ");
                        String _string_48 = param1.getName().toString();
                        _builder.append(_string_48, "\t");
                        _builder.append(">=");
                        double _dVal_16 = param1.getReference().getGap().getBound_upp().getValue().getDVal();
                        _builder.append(_dVal_16, "\t");
                        _builder.append("){");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("ret.assert=1;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("ret.diff_up=");
                        String _string_49 = param1.getName().toString();
                        _builder.append(_string_49, "\t");
                        _builder.append("-");
                        double _dVal_17 = param1.getReference().getGap().getBound_upp().getValue().getDVal();
                        _builder.append(_dVal_17, "\t");
                        _builder.append(";");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("ret.diff_down=");
                        String _string_50 = param1.getReference().getGap().getBound_lower().getName().toString();
                        _builder.append(_string_50, "\t");
                        _builder.append("-");
                        String _string_51 = param1.getName().toString();
                        _builder.append(_string_51, "\t");
                        _builder.append(";");
                        _builder.newLineIfNotEmpty();
                      } else {
                        if (((param1.getReference().getGap().getBound_lower().getValue() != null) && (param1.getReference().getGap().getBound_upp().getValue() == null))) {
                          _builder.append("\t");
                          _builder.append("if(");
                          String _string_52 = param1.getName().toString();
                          _builder.append(_string_52, "\t");
                          _builder.append("<=");
                          double _dVal_18 = param1.getReference().getGap().getBound_lower().getValue().getDVal();
                          _builder.append(_dVal_18, "\t");
                          _builder.append(" || ");
                          String _string_53 = param1.getName().toString();
                          _builder.append(_string_53, "\t");
                          _builder.append(">=");
                          String _string_54 = param1.getReference().getGap().getBound_upp().getName().toString();
                          _builder.append(_string_54, "\t");
                          _builder.append("){");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("ret.assert=1;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("}");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("ret.diff_up=");
                          String _string_55 = param1.getName().toString();
                          _builder.append(_string_55, "\t");
                          _builder.append("-");
                          String _string_56 = param1.getReference().getGap().getBound_upp().getName().toString();
                          _builder.append(_string_56, "\t");
                          _builder.append(";");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("ret.diff_down=");
                          double _dVal_19 = param1.getReference().getGap().getBound_lower().getValue().getDVal();
                          _builder.append(_dVal_19, "\t");
                          _builder.append("-");
                          String _string_57 = param1.getName().toString();
                          _builder.append(_string_57, "\t");
                          _builder.append(";");
                          _builder.newLineIfNotEmpty();
                        } else {
                          _builder.append("\t");
                          _builder.append("if(");
                          String _string_58 = param1.getName().toString();
                          _builder.append(_string_58, "\t");
                          _builder.append("<=");
                          String _string_59 = param1.getReference().getGap().getBound_lower().getName().toString();
                          _builder.append(_string_59, "\t");
                          _builder.append(" || ");
                          String _string_60 = param1.getName().toString();
                          _builder.append(_string_60, "\t");
                          _builder.append(">=");
                          String _string_61 = param1.getReference().getGap().getBound_upp().getName().toString();
                          _builder.append(_string_61, "\t");
                          _builder.append("){");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("ret.assert=1;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("}");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("ret.diff_up=");
                          String _string_62 = param1.getName().toString();
                          _builder.append(_string_62, "\t");
                          _builder.append("-");
                          String _string_63 = param1.getReference().getGap().getBound_upp().getName().toString();
                          _builder.append(_string_63, "\t");
                          _builder.append(";");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("ret.diff_down=");
                          String _string_64 = param1.getReference().getGap().getBound_lower().getName().toString();
                          _builder.append(_string_64, "\t");
                          _builder.append("-");
                          String _string_65 = param1.getName().toString();
                          _builder.append(_string_65, "\t");
                          _builder.append(";");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("return ret;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
