/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.adeptness.AbstractElement2;
import org.xtext.example.mydsl.adeptness.AfterWhen;
import org.xtext.example.mydsl.adeptness.At_least;
import org.xtext.example.mydsl.adeptness.At_most;
import org.xtext.example.mydsl.adeptness.CompOp;
import org.xtext.example.mydsl.adeptness.ConstDeg;
import org.xtext.example.mydsl.adeptness.DOUBLE;
import org.xtext.example.mydsl.adeptness.During;
import org.xtext.example.mydsl.adeptness.Exactly;
import org.xtext.example.mydsl.adeptness.FailReason;
import org.xtext.example.mydsl.adeptness.Gap;
import org.xtext.example.mydsl.adeptness.HighPeak;
import org.xtext.example.mydsl.adeptness.HighTime;
import org.xtext.example.mydsl.adeptness.LogicOp;
import org.xtext.example.mydsl.adeptness.Lower;
import org.xtext.example.mydsl.adeptness.NotSame;
import org.xtext.example.mydsl.adeptness.Op;
import org.xtext.example.mydsl.adeptness.Operators;
import org.xtext.example.mydsl.adeptness.Oracle;
import org.xtext.example.mydsl.adeptness.Range;
import org.xtext.example.mydsl.adeptness.Same;
import org.xtext.example.mydsl.adeptness.Signal;
import org.xtext.example.mydsl.adeptness.Upper;
import org.xtext.example.mydsl.adeptness.Wait;
import org.xtext.example.mydsl.adeptness.When;
import org.xtext.example.mydsl.adeptness.While;
import org.xtext.example.mydsl.adeptness.XPeaks;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AdeptnessGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Signal> _filter = Iterables.<Signal>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Signal.class);
    for (final Signal e : _filter) {
      {
        EList<Oracle> _oracle = e.getOracle();
        for (final Oracle q : _oracle) {
          {
            String _string = this._iQualifiedNameProvider.getFullyQualifiedName(q).toString("/");
            String _plus = (_string + ".c");
            fsa.generateFile(_plus, this.create_oracle_c(q));
            String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(q).toString("/");
            String _plus_1 = (_string_1 + ".h");
            fsa.generateFile(_plus_1, this.create_oracle_h(q));
          }
        }
        String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/");
        String _plus = (_string + ".json");
        fsa.generateFile(_plus, this.create_oracle_json(e));
      }
    }
  }
  
  /**
   * def create_oracle_m(Oracle param)'''
   * 
   * def= legacy_code('initialize');
   * def.OutputFcnSpec= 'double y1=«param.name.toString()»(double u1)';
   * def.SourceFiles= {'«param.name.toString()».c'};
   * def.HeaderFiles= {'«param.name.toString()».h'};
   * def.SFunctionName= 'S_«param.name.toString()»';
   * legacy_code('sfcn_cmex_generate' ,def)
   * legacy_code('compile' ,def)
   * exit
   * '''
   */
  public CharSequence create_oracle_json(final Signal CPS) {
    StringConcatenation _builder = new StringConcatenation();
    int cont = 0;
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"Name\":\"");
    String _name = CPS.getName();
    _builder.append(_name, "\t");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    {
      EList<Oracle> _oracle = CPS.getOracle();
      for(final Oracle param : _oracle) {
        _builder.append("\t");
        _builder.append("\"");
        String _name_1 = param.getName();
        _builder.append(_name_1, "\t");
        _builder.append("\":{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\"cfileDirectory\":\"");
        String _string = this._iQualifiedNameProvider.getFullyQualifiedName(param).toString("/");
        String _plus = (_string + ".c");
        _builder.append(_plus, "\t\t");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\"hfileDirectory\":\"");
        String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(param).toString("/");
        String _plus_1 = (_string_1 + ".h");
        _builder.append(_plus_1, "\t\t");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        {
          if (((param.getWhen() != null) && (param.getWhile() != null))) {
            {
              String _name_2 = param.getCheck().getName();
              boolean _tripleNotEquals = (_name_2 != null);
              if (_tripleNotEquals) {
                _builder.append("\t\t");
                _builder.append("\"Inputs\":[");
                {
                  boolean _equals = param.getCheck().getName().equals("timeStamp");
                  boolean _not = (!_equals);
                  if (_not) {
                    _builder.append("\"");
                    String _name_3 = param.getCheck().getName();
                    _builder.append(_name_3);
                    _builder.append("\",");
                  }
                }
                {
                  EList<AbstractElement2> _elements = param.getWhen().getEm().getElements();
                  for(final AbstractElement2 par1 : _elements) {
                    {
                      if (((par1.getName() != null) && (!par1.getName().equals("timeStamp")))) {
                        _builder.append("\"");
                        String _name_4 = par1.getName();
                        _builder.append(_name_4);
                        _builder.append("\", ");
                      }
                    }
                  }
                }
                {
                  EList<AbstractElement2> _elements_1 = param.getWhile().getEm().getElements();
                  for(final AbstractElement2 par2 : _elements_1) {
                    {
                      if (((par2.getName() != null) && (!par2.getName().equals("timeStamp")))) {
                        _builder.append("\"");
                        String _name_5 = par2.getName();
                        _builder.append(_name_5);
                        _builder.append("\", ");
                      }
                    }
                  }
                }
                _builder.append("\"timeStamp\"],");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t\t");
                _builder.append("\"Inputs\":[");
                {
                  EList<AbstractElement2> _elements_2 = param.getCheck().getEm().getElements();
                  for(final AbstractElement2 par3 : _elements_2) {
                    {
                      if (((par3.getName() != null) && (!par3.getName().equals("timeStamp")))) {
                        _builder.append("\"");
                        String _name_6 = par3.getName();
                        _builder.append(_name_6);
                        _builder.append("\", ");
                      }
                    }
                  }
                }
                {
                  EList<AbstractElement2> _elements_3 = param.getWhen().getEm().getElements();
                  for(final AbstractElement2 par1_1 : _elements_3) {
                    {
                      if (((par1_1.getName() != null) && (!par1_1.getName().equals("timeStamp")))) {
                        _builder.append("\"");
                        String _name_7 = par1_1.getName();
                        _builder.append(_name_7);
                        _builder.append("\", ");
                      }
                    }
                  }
                }
                {
                  EList<AbstractElement2> _elements_4 = param.getWhile().getEm().getElements();
                  for(final AbstractElement2 par2_1 : _elements_4) {
                    {
                      if (((par2_1.getName() != null) && (!par2_1.getName().equals("timeStamp")))) {
                        _builder.append("\"");
                        String _name_8 = par2_1.getName();
                        _builder.append(_name_8);
                        _builder.append("\", ");
                      }
                    }
                  }
                }
                _builder.append("\"timeStamp\"],");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            if (((param.getWhen() == null) && (param.getWhile() != null))) {
              {
                String _name_9 = param.getCheck().getName();
                boolean _tripleNotEquals_1 = (_name_9 != null);
                if (_tripleNotEquals_1) {
                  _builder.append("\t\t");
                  _builder.append("\"Inputs\":[");
                  {
                    boolean _equals_1 = param.getCheck().getName().equals("timeStamp");
                    boolean _not_1 = (!_equals_1);
                    if (_not_1) {
                      _builder.append("\"");
                      String _name_10 = param.getCheck().getName();
                      _builder.append(_name_10);
                      _builder.append("\",");
                    }
                  }
                  {
                    EList<AbstractElement2> _elements_5 = param.getWhile().getEm().getElements();
                    for(final AbstractElement2 par2_2 : _elements_5) {
                      {
                        if (((par2_2.getName() != null) && (!par2_2.getName().equals("timeStamp")))) {
                          _builder.append("\"");
                          String _name_11 = par2_2.getName();
                          _builder.append(_name_11);
                          _builder.append("\", ");
                        }
                      }
                    }
                  }
                  _builder.append("\"timeStamp\"],");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("\t\t");
                  _builder.append("\"Inputs\":[");
                  {
                    EList<AbstractElement2> _elements_6 = param.getCheck().getEm().getElements();
                    for(final AbstractElement2 par3_1 : _elements_6) {
                      {
                        if (((par3_1.getName() != null) && (!par3_1.getName().equals("timeStamp")))) {
                          _builder.append("\"");
                          String _name_12 = par3_1.getName();
                          _builder.append(_name_12);
                          _builder.append("\", ");
                        }
                      }
                    }
                  }
                  {
                    EList<AbstractElement2> _elements_7 = param.getWhile().getEm().getElements();
                    for(final AbstractElement2 par2_3 : _elements_7) {
                      {
                        if (((par2_3.getName() != null) && (!par2_3.getName().equals("timeStamp")))) {
                          _builder.append("\"");
                          String _name_13 = par2_3.getName();
                          _builder.append(_name_13);
                          _builder.append("\", ");
                        }
                      }
                    }
                  }
                  _builder.append("\"timeStamp\"],");
                  _builder.newLineIfNotEmpty();
                }
              }
            } else {
              if (((param.getWhen() != null) && (param.getWhile() == null))) {
                {
                  String _name_14 = param.getCheck().getName();
                  boolean _tripleNotEquals_2 = (_name_14 != null);
                  if (_tripleNotEquals_2) {
                    _builder.append("\t\t");
                    _builder.append("\"Inputs\":[");
                    {
                      boolean _equals_2 = param.getCheck().getName().equals("timeStamp");
                      boolean _not_2 = (!_equals_2);
                      if (_not_2) {
                        _builder.append("\"");
                        String _name_15 = param.getCheck().getName();
                        _builder.append(_name_15);
                        _builder.append("\",");
                      }
                    }
                    {
                      EList<AbstractElement2> _elements_8 = param.getWhen().getEm().getElements();
                      for(final AbstractElement2 par1_2 : _elements_8) {
                        {
                          if (((par1_2.getName() != null) && (!par1_2.getName().equals("timeStamp")))) {
                            _builder.append("\"");
                            String _name_16 = par1_2.getName();
                            _builder.append(_name_16);
                            _builder.append("\", ");
                          }
                        }
                      }
                    }
                    _builder.append("\"timeStamp\"],");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("\t\t");
                    _builder.append("\"Inputs\":[");
                    {
                      EList<AbstractElement2> _elements_9 = param.getCheck().getEm().getElements();
                      for(final AbstractElement2 par3_2 : _elements_9) {
                        {
                          if (((par3_2.getName() != null) && (!par3_2.getName().equals("timeStamp")))) {
                            _builder.append("\"");
                            String _name_17 = par3_2.getName();
                            _builder.append(_name_17);
                            _builder.append("\", ");
                          }
                        }
                      }
                    }
                    {
                      EList<AbstractElement2> _elements_10 = param.getWhen().getEm().getElements();
                      for(final AbstractElement2 par1_3 : _elements_10) {
                        {
                          if (((par1_3.getName() != null) && (!par1_3.getName().equals("timeStamp")))) {
                            _builder.append("\"");
                            String _name_18 = par1_3.getName();
                            _builder.append(_name_18);
                            _builder.append("\", ");
                          }
                        }
                      }
                    }
                    _builder.append("\"timeStamp\"],");
                    _builder.newLineIfNotEmpty();
                  }
                }
              } else {
                {
                  String _name_19 = param.getCheck().getName();
                  boolean _tripleNotEquals_3 = (_name_19 != null);
                  if (_tripleNotEquals_3) {
                    _builder.append("\t\t");
                    _builder.append("\"Inputs\":[");
                    {
                      boolean _equals_3 = param.getCheck().getName().equals("timeStamp");
                      boolean _not_3 = (!_equals_3);
                      if (_not_3) {
                        _builder.append("\"");
                        String _name_20 = param.getCheck().getName();
                        _builder.append(_name_20);
                        _builder.append("\",");
                      }
                    }
                    _builder.append(" \"timeStamp\"],");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("\t\t");
                    _builder.append("\"Inputs\":[");
                    {
                      EList<AbstractElement2> _elements_11 = param.getCheck().getEm().getElements();
                      for(final AbstractElement2 par3_3 : _elements_11) {
                        {
                          if (((par3_3.getName() != null) && (!par3_3.getName().equals("timeStamp")))) {
                            _builder.append("\"");
                            String _name_21 = par3_3.getName();
                            _builder.append(_name_21);
                            _builder.append("\", ");
                          }
                        }
                      }
                    }
                    _builder.append("\"timeStamp\"],");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("\t", "\t");
        _builder.append("\"While\":\"");
        {
          While _while = param.getWhile();
          boolean _tripleNotEquals_4 = (_while != null);
          if (_tripleNotEquals_4) {
            {
              EList<AbstractElement2> _elements_12 = param.getWhile().getEm().getElements();
              for(final AbstractElement2 param1 : _elements_12) {
                {
                  EList<String> _frontParentheses = param1.getFrontParentheses();
                  for(final String parent : _frontParentheses) {
                    _builder.append("( ");
                  }
                }
                {
                  String _name_22 = param1.getName();
                  boolean _tripleNotEquals_5 = (_name_22 != null);
                  if (_tripleNotEquals_5) {
                    String _name_23 = param1.getName();
                    _builder.append(_name_23, "\t");
                  } else {
                    double _dVal = param1.getValue().getDVal();
                    _builder.append(_dVal, "\t");
                  }
                }
                _builder.append(" ");
                {
                  EList<Operators> _op = param1.getOp();
                  for(final Operators parent_1 : _op) {
                    {
                      String _backParentheses = parent_1.getBackParentheses();
                      boolean _tripleNotEquals_6 = (_backParentheses != null);
                      if (_tripleNotEquals_6) {
                        _builder.append(") ");
                      } else {
                        CompOp _comparation = parent_1.getComparation();
                        boolean _tripleNotEquals_7 = (_comparation != null);
                        if (_tripleNotEquals_7) {
                          String _op_1 = parent_1.getComparation().getOp();
                          _builder.append(_op_1, "\t");
                          _builder.append(" ");
                        } else {
                          LogicOp _logicOperator = parent_1.getLogicOperator();
                          boolean _tripleNotEquals_8 = (_logicOperator != null);
                          if (_tripleNotEquals_8) {
                            String _op_2 = parent_1.getLogicOperator().getOp();
                            _builder.append(_op_2, "\t");
                            _builder.append(" ");
                          } else {
                            Op _operator = parent_1.getOperator();
                            boolean _tripleNotEquals_9 = (_operator != null);
                            if (_tripleNotEquals_9) {
                              String _op_3 = parent_1.getOperator().getOp();
                              _builder.append(_op_3, "\t");
                              _builder.append(" ");
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append(" ");
              }
            }
            _builder.append("\",");
          } else {
            _builder.append("null\",");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t", "\t");
        _builder.append("\"When\":{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t", "\t\t");
        _builder.append("\"Value\":\"");
        {
          When _when = param.getWhen();
          boolean _tripleNotEquals_10 = (_when != null);
          if (_tripleNotEquals_10) {
            {
              EList<AbstractElement2> _elements_13 = param.getWhen().getEm().getElements();
              for(final AbstractElement2 param1_1 : _elements_13) {
                {
                  EList<String> _frontParentheses_1 = param1_1.getFrontParentheses();
                  for(final String parent_2 : _frontParentheses_1) {
                    _builder.append("( ");
                  }
                }
                {
                  String _name_24 = param1_1.getName();
                  boolean _tripleNotEquals_11 = (_name_24 != null);
                  if (_tripleNotEquals_11) {
                    String _name_25 = param1_1.getName();
                    _builder.append(_name_25, "\t\t");
                  } else {
                    double _dVal_1 = param1_1.getValue().getDVal();
                    _builder.append(_dVal_1, "\t\t");
                  }
                }
                _builder.append(" ");
                {
                  EList<Operators> _op_4 = param1_1.getOp();
                  for(final Operators parent_3 : _op_4) {
                    {
                      String _backParentheses_1 = parent_3.getBackParentheses();
                      boolean _tripleNotEquals_12 = (_backParentheses_1 != null);
                      if (_tripleNotEquals_12) {
                        _builder.append(") ");
                      } else {
                        CompOp _comparation_1 = parent_3.getComparation();
                        boolean _tripleNotEquals_13 = (_comparation_1 != null);
                        if (_tripleNotEquals_13) {
                          String _op_5 = parent_3.getComparation().getOp();
                          _builder.append(_op_5, "\t\t");
                          _builder.append(" ");
                        } else {
                          LogicOp _logicOperator_1 = parent_3.getLogicOperator();
                          boolean _tripleNotEquals_14 = (_logicOperator_1 != null);
                          if (_tripleNotEquals_14) {
                            String _op_6 = parent_3.getLogicOperator().getOp();
                            _builder.append(_op_6, "\t\t");
                            _builder.append(" ");
                          } else {
                            Op _operator_1 = parent_3.getOperator();
                            boolean _tripleNotEquals_15 = (_operator_1 != null);
                            if (_tripleNotEquals_15) {
                              String _op_7 = parent_3.getOperator().getOp();
                              _builder.append(_op_7, "\t\t");
                              _builder.append(" ");
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append(" ");
              }
            }
            _builder.append("\",");
          } else {
            _builder.append("null\",");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t", "\t\t");
        _builder.append("\"AfterWhen\":{");
        _builder.newLineIfNotEmpty();
        {
          When _when_1 = param.getWhen();
          boolean _tripleNotEquals_16 = (_when_1 != null);
          if (_tripleNotEquals_16) {
            {
              AfterWhen _aw = param.getWhen().getAw();
              boolean _tripleNotEquals_17 = (_aw != null);
              if (_tripleNotEquals_17) {
                {
                  During _during = param.getWhen().getAw().getDuring();
                  boolean _tripleNotEquals_18 = (_during != null);
                  if (_tripleNotEquals_18) {
                    _builder.append("\t");
                    _builder.append("\"Type\":\"During\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\"Value\":\"");
                    double _dVal_2 = param.getWhen().getAw().getDuring().getTime().getDVal();
                    _builder.append(_dVal_2);
                    _builder.append("\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\"Unit\":\"");
                    String _time = param.getWhen().getAw().getDuring().getUnit().getTime();
                    _builder.append(_time);
                    _builder.append("\"");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Wait _wait = param.getWhen().getAw().getWait();
                    boolean _tripleNotEquals_19 = (_wait != null);
                    if (_tripleNotEquals_19) {
                      _builder.append("\t");
                      _builder.append("\"Type\":\"Wait\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\"Value\":\"");
                      double _dVal_3 = param.getWhen().getAw().getWait().getTime().getDVal();
                      _builder.append(_dVal_3);
                      _builder.append("\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\"Unit\":\"");
                      String _time_1 = param.getWhen().getAw().getWait().getUnit().getTime();
                      _builder.append(_time_1);
                      _builder.append("\"");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              } else {
                _builder.append("\t\t");
                _builder.append("\t", "\t\t");
                _builder.append("\"Type\":\"null\",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t", "\t\t");
                _builder.append("\"Value\":\"null\",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t", "\t\t");
                _builder.append("\"Unit\":\"null\"");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            _builder.append("\t\t");
            _builder.append("\t", "\t\t");
            _builder.append("\"Type\":\"null\",");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t", "\t\t");
            _builder.append("\"Value\":\"null\",");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t", "\t\t");
            _builder.append("\"Unit\":\"null\"");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("\t\t", "\t\t");
        _builder.append("}");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t", "\t");
        _builder.append("},");
        _builder.newLineIfNotEmpty();
        {
          String _name_26 = param.getCheck().getName();
          boolean _tripleNotEquals_20 = (_name_26 != null);
          if (_tripleNotEquals_20) {
            _builder.append("\t\t");
            _builder.append("\"Check\":\"");
            String _name_27 = param.getCheck().getName();
            _builder.append(_name_27);
            _builder.append(" \",");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t\t");
            _builder.append("\"Check\":\" ");
            {
              EList<AbstractElement2> _elements_14 = param.getCheck().getEm().getElements();
              for(final AbstractElement2 param1_2 : _elements_14) {
                {
                  EList<String> _frontParentheses_2 = param1_2.getFrontParentheses();
                  for(final String parent_4 : _frontParentheses_2) {
                    _builder.append("( ");
                  }
                }
                {
                  String _name_28 = param1_2.getName();
                  boolean _tripleNotEquals_21 = (_name_28 != null);
                  if (_tripleNotEquals_21) {
                    String _name_29 = param1_2.getName();
                    _builder.append(_name_29);
                  } else {
                    double _dVal_4 = param1_2.getValue().getDVal();
                    _builder.append(_dVal_4);
                  }
                }
                _builder.append(" ");
                {
                  EList<Operators> _op_8 = param1_2.getOp();
                  for(final Operators parent_5 : _op_8) {
                    {
                      String _backParentheses_2 = parent_5.getBackParentheses();
                      boolean _tripleNotEquals_22 = (_backParentheses_2 != null);
                      if (_tripleNotEquals_22) {
                        _builder.append(") ");
                      } else {
                        CompOp _comparation_2 = parent_5.getComparation();
                        boolean _tripleNotEquals_23 = (_comparation_2 != null);
                        if (_tripleNotEquals_23) {
                          String _op_9 = parent_5.getComparation().getOp();
                          _builder.append(_op_9);
                          _builder.append(" ");
                        } else {
                          LogicOp _logicOperator_2 = parent_5.getLogicOperator();
                          boolean _tripleNotEquals_24 = (_logicOperator_2 != null);
                          if (_tripleNotEquals_24) {
                            String _op_10 = parent_5.getLogicOperator().getOp();
                            _builder.append(_op_10);
                            _builder.append(" ");
                          } else {
                            Op _operator_2 = parent_5.getOperator();
                            boolean _tripleNotEquals_25 = (_operator_2 != null);
                            if (_tripleNotEquals_25) {
                              String _op_11 = parent_5.getOperator().getOp();
                              _builder.append(_op_11);
                              _builder.append(" ");
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append(" ");
              }
            }
            _builder.append("\",");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          Lower _lower = param.getCheck().getReference().getLower();
          boolean _tripleNotEquals_26 = (_lower != null);
          if (_tripleNotEquals_26) {
            _builder.append("\t\t");
            _builder.append("\"Reference\":{");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t", "\t");
            _builder.append("\"Type\":\"Above\",");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t", "\t");
            _builder.append("\"Value\":[\"");
            {
              DOUBLE _value = param.getCheck().getReference().getLower().getBound_lower().getValue();
              boolean _tripleNotEquals_27 = (_value != null);
              if (_tripleNotEquals_27) {
                double _dVal_5 = param.getCheck().getReference().getLower().getBound_lower().getValue().getDVal();
                _builder.append(_dVal_5, "\t");
                _builder.append("\"],");
              } else {
                {
                  EList<AbstractElement2> _elements_15 = param.getCheck().getReference().getLower().getBound_lower().getEm().getElements();
                  for(final AbstractElement2 param1_3 : _elements_15) {
                    {
                      EList<String> _frontParentheses_3 = param1_3.getFrontParentheses();
                      for(final String parent_6 : _frontParentheses_3) {
                        _builder.append("( ");
                      }
                    }
                    {
                      String _name_30 = param1_3.getName();
                      boolean _tripleNotEquals_28 = (_name_30 != null);
                      if (_tripleNotEquals_28) {
                        String _name_31 = param1_3.getName();
                        _builder.append(_name_31, "\t");
                      } else {
                        double _dVal_6 = param1_3.getValue().getDVal();
                        _builder.append(_dVal_6, "\t");
                      }
                    }
                    _builder.append(" ");
                    {
                      EList<Operators> _op_12 = param1_3.getOp();
                      for(final Operators parent_7 : _op_12) {
                        {
                          String _backParentheses_3 = parent_7.getBackParentheses();
                          boolean _tripleNotEquals_29 = (_backParentheses_3 != null);
                          if (_tripleNotEquals_29) {
                            _builder.append(") ");
                          } else {
                            CompOp _comparation_3 = parent_7.getComparation();
                            boolean _tripleNotEquals_30 = (_comparation_3 != null);
                            if (_tripleNotEquals_30) {
                              String _op_13 = parent_7.getComparation().getOp();
                              _builder.append(_op_13, "\t");
                              _builder.append(" ");
                            } else {
                              LogicOp _logicOperator_3 = parent_7.getLogicOperator();
                              boolean _tripleNotEquals_31 = (_logicOperator_3 != null);
                              if (_tripleNotEquals_31) {
                                String _op_14 = parent_7.getLogicOperator().getOp();
                                _builder.append(_op_14, "\t");
                                _builder.append(" ");
                              } else {
                                Op _operator_3 = parent_7.getOperator();
                                boolean _tripleNotEquals_32 = (_operator_3 != null);
                                if (_tripleNotEquals_32) {
                                  String _op_15 = parent_7.getOperator().getOp();
                                  _builder.append(_op_15, "\t");
                                  _builder.append(" ");
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    _builder.append(" ");
                  }
                }
                _builder.append("\"],");
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t", "\t");
            _builder.append("\"Trace\":{");
            _builder.newLineIfNotEmpty();
            {
              Exactly _exactly = param.getCheck().getReference().getLower().getExactly();
              boolean _tripleNotEquals_33 = (_exactly != null);
              if (_tripleNotEquals_33) {
                _builder.append("\t");
                _builder.append("\t\t\t", "\t");
                _builder.append("\"Type\":\"exactly\",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t\t\t", "\t");
                _builder.append("\"Value\":\"");
                double _dVal_7 = param.getCheck().getReference().getLower().getExactly().getValue().getDVal();
                _builder.append(_dVal_7, "\t");
                _builder.append("\",");
                _builder.newLineIfNotEmpty();
                {
                  DOUBLE _time_2 = param.getCheck().getReference().getLower().getExactly().getTime();
                  boolean _tripleNotEquals_34 = (_time_2 != null);
                  if (_tripleNotEquals_34) {
                    _builder.append("\t");
                    _builder.append("\t\t\t", "\t");
                    _builder.append("\"Time\":\"");
                    double _dVal_8 = param.getCheck().getReference().getLower().getExactly().getTime().getDVal();
                    _builder.append(_dVal_8, "\t");
                    _builder.append("\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t\t\t", "\t");
                    _builder.append("\"Unit\":\"");
                    String _time_3 = param.getCheck().getReference().getLower().getExactly().getUnit().getTime();
                    _builder.append(_time_3, "\t");
                    _builder.append("\"");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("\t");
                    _builder.append("\t\t", "\t");
                    _builder.append("\"Time\":\"null\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t\t\t", "\t");
                    _builder.append("\"Unit\":\"null\"");
                    _builder.newLineIfNotEmpty();
                  }
                }
              } else {
                At_least _atleast = param.getCheck().getReference().getLower().getAtleast();
                boolean _tripleNotEquals_35 = (_atleast != null);
                if (_tripleNotEquals_35) {
                  _builder.append("\t");
                  _builder.append("\t\t\t", "\t");
                  _builder.append("\"Type\":\"atLeast\",");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t\t\t", "\t");
                  _builder.append("\"Value\":\"");
                  double _dVal_9 = param.getCheck().getReference().getLower().getAtleast().getValue().getDVal();
                  _builder.append(_dVal_9, "\t");
                  _builder.append("\",");
                  _builder.newLineIfNotEmpty();
                  {
                    DOUBLE _time_4 = param.getCheck().getReference().getLower().getAtleast().getTime();
                    boolean _tripleNotEquals_36 = (_time_4 != null);
                    if (_tripleNotEquals_36) {
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Time\":\"");
                      double _dVal_10 = param.getCheck().getReference().getLower().getAtleast().getTime().getDVal();
                      _builder.append(_dVal_10, "\t");
                      _builder.append("\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Unit\":\"");
                      String _time_5 = param.getCheck().getReference().getLower().getAtleast().getUnit().getTime();
                      _builder.append(_time_5, "\t");
                      _builder.append("\"");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Time\":\"null\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Unit\":\"null\"");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                } else {
                  At_most _atmost = param.getCheck().getReference().getLower().getAtmost();
                  boolean _tripleNotEquals_37 = (_atmost != null);
                  if (_tripleNotEquals_37) {
                    _builder.append("\t");
                    _builder.append("\t\t\t", "\t");
                    _builder.append("\"Type\":\"atMost\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t\t\t", "\t");
                    _builder.append("\"Value\":\"");
                    double _dVal_11 = param.getCheck().getReference().getLower().getAtmost().getValue().getDVal();
                    _builder.append(_dVal_11, "\t");
                    _builder.append("\",");
                    _builder.newLineIfNotEmpty();
                    {
                      DOUBLE _time_6 = param.getCheck().getReference().getLower().getAtmost().getTime();
                      boolean _tripleNotEquals_38 = (_time_6 != null);
                      if (_tripleNotEquals_38) {
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Time\":\"");
                        double _dVal_12 = param.getCheck().getReference().getLower().getAtmost().getTime().getDVal();
                        _builder.append(_dVal_12, "\t");
                        _builder.append("\",");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Unit\":\"");
                        String _time_7 = param.getCheck().getReference().getLower().getAtmost().getUnit().getTime();
                        _builder.append(_time_7, "\t");
                        _builder.append("\"");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Time\":\"null\",");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Unit\":\"null\"");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  } else {
                    _builder.append("\t");
                    _builder.append("\t\t\t", "\t");
                    _builder.append("\"Type\":\"null\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t\t\t", "\t");
                    _builder.append("\"Time\":\"null\",\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t\t\t", "\t");
                    _builder.append("\"Unit\":\"null\"");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("\t\t", "\t");
            _builder.append("}");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("},");
            _builder.newLineIfNotEmpty();
          } else {
            Upper _upper = param.getCheck().getReference().getUpper();
            boolean _tripleNotEquals_39 = (_upper != null);
            if (_tripleNotEquals_39) {
              _builder.append("\t\t");
              _builder.append("\"Reference\":{");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t", "\t");
              _builder.append("\"Type\":\"Below\",");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t", "\t");
              _builder.append("\"Value\":[\"");
              {
                DOUBLE _value_1 = param.getCheck().getReference().getUpper().getBound_upp().getValue();
                boolean _tripleNotEquals_40 = (_value_1 != null);
                if (_tripleNotEquals_40) {
                  double _dVal_13 = param.getCheck().getReference().getUpper().getBound_upp().getValue().getDVal();
                  _builder.append(_dVal_13, "\t");
                  _builder.append("\"],");
                } else {
                  {
                    EList<AbstractElement2> _elements_16 = param.getCheck().getReference().getUpper().getBound_upp().getEm().getElements();
                    for(final AbstractElement2 param1_4 : _elements_16) {
                      {
                        EList<String> _frontParentheses_4 = param1_4.getFrontParentheses();
                        for(final String parent_8 : _frontParentheses_4) {
                          _builder.append("( ");
                        }
                      }
                      {
                        String _name_32 = param1_4.getName();
                        boolean _tripleNotEquals_41 = (_name_32 != null);
                        if (_tripleNotEquals_41) {
                          String _name_33 = param1_4.getName();
                          _builder.append(_name_33, "\t");
                        } else {
                          double _dVal_14 = param1_4.getValue().getDVal();
                          _builder.append(_dVal_14, "\t");
                        }
                      }
                      _builder.append(" ");
                      {
                        EList<Operators> _op_16 = param1_4.getOp();
                        for(final Operators parent_9 : _op_16) {
                          {
                            String _backParentheses_4 = parent_9.getBackParentheses();
                            boolean _tripleNotEquals_42 = (_backParentheses_4 != null);
                            if (_tripleNotEquals_42) {
                              _builder.append(") ");
                            } else {
                              CompOp _comparation_4 = parent_9.getComparation();
                              boolean _tripleNotEquals_43 = (_comparation_4 != null);
                              if (_tripleNotEquals_43) {
                                String _op_17 = parent_9.getComparation().getOp();
                                _builder.append(_op_17, "\t");
                                _builder.append(" ");
                              } else {
                                LogicOp _logicOperator_4 = parent_9.getLogicOperator();
                                boolean _tripleNotEquals_44 = (_logicOperator_4 != null);
                                if (_tripleNotEquals_44) {
                                  String _op_18 = parent_9.getLogicOperator().getOp();
                                  _builder.append(_op_18, "\t");
                                  _builder.append(" ");
                                } else {
                                  Op _operator_4 = parent_9.getOperator();
                                  boolean _tripleNotEquals_45 = (_operator_4 != null);
                                  if (_tripleNotEquals_45) {
                                    String _op_19 = parent_9.getOperator().getOp();
                                    _builder.append(_op_19, "\t");
                                    _builder.append(" ");
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      _builder.append(" ");
                    }
                  }
                  _builder.append("\"],");
                }
              }
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t", "\t");
              _builder.append("\"Trace\":{");
              _builder.newLineIfNotEmpty();
              {
                Exactly _exactly_1 = param.getCheck().getReference().getUpper().getExactly();
                boolean _tripleNotEquals_46 = (_exactly_1 != null);
                if (_tripleNotEquals_46) {
                  _builder.append("\t");
                  _builder.append("\t\t\t", "\t");
                  _builder.append("\t\"Type\":\"exactly\",");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t\t\t", "\t");
                  _builder.append("\t\"Value\":\"");
                  double _dVal_15 = param.getCheck().getReference().getUpper().getExactly().getValue().getDVal();
                  _builder.append(_dVal_15, "\t");
                  _builder.append("\",");
                  _builder.newLineIfNotEmpty();
                  {
                    DOUBLE _time_8 = param.getCheck().getReference().getUpper().getExactly().getTime();
                    boolean _tripleNotEquals_47 = (_time_8 != null);
                    if (_tripleNotEquals_47) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t\t");
                      _builder.append("\t\"Time\":\"");
                      double _dVal_16 = param.getCheck().getReference().getUpper().getExactly().getTime().getDVal();
                      _builder.append(_dVal_16, "\t\t");
                      _builder.append("\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t\t");
                      _builder.append("\t\"Unit\":\"");
                      String _time_9 = param.getCheck().getReference().getUpper().getExactly().getUnit().getTime();
                      _builder.append(_time_9, "\t\t");
                      _builder.append("\"");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t\t");
                      _builder.append("\"Time\":\"null\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t\t");
                      _builder.append("\"Unit\":\"null\"");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                } else {
                  At_least _atleast_1 = param.getCheck().getReference().getUpper().getAtleast();
                  boolean _tripleNotEquals_48 = (_atleast_1 != null);
                  if (_tripleNotEquals_48) {
                    _builder.append("\t");
                    _builder.append("\t\t\t", "\t");
                    _builder.append("\"Type\":\"atLeast\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t\t\t", "\t");
                    _builder.append("\"Value\":\"");
                    double _dVal_17 = param.getCheck().getReference().getUpper().getAtleast().getValue().getDVal();
                    _builder.append(_dVal_17, "\t");
                    _builder.append("\",");
                    _builder.newLineIfNotEmpty();
                    {
                      DOUBLE _time_10 = param.getCheck().getReference().getUpper().getAtleast().getTime();
                      boolean _tripleNotEquals_49 = (_time_10 != null);
                      if (_tripleNotEquals_49) {
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Time\":\"");
                        double _dVal_18 = param.getCheck().getReference().getUpper().getAtleast().getTime().getDVal();
                        _builder.append(_dVal_18, "\t");
                        _builder.append("\",");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Unit\":\"");
                        String _time_11 = param.getCheck().getReference().getUpper().getAtleast().getUnit().getTime();
                        _builder.append(_time_11, "\t");
                        _builder.append("\"");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Time\":\"null\",");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Unit\":\"null\"");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  } else {
                    At_most _atmost_1 = param.getCheck().getReference().getUpper().getAtmost();
                    boolean _tripleNotEquals_50 = (_atmost_1 != null);
                    if (_tripleNotEquals_50) {
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Type\":\"atMost\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Value\":\"");
                      double _dVal_19 = param.getCheck().getReference().getUpper().getAtmost().getValue().getDVal();
                      _builder.append(_dVal_19, "\t");
                      _builder.append("\",");
                      _builder.newLineIfNotEmpty();
                      {
                        DOUBLE _time_12 = param.getCheck().getReference().getUpper().getAtmost().getTime();
                        boolean _tripleNotEquals_51 = (_time_12 != null);
                        if (_tripleNotEquals_51) {
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Time\":\"");
                          double _dVal_20 = param.getCheck().getReference().getUpper().getAtmost().getTime().getDVal();
                          _builder.append(_dVal_20, "\t");
                          _builder.append("\",");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Unit\":\"");
                          String _time_13 = param.getCheck().getReference().getUpper().getAtmost().getUnit().getTime();
                          _builder.append(_time_13, "\t");
                          _builder.append("\"");
                          _builder.newLineIfNotEmpty();
                        } else {
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Time\":\"null\",");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Unit\":\"null\"");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    } else {
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Type\":\"null\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Time\":\"null\",\t\t\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Unit\":\"null\"");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.append("\t");
              _builder.append("\t\t", "\t");
              _builder.append("}");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("},");
              _builder.newLineIfNotEmpty();
            } else {
              Range _range = param.getCheck().getReference().getRange();
              boolean _tripleNotEquals_52 = (_range != null);
              if (_tripleNotEquals_52) {
                _builder.append("\t\t");
                _builder.append("\"Reference\":{");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t\t", "\t");
                _builder.append("\"Type\":\"Range\",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t\t", "\t");
                _builder.append("\"Value\":[\"");
                {
                  DOUBLE _value_2 = param.getCheck().getReference().getRange().getBound_lower().getValue();
                  boolean _tripleNotEquals_53 = (_value_2 != null);
                  if (_tripleNotEquals_53) {
                    double _dVal_21 = param.getCheck().getReference().getRange().getBound_lower().getValue().getDVal();
                    _builder.append(_dVal_21, "\t");
                    _builder.append("\",");
                  } else {
                    {
                      EList<AbstractElement2> _elements_17 = param.getCheck().getReference().getRange().getBound_lower().getEm().getElements();
                      for(final AbstractElement2 param1_5 : _elements_17) {
                        {
                          EList<String> _frontParentheses_5 = param1_5.getFrontParentheses();
                          for(final String parent_10 : _frontParentheses_5) {
                            _builder.append("( ");
                          }
                        }
                        {
                          String _name_34 = param1_5.getName();
                          boolean _tripleNotEquals_54 = (_name_34 != null);
                          if (_tripleNotEquals_54) {
                            String _name_35 = param1_5.getName();
                            _builder.append(_name_35, "\t");
                          } else {
                            double _dVal_22 = param1_5.getValue().getDVal();
                            _builder.append(_dVal_22, "\t");
                          }
                        }
                        _builder.append(" ");
                        {
                          EList<Operators> _op_20 = param1_5.getOp();
                          for(final Operators parent_11 : _op_20) {
                            {
                              String _backParentheses_5 = parent_11.getBackParentheses();
                              boolean _tripleNotEquals_55 = (_backParentheses_5 != null);
                              if (_tripleNotEquals_55) {
                                _builder.append(") ");
                              } else {
                                CompOp _comparation_5 = parent_11.getComparation();
                                boolean _tripleNotEquals_56 = (_comparation_5 != null);
                                if (_tripleNotEquals_56) {
                                  String _op_21 = parent_11.getComparation().getOp();
                                  _builder.append(_op_21, "\t");
                                  _builder.append(" ");
                                } else {
                                  LogicOp _logicOperator_5 = parent_11.getLogicOperator();
                                  boolean _tripleNotEquals_57 = (_logicOperator_5 != null);
                                  if (_tripleNotEquals_57) {
                                    String _op_22 = parent_11.getLogicOperator().getOp();
                                    _builder.append(_op_22, "\t");
                                    _builder.append(" ");
                                  } else {
                                    Op _operator_5 = parent_11.getOperator();
                                    boolean _tripleNotEquals_58 = (_operator_5 != null);
                                    if (_tripleNotEquals_58) {
                                      String _op_23 = parent_11.getOperator().getOp();
                                      _builder.append(_op_23, "\t");
                                      _builder.append(" ");
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        _builder.append(" ");
                      }
                    }
                    _builder.append("\",");
                  }
                }
                {
                  DOUBLE _value_3 = param.getCheck().getReference().getRange().getBound_upp().getValue();
                  boolean _tripleNotEquals_59 = (_value_3 != null);
                  if (_tripleNotEquals_59) {
                    DOUBLE _value_4 = param.getCheck().getReference().getRange().getBound_upp().getValue();
                    _builder.append(_value_4, "\t");
                    _builder.append("\"],");
                  } else {
                    {
                      EList<AbstractElement2> _elements_18 = param.getCheck().getReference().getRange().getBound_upp().getEm().getElements();
                      for(final AbstractElement2 param1_6 : _elements_18) {
                        {
                          EList<String> _frontParentheses_6 = param1_6.getFrontParentheses();
                          for(final String parent_12 : _frontParentheses_6) {
                            _builder.append("( ");
                          }
                        }
                        {
                          String _name_36 = param1_6.getName();
                          boolean _tripleNotEquals_60 = (_name_36 != null);
                          if (_tripleNotEquals_60) {
                            String _name_37 = param1_6.getName();
                            _builder.append(_name_37, "\t");
                          } else {
                            double _dVal_23 = param1_6.getValue().getDVal();
                            _builder.append(_dVal_23, "\t");
                          }
                        }
                        _builder.append(" ");
                        {
                          EList<Operators> _op_24 = param1_6.getOp();
                          for(final Operators parent_13 : _op_24) {
                            {
                              String _backParentheses_6 = parent_13.getBackParentheses();
                              boolean _tripleNotEquals_61 = (_backParentheses_6 != null);
                              if (_tripleNotEquals_61) {
                                _builder.append(") ");
                              } else {
                                CompOp _comparation_6 = parent_13.getComparation();
                                boolean _tripleNotEquals_62 = (_comparation_6 != null);
                                if (_tripleNotEquals_62) {
                                  String _op_25 = parent_13.getComparation().getOp();
                                  _builder.append(_op_25, "\t");
                                  _builder.append(" ");
                                } else {
                                  LogicOp _logicOperator_6 = parent_13.getLogicOperator();
                                  boolean _tripleNotEquals_63 = (_logicOperator_6 != null);
                                  if (_tripleNotEquals_63) {
                                    String _op_26 = parent_13.getLogicOperator().getOp();
                                    _builder.append(_op_26, "\t");
                                    _builder.append(" ");
                                  } else {
                                    Op _operator_6 = parent_13.getOperator();
                                    boolean _tripleNotEquals_64 = (_operator_6 != null);
                                    if (_tripleNotEquals_64) {
                                      String _op_27 = parent_13.getOperator().getOp();
                                      _builder.append(_op_27, "\t");
                                      _builder.append(" ");
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        _builder.append(" ");
                      }
                    }
                    _builder.append("\"],");
                  }
                }
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t\t", "\t");
                _builder.append("\"Trace\":{");
                _builder.newLineIfNotEmpty();
                {
                  Exactly _exactly_2 = param.getCheck().getReference().getRange().getExactly();
                  boolean _tripleNotEquals_65 = (_exactly_2 != null);
                  if (_tripleNotEquals_65) {
                    _builder.append("\t");
                    _builder.append("\t\t\t", "\t");
                    _builder.append("\"Type\":\"exactly\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t\t\t", "\t");
                    _builder.append("\"Value\":\"");
                    double _dVal_24 = param.getCheck().getReference().getRange().getExactly().getValue().getDVal();
                    _builder.append(_dVal_24, "\t");
                    _builder.append("\",");
                    _builder.newLineIfNotEmpty();
                    {
                      DOUBLE _time_14 = param.getCheck().getReference().getRange().getExactly().getTime();
                      boolean _tripleNotEquals_66 = (_time_14 != null);
                      if (_tripleNotEquals_66) {
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Time\":\"");
                        double _dVal_25 = param.getCheck().getReference().getRange().getExactly().getTime().getDVal();
                        _builder.append(_dVal_25, "\t");
                        _builder.append("\",");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Unit\":\"");
                        String _time_15 = param.getCheck().getReference().getRange().getExactly().getUnit().getTime();
                        _builder.append(_time_15, "\t");
                        _builder.append("\"");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Time\":\"null\",");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Unit\":\"null\"");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  } else {
                    At_least _atleast_2 = param.getCheck().getReference().getRange().getAtleast();
                    boolean _tripleNotEquals_67 = (_atleast_2 != null);
                    if (_tripleNotEquals_67) {
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Type\":\"atLeast\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Value\":\"");
                      double _dVal_26 = param.getCheck().getReference().getRange().getAtleast().getValue().getDVal();
                      _builder.append(_dVal_26, "\t");
                      _builder.append("\",");
                      _builder.newLineIfNotEmpty();
                      {
                        DOUBLE _time_16 = param.getCheck().getReference().getRange().getAtleast().getTime();
                        boolean _tripleNotEquals_68 = (_time_16 != null);
                        if (_tripleNotEquals_68) {
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Time\":\"");
                          double _dVal_27 = param.getCheck().getReference().getRange().getAtleast().getTime().getDVal();
                          _builder.append(_dVal_27, "\t");
                          _builder.append("\",");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Unit\":\"");
                          String _time_17 = param.getCheck().getReference().getRange().getAtleast().getUnit().getTime();
                          _builder.append(_time_17, "\t");
                          _builder.append("\"");
                          _builder.newLineIfNotEmpty();
                        } else {
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Time\":\"null\",");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Unit\":\"null\"");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    } else {
                      At_most _atmost_2 = param.getCheck().getReference().getRange().getAtmost();
                      boolean _tripleNotEquals_69 = (_atmost_2 != null);
                      if (_tripleNotEquals_69) {
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Type\":\"atMost\",");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Value\":\"");
                        double _dVal_28 = param.getCheck().getReference().getRange().getAtmost().getValue().getDVal();
                        _builder.append(_dVal_28, "\t");
                        _builder.append("\",");
                        _builder.newLineIfNotEmpty();
                        {
                          DOUBLE _time_18 = param.getCheck().getReference().getRange().getAtmost().getTime();
                          boolean _tripleNotEquals_70 = (_time_18 != null);
                          if (_tripleNotEquals_70) {
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Time\":\"");
                            double _dVal_29 = param.getCheck().getReference().getRange().getAtmost().getTime().getDVal();
                            _builder.append(_dVal_29, "\t");
                            _builder.append("\",");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Unit\":\"");
                            String _time_19 = param.getCheck().getReference().getRange().getAtmost().getUnit().getTime();
                            _builder.append(_time_19, "\t");
                            _builder.append("\"");
                            _builder.newLineIfNotEmpty();
                          } else {
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Time\":\"null\",");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Unit\":\"null\"");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      } else {
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Type\":\"null\",");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Time\":\"null\",\t\t\t");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Unit\":\"null\"");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
                _builder.append("\t");
                _builder.append("\t\t", "\t");
                _builder.append("}");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("},");
                _builder.newLineIfNotEmpty();
              } else {
                Gap _gap = param.getCheck().getReference().getGap();
                boolean _tripleNotEquals_71 = (_gap != null);
                if (_tripleNotEquals_71) {
                  _builder.append("\t\t");
                  _builder.append("\"Reference\":{");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t\t", "\t");
                  _builder.append("\"Type\":\"Gap\",");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t\t", "\t");
                  _builder.append("\"Value\":[\"");
                  {
                    DOUBLE _value_5 = param.getCheck().getReference().getGap().getBound_lower().getValue();
                    boolean _tripleNotEquals_72 = (_value_5 != null);
                    if (_tripleNotEquals_72) {
                      double _dVal_30 = param.getCheck().getReference().getGap().getBound_lower().getValue().getDVal();
                      _builder.append(_dVal_30, "\t");
                      _builder.append("\",");
                    } else {
                      {
                        EList<AbstractElement2> _elements_19 = param.getCheck().getReference().getGap().getBound_lower().getEm().getElements();
                        for(final AbstractElement2 param1_7 : _elements_19) {
                          {
                            EList<String> _frontParentheses_7 = param1_7.getFrontParentheses();
                            for(final String parent_14 : _frontParentheses_7) {
                              _builder.append("( ");
                            }
                          }
                          {
                            String _name_38 = param1_7.getName();
                            boolean _tripleNotEquals_73 = (_name_38 != null);
                            if (_tripleNotEquals_73) {
                              String _name_39 = param1_7.getName();
                              _builder.append(_name_39, "\t");
                            } else {
                              double _dVal_31 = param1_7.getValue().getDVal();
                              _builder.append(_dVal_31, "\t");
                            }
                          }
                          _builder.append(" ");
                          {
                            EList<Operators> _op_28 = param1_7.getOp();
                            for(final Operators parent_15 : _op_28) {
                              {
                                String _backParentheses_7 = parent_15.getBackParentheses();
                                boolean _tripleNotEquals_74 = (_backParentheses_7 != null);
                                if (_tripleNotEquals_74) {
                                  _builder.append(") ");
                                } else {
                                  CompOp _comparation_7 = parent_15.getComparation();
                                  boolean _tripleNotEquals_75 = (_comparation_7 != null);
                                  if (_tripleNotEquals_75) {
                                    String _op_29 = parent_15.getComparation().getOp();
                                    _builder.append(_op_29, "\t");
                                    _builder.append(" ");
                                  } else {
                                    LogicOp _logicOperator_7 = parent_15.getLogicOperator();
                                    boolean _tripleNotEquals_76 = (_logicOperator_7 != null);
                                    if (_tripleNotEquals_76) {
                                      String _op_30 = parent_15.getLogicOperator().getOp();
                                      _builder.append(_op_30, "\t");
                                      _builder.append(" ");
                                    } else {
                                      Op _operator_7 = parent_15.getOperator();
                                      boolean _tripleNotEquals_77 = (_operator_7 != null);
                                      if (_tripleNotEquals_77) {
                                        String _op_31 = parent_15.getOperator().getOp();
                                        _builder.append(_op_31, "\t");
                                        _builder.append(" ");
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append(" ");
                        }
                      }
                      _builder.append("\",");
                    }
                  }
                  {
                    DOUBLE _value_6 = param.getCheck().getReference().getGap().getBound_upp().getValue();
                    boolean _tripleNotEquals_78 = (_value_6 != null);
                    if (_tripleNotEquals_78) {
                      DOUBLE _value_7 = param.getCheck().getReference().getGap().getBound_upp().getValue();
                      _builder.append(_value_7, "\t");
                      _builder.append("\"],");
                    } else {
                      {
                        EList<AbstractElement2> _elements_20 = param.getCheck().getReference().getGap().getBound_upp().getEm().getElements();
                        for(final AbstractElement2 param1_8 : _elements_20) {
                          {
                            EList<String> _frontParentheses_8 = param1_8.getFrontParentheses();
                            for(final String parent_16 : _frontParentheses_8) {
                              _builder.append("( ");
                            }
                          }
                          {
                            String _name_40 = param1_8.getName();
                            boolean _tripleNotEquals_79 = (_name_40 != null);
                            if (_tripleNotEquals_79) {
                              String _name_41 = param1_8.getName();
                              _builder.append(_name_41, "\t");
                            } else {
                              double _dVal_32 = param1_8.getValue().getDVal();
                              _builder.append(_dVal_32, "\t");
                            }
                          }
                          _builder.append(" ");
                          {
                            EList<Operators> _op_32 = param1_8.getOp();
                            for(final Operators parent_17 : _op_32) {
                              {
                                String _backParentheses_8 = parent_17.getBackParentheses();
                                boolean _tripleNotEquals_80 = (_backParentheses_8 != null);
                                if (_tripleNotEquals_80) {
                                  _builder.append(") ");
                                } else {
                                  CompOp _comparation_8 = parent_17.getComparation();
                                  boolean _tripleNotEquals_81 = (_comparation_8 != null);
                                  if (_tripleNotEquals_81) {
                                    String _op_33 = parent_17.getComparation().getOp();
                                    _builder.append(_op_33, "\t");
                                    _builder.append(" ");
                                  } else {
                                    LogicOp _logicOperator_8 = parent_17.getLogicOperator();
                                    boolean _tripleNotEquals_82 = (_logicOperator_8 != null);
                                    if (_tripleNotEquals_82) {
                                      String _op_34 = parent_17.getLogicOperator().getOp();
                                      _builder.append(_op_34, "\t");
                                      _builder.append(" ");
                                    } else {
                                      Op _operator_8 = parent_17.getOperator();
                                      boolean _tripleNotEquals_83 = (_operator_8 != null);
                                      if (_tripleNotEquals_83) {
                                        String _op_35 = parent_17.getOperator().getOp();
                                        _builder.append(_op_35, "\t");
                                        _builder.append(" ");
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append(" ");
                        }
                      }
                      _builder.append("\"],");
                    }
                  }
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t\t", "\t");
                  _builder.append("\"Trace\":{");
                  _builder.newLineIfNotEmpty();
                  {
                    Exactly _exactly_3 = param.getCheck().getReference().getGap().getExactly();
                    boolean _tripleNotEquals_84 = (_exactly_3 != null);
                    if (_tripleNotEquals_84) {
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Type\":\"exactly\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t\t\t", "\t");
                      _builder.append("\"Value\":\"");
                      double _dVal_33 = param.getCheck().getReference().getGap().getExactly().getValue().getDVal();
                      _builder.append(_dVal_33, "\t");
                      _builder.append("\",");
                      _builder.newLineIfNotEmpty();
                      {
                        DOUBLE _time_20 = param.getCheck().getReference().getGap().getExactly().getTime();
                        boolean _tripleNotEquals_85 = (_time_20 != null);
                        if (_tripleNotEquals_85) {
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Time\":\"");
                          double _dVal_34 = param.getCheck().getReference().getGap().getExactly().getTime().getDVal();
                          _builder.append(_dVal_34, "\t");
                          _builder.append("\",");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Unit\":\"");
                          String _time_21 = param.getCheck().getReference().getGap().getExactly().getUnit().getTime();
                          _builder.append(_time_21, "\t");
                          _builder.append("\"");
                          _builder.newLineIfNotEmpty();
                        } else {
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Time\":\"null\",");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Unit\":\"null\"");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    } else {
                      At_least _atleast_3 = param.getCheck().getReference().getGap().getAtleast();
                      boolean _tripleNotEquals_86 = (_atleast_3 != null);
                      if (_tripleNotEquals_86) {
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Type\":\"atLeast\",");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Value\":\"");
                        double _dVal_35 = param.getCheck().getReference().getGap().getAtleast().getValue().getDVal();
                        _builder.append(_dVal_35, "\t");
                        _builder.append("\",");
                        _builder.newLineIfNotEmpty();
                        {
                          DOUBLE _time_22 = param.getCheck().getReference().getGap().getAtleast().getTime();
                          boolean _tripleNotEquals_87 = (_time_22 != null);
                          if (_tripleNotEquals_87) {
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Time\":\"");
                            double _dVal_36 = param.getCheck().getReference().getGap().getAtleast().getTime().getDVal();
                            _builder.append(_dVal_36, "\t");
                            _builder.append("\",");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Unit\":\"");
                            String _time_23 = param.getCheck().getReference().getGap().getAtleast().getUnit().getTime();
                            _builder.append(_time_23, "\t");
                            _builder.append("\"");
                            _builder.newLineIfNotEmpty();
                          } else {
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Time\":\"null\",");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Unit\":\"null\"");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      } else {
                        At_most _atmost_3 = param.getCheck().getReference().getGap().getAtmost();
                        boolean _tripleNotEquals_88 = (_atmost_3 != null);
                        if (_tripleNotEquals_88) {
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Type\":\"atMost\",");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Value\":\"");
                          double _dVal_37 = param.getCheck().getReference().getGap().getAtmost().getValue().getDVal();
                          _builder.append(_dVal_37, "\t");
                          _builder.append("\",");
                          _builder.newLineIfNotEmpty();
                          {
                            DOUBLE _time_24 = param.getCheck().getReference().getGap().getAtmost().getTime();
                            boolean _tripleNotEquals_89 = (_time_24 != null);
                            if (_tripleNotEquals_89) {
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Time\":\"");
                              double _dVal_38 = param.getCheck().getReference().getGap().getAtmost().getTime().getDVal();
                              _builder.append(_dVal_38, "\t");
                              _builder.append("\",");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Unit\":\"");
                              String _time_25 = param.getCheck().getReference().getGap().getAtmost().getUnit().getTime();
                              _builder.append(_time_25, "\t");
                              _builder.append("\"");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Time\":\"null\",");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Unit\":\"null\"");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        } else {
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Type\":\"null\",");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Time\":\"null\",\t\t\t");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Unit\":\"null\"");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  _builder.append("\t");
                  _builder.append("\t\t", "\t");
                  _builder.append("}");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("},");
                  _builder.newLineIfNotEmpty();
                } else {
                  Same _same = param.getCheck().getReference().getSame();
                  boolean _tripleNotEquals_90 = (_same != null);
                  if (_tripleNotEquals_90) {
                    _builder.append("\t\t");
                    _builder.append("\"Reference\":{");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t\t", "\t");
                    _builder.append("\"Type\":\"Same\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t\t", "\t");
                    _builder.append("\"Value\":[\"");
                    {
                      DOUBLE _value_8 = param.getCheck().getReference().getSame().getBound_upp().getValue();
                      boolean _tripleNotEquals_91 = (_value_8 != null);
                      if (_tripleNotEquals_91) {
                        double _dVal_39 = param.getCheck().getReference().getSame().getBound_upp().getValue().getDVal();
                        _builder.append(_dVal_39, "\t");
                        _builder.append("\"],");
                      } else {
                        {
                          EList<AbstractElement2> _elements_21 = param.getCheck().getReference().getSame().getBound_upp().getEm().getElements();
                          for(final AbstractElement2 param1_9 : _elements_21) {
                            {
                              EList<String> _frontParentheses_9 = param1_9.getFrontParentheses();
                              for(final String parent_18 : _frontParentheses_9) {
                                _builder.append("( ");
                              }
                            }
                            {
                              String _name_42 = param1_9.getName();
                              boolean _tripleNotEquals_92 = (_name_42 != null);
                              if (_tripleNotEquals_92) {
                                String _name_43 = param1_9.getName();
                                _builder.append(_name_43, "\t");
                              } else {
                                double _dVal_40 = param1_9.getValue().getDVal();
                                _builder.append(_dVal_40, "\t");
                              }
                            }
                            _builder.append(" ");
                            {
                              EList<Operators> _op_36 = param1_9.getOp();
                              for(final Operators parent_19 : _op_36) {
                                {
                                  String _backParentheses_9 = parent_19.getBackParentheses();
                                  boolean _tripleNotEquals_93 = (_backParentheses_9 != null);
                                  if (_tripleNotEquals_93) {
                                    _builder.append(") ");
                                  } else {
                                    CompOp _comparation_9 = parent_19.getComparation();
                                    boolean _tripleNotEquals_94 = (_comparation_9 != null);
                                    if (_tripleNotEquals_94) {
                                      String _op_37 = parent_19.getComparation().getOp();
                                      _builder.append(_op_37, "\t");
                                      _builder.append(" ");
                                    } else {
                                      LogicOp _logicOperator_9 = parent_19.getLogicOperator();
                                      boolean _tripleNotEquals_95 = (_logicOperator_9 != null);
                                      if (_tripleNotEquals_95) {
                                        String _op_38 = parent_19.getLogicOperator().getOp();
                                        _builder.append(_op_38, "\t");
                                        _builder.append(" ");
                                      } else {
                                        Op _operator_9 = parent_19.getOperator();
                                        boolean _tripleNotEquals_96 = (_operator_9 != null);
                                        if (_tripleNotEquals_96) {
                                          String _op_39 = parent_19.getOperator().getOp();
                                          _builder.append(_op_39, "\t");
                                          _builder.append(" ");
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            _builder.append(" ");
                          }
                        }
                        _builder.append("\"],");
                      }
                    }
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t\t", "\t");
                    _builder.append("\"Trace\":{");
                    _builder.newLineIfNotEmpty();
                    {
                      Exactly _exactly_4 = param.getCheck().getReference().getSame().getExactly();
                      boolean _tripleNotEquals_97 = (_exactly_4 != null);
                      if (_tripleNotEquals_97) {
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Type\":\"exactly\",");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t\t\t", "\t");
                        _builder.append("\"Value\":\"");
                        double _dVal_41 = param.getCheck().getReference().getSame().getExactly().getValue().getDVal();
                        _builder.append(_dVal_41, "\t");
                        _builder.append("\",");
                        _builder.newLineIfNotEmpty();
                        {
                          DOUBLE _time_26 = param.getCheck().getReference().getSame().getExactly().getTime();
                          boolean _tripleNotEquals_98 = (_time_26 != null);
                          if (_tripleNotEquals_98) {
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Time\":\"");
                            double _dVal_42 = param.getCheck().getReference().getSame().getExactly().getTime().getDVal();
                            _builder.append(_dVal_42, "\t");
                            _builder.append("\",");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Unit\":\"");
                            String _time_27 = param.getCheck().getReference().getSame().getExactly().getUnit().getTime();
                            _builder.append(_time_27, "\t");
                            _builder.append("\"");
                            _builder.newLineIfNotEmpty();
                          } else {
                            _builder.append("\t");
                            _builder.append("\t\t", "\t");
                            _builder.append("\"Time\":\"null\",");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Unit\":\"null\"");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      } else {
                        At_least _atleast_4 = param.getCheck().getReference().getSame().getAtleast();
                        boolean _tripleNotEquals_99 = (_atleast_4 != null);
                        if (_tripleNotEquals_99) {
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Type\":\"atLeast\",");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Value\":\"");
                          double _dVal_43 = param.getCheck().getReference().getSame().getAtleast().getValue().getDVal();
                          _builder.append(_dVal_43, "\t");
                          _builder.append("\",");
                          _builder.newLineIfNotEmpty();
                          {
                            DOUBLE _time_28 = param.getCheck().getReference().getSame().getAtleast().getTime();
                            boolean _tripleNotEquals_100 = (_time_28 != null);
                            if (_tripleNotEquals_100) {
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Time\":\"");
                              double _dVal_44 = param.getCheck().getReference().getSame().getAtleast().getTime().getDVal();
                              _builder.append(_dVal_44, "\t");
                              _builder.append("\",");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Unit\":\"");
                              String _time_29 = param.getCheck().getReference().getSame().getAtleast().getUnit().getTime();
                              _builder.append(_time_29, "\t");
                              _builder.append("\"");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Time\":\"null\",");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Unit\":\"null\"");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        } else {
                          At_most _atmost_4 = param.getCheck().getReference().getSame().getAtmost();
                          boolean _tripleNotEquals_101 = (_atmost_4 != null);
                          if (_tripleNotEquals_101) {
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Type\":\"atMost\",");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Value\":\"");
                            double _dVal_45 = param.getCheck().getReference().getSame().getAtmost().getValue().getDVal();
                            _builder.append(_dVal_45, "\t");
                            _builder.append("\",");
                            _builder.newLineIfNotEmpty();
                            {
                              DOUBLE _time_30 = param.getCheck().getReference().getSame().getAtmost().getTime();
                              boolean _tripleNotEquals_102 = (_time_30 != null);
                              if (_tripleNotEquals_102) {
                                _builder.append("\t");
                                _builder.append("\t\t\t", "\t");
                                _builder.append("\"Time\":\"");
                                double _dVal_46 = param.getCheck().getReference().getSame().getAtmost().getTime().getDVal();
                                _builder.append(_dVal_46, "\t");
                                _builder.append("\",");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t\t\t", "\t");
                                _builder.append("\"Unit\":\"");
                                String _time_31 = param.getCheck().getReference().getSame().getAtmost().getUnit().getTime();
                                _builder.append(_time_31, "\t");
                                _builder.append("\"");
                                _builder.newLineIfNotEmpty();
                              } else {
                                _builder.append("\t");
                                _builder.append("\t\t\t", "\t");
                                _builder.append("\"Time\":\"null\",");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t\t\t", "\t");
                                _builder.append("\"Unit\":\"null\"");
                                _builder.newLineIfNotEmpty();
                              }
                            }
                          } else {
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Type\":\"null\",");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Time\":\"null\",");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Unit\":\"null\"");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                    _builder.append("\t");
                    _builder.append("\t\t", "\t");
                    _builder.append("}");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("},");
                    _builder.newLineIfNotEmpty();
                  } else {
                    NotSame _notsame = param.getCheck().getReference().getNotsame();
                    boolean _tripleNotEquals_103 = (_notsame != null);
                    if (_tripleNotEquals_103) {
                      _builder.append("\t\t");
                      _builder.append("\"Reference\":{");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t\t", "\t");
                      _builder.append("\"Type\":\"NotSame\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t\t", "\t");
                      _builder.append("\"Value\":[\"");
                      {
                        DOUBLE _value_9 = param.getCheck().getReference().getNotsame().getBound_upp().getValue();
                        boolean _tripleNotEquals_104 = (_value_9 != null);
                        if (_tripleNotEquals_104) {
                          double _dVal_47 = param.getCheck().getReference().getNotsame().getBound_upp().getValue().getDVal();
                          _builder.append(_dVal_47, "\t");
                          _builder.append("\"],");
                        } else {
                          {
                            EList<AbstractElement2> _elements_22 = param.getCheck().getReference().getNotsame().getBound_upp().getEm().getElements();
                            for(final AbstractElement2 param1_10 : _elements_22) {
                              {
                                EList<String> _frontParentheses_10 = param1_10.getFrontParentheses();
                                for(final String parent_20 : _frontParentheses_10) {
                                  _builder.append("( ");
                                }
                              }
                              {
                                String _name_44 = param1_10.getName();
                                boolean _tripleNotEquals_105 = (_name_44 != null);
                                if (_tripleNotEquals_105) {
                                  String _name_45 = param1_10.getName();
                                  _builder.append(_name_45, "\t");
                                } else {
                                  double _dVal_48 = param1_10.getValue().getDVal();
                                  _builder.append(_dVal_48, "\t");
                                }
                              }
                              _builder.append(" ");
                              {
                                EList<Operators> _op_40 = param1_10.getOp();
                                for(final Operators parent_21 : _op_40) {
                                  {
                                    String _backParentheses_10 = parent_21.getBackParentheses();
                                    boolean _tripleNotEquals_106 = (_backParentheses_10 != null);
                                    if (_tripleNotEquals_106) {
                                      _builder.append(") ");
                                    } else {
                                      CompOp _comparation_10 = parent_21.getComparation();
                                      boolean _tripleNotEquals_107 = (_comparation_10 != null);
                                      if (_tripleNotEquals_107) {
                                        String _op_41 = parent_21.getComparation().getOp();
                                        _builder.append(_op_41, "\t");
                                        _builder.append(" ");
                                      } else {
                                        LogicOp _logicOperator_10 = parent_21.getLogicOperator();
                                        boolean _tripleNotEquals_108 = (_logicOperator_10 != null);
                                        if (_tripleNotEquals_108) {
                                          String _op_42 = parent_21.getLogicOperator().getOp();
                                          _builder.append(_op_42, "\t");
                                          _builder.append(" ");
                                        } else {
                                          Op _operator_10 = parent_21.getOperator();
                                          boolean _tripleNotEquals_109 = (_operator_10 != null);
                                          if (_tripleNotEquals_109) {
                                            String _op_43 = parent_21.getOperator().getOp();
                                            _builder.append(_op_43, "\t");
                                            _builder.append(" ");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              _builder.append(" ");
                            }
                          }
                          _builder.append("\",");
                        }
                      }
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t\t", "\t");
                      _builder.append("\"Trace\":{");
                      _builder.newLineIfNotEmpty();
                      {
                        Exactly _exactly_5 = param.getCheck().getReference().getNotsame().getExactly();
                        boolean _tripleNotEquals_110 = (_exactly_5 != null);
                        if (_tripleNotEquals_110) {
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Type\":\"exactly\",");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t\t\t", "\t");
                          _builder.append("\"Value\":\"");
                          double _dVal_49 = param.getCheck().getReference().getNotsame().getExactly().getValue().getDVal();
                          _builder.append(_dVal_49, "\t");
                          _builder.append("\"");
                          _builder.newLineIfNotEmpty();
                          {
                            DOUBLE _time_32 = param.getCheck().getReference().getNotsame().getExactly().getTime();
                            boolean _tripleNotEquals_111 = (_time_32 != null);
                            if (_tripleNotEquals_111) {
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\t\"Time\":\"");
                              double _dVal_50 = param.getCheck().getReference().getNotsame().getExactly().getTime().getDVal();
                              _builder.append(_dVal_50, "\t");
                              _builder.append("\",");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t\t");
                              _builder.append("\"Unit\":\"");
                              String _time_33 = param.getCheck().getReference().getNotsame().getExactly().getUnit().getTime();
                              _builder.append(_time_33, "\t\t");
                              _builder.append("\"");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Time\":\"null\",");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Unit\":\"null\"");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        } else {
                          At_least _atleast_5 = param.getCheck().getReference().getNotsame().getAtleast();
                          boolean _tripleNotEquals_112 = (_atleast_5 != null);
                          if (_tripleNotEquals_112) {
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Type\":\"atLeast\",");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t\t\t", "\t");
                            _builder.append("\"Value\":\"");
                            double _dVal_51 = param.getCheck().getReference().getNotsame().getAtleast().getValue().getDVal();
                            _builder.append(_dVal_51, "\t");
                            _builder.append("\"");
                            _builder.newLineIfNotEmpty();
                            {
                              DOUBLE _time_34 = param.getCheck().getReference().getNotsame().getAtleast().getTime();
                              boolean _tripleNotEquals_113 = (_time_34 != null);
                              if (_tripleNotEquals_113) {
                                _builder.append("\t");
                                _builder.append("\t\t\t", "\t");
                                _builder.append("\"Time\":\"");
                                double _dVal_52 = param.getCheck().getReference().getNotsame().getAtleast().getTime().getDVal();
                                _builder.append(_dVal_52, "\t");
                                _builder.append("\",");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t\t\t", "\t");
                                _builder.append("\"Unit\":\"");
                                String _time_35 = param.getCheck().getReference().getNotsame().getAtleast().getUnit().getTime();
                                _builder.append(_time_35, "\t");
                                _builder.append("\"");
                                _builder.newLineIfNotEmpty();
                              } else {
                                _builder.append("\t");
                                _builder.append("\t\t\t", "\t");
                                _builder.append("\"Time\":\"null\",");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t\t\t", "\t");
                                _builder.append("\"Unit\":\"null\"");
                                _builder.newLineIfNotEmpty();
                              }
                            }
                          } else {
                            At_most _atmost_5 = param.getCheck().getReference().getNotsame().getAtmost();
                            boolean _tripleNotEquals_114 = (_atmost_5 != null);
                            if (_tripleNotEquals_114) {
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Type\":\"atMost\",");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Value\":\"");
                              double _dVal_53 = param.getCheck().getReference().getNotsame().getAtmost().getValue().getDVal();
                              _builder.append(_dVal_53, "\t");
                              _builder.append("\"");
                              _builder.newLineIfNotEmpty();
                              {
                                DOUBLE _time_36 = param.getCheck().getReference().getNotsame().getAtmost().getTime();
                                boolean _tripleNotEquals_115 = (_time_36 != null);
                                if (_tripleNotEquals_115) {
                                  _builder.append("\t");
                                  _builder.append("\t\t\t", "\t");
                                  _builder.append("\"Time\":\"");
                                  double _dVal_54 = param.getCheck().getReference().getNotsame().getAtmost().getTime().getDVal();
                                  _builder.append(_dVal_54, "\t");
                                  _builder.append("\",");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("\t");
                                  _builder.append("\t\t\t", "\t");
                                  _builder.append("\"Unit\":\"");
                                  String _time_37 = param.getCheck().getReference().getNotsame().getAtmost().getUnit().getTime();
                                  _builder.append(_time_37, "\t");
                                  _builder.append("\"");
                                  _builder.newLineIfNotEmpty();
                                } else {
                                  _builder.append("\t");
                                  _builder.append("\t\t\t", "\t");
                                  _builder.append("\"Time\":\"null\",");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("\t");
                                  _builder.append("\t\t\t", "\t");
                                  _builder.append("\"Unit\":\"null\"");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            } else {
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Type\":\"null\",");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Time\":\"null\",\t\t\t");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("\t\t\t", "\t");
                              _builder.append("\"Unit\":\"null\"");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                      _builder.append("\t");
                      _builder.append("\t\t", "\t");
                      _builder.append("}");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      _builder.append("},");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
        }
        {
          EList<FailReason> _failReason = param.getCheck().getFailReason();
          for(final FailReason failreason : _failReason) {
            _builder.append("\t\t");
            _builder.append("\"FailReason\":{");
            _builder.newLineIfNotEmpty();
            {
              HighPeak _highPeak = failreason.getReason().getHighPeak();
              boolean _tripleNotEquals_116 = (_highPeak != null);
              if (_tripleNotEquals_116) {
                _builder.append("\t\t");
                _builder.append("\t", "\t\t");
                _builder.append("\"Type\":\"HighPeak\",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t", "\t\t");
                _builder.append("\"Cant\":\"");
                double _dVal_55 = failreason.getReason().getHighPeak().getCant().getDVal();
                _builder.append(_dVal_55, "\t\t");
                _builder.append("\",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t", "\t\t");
                _builder.append("\"NPeaks\":\"null\",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t", "\t\t");
                _builder.append("\"Time\":\"null\",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t", "\t\t");
                _builder.append("\"Unit\":\"null\"");
                _builder.newLineIfNotEmpty();
              } else {
                HighTime _highTime = failreason.getReason().getHighTime();
                boolean _tripleNotEquals_117 = (_highTime != null);
                if (_tripleNotEquals_117) {
                  _builder.append("\t\t");
                  _builder.append("\t", "\t\t");
                  _builder.append("\"Type\":\"HighTime\",");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("\t", "\t\t");
                  _builder.append("\"Cant\":\"");
                  double _dVal_56 = failreason.getReason().getHighTime().getCant().getDVal();
                  _builder.append(_dVal_56, "\t\t");
                  _builder.append("\",");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("\t", "\t\t");
                  _builder.append("\"NPeaks\":\"null\",");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("\t", "\t\t");
                  _builder.append("\"Time\":\"");
                  double _dVal_57 = failreason.getReason().getHighTime().getTime().getDVal();
                  _builder.append(_dVal_57, "\t\t");
                  _builder.append("\",");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("\t", "\t\t");
                  _builder.append("\"Unit\":\"");
                  String _time_38 = failreason.getReason().getHighTime().getUnit().getTime();
                  _builder.append(_time_38, "\t\t");
                  _builder.append("\"");
                  _builder.newLineIfNotEmpty();
                } else {
                  XPeaks _xPeaks = failreason.getReason().getXPeaks();
                  boolean _tripleNotEquals_118 = (_xPeaks != null);
                  if (_tripleNotEquals_118) {
                    _builder.append("\t\t");
                    _builder.append("\t", "\t\t");
                    _builder.append("\"Type\":\"XPeaks\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t", "\t\t");
                    _builder.append("\"Cant\":\"");
                    double _dVal_58 = failreason.getReason().getXPeaks().getCant().getDVal();
                    _builder.append(_dVal_58, "\t\t");
                    _builder.append("\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t", "\t\t");
                    _builder.append("\"NPeaks\":\"");
                    double _dVal_59 = failreason.getReason().getXPeaks().getNPeaks().getDVal();
                    _builder.append(_dVal_59, "\t\t");
                    _builder.append("\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t", "\t\t");
                    _builder.append("\"Time\":\"");
                    double _dVal_60 = failreason.getReason().getXPeaks().getTime().getDVal();
                    _builder.append(_dVal_60, "\t\t");
                    _builder.append("\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t", "\t\t");
                    _builder.append("\"Unit\":\"");
                    String _time_39 = failreason.getReason().getXPeaks().getUnit().getTime();
                    _builder.append(_time_39, "\t\t");
                    _builder.append("\"");
                    _builder.newLineIfNotEmpty();
                  } else {
                    ConstDeg _constDeg = failreason.getReason().getConstDeg();
                    boolean _tripleNotEquals_119 = (_constDeg != null);
                    if (_tripleNotEquals_119) {
                      _builder.append("\t\t");
                      _builder.append("\t", "\t\t");
                      _builder.append("\"Type\":\"ConstantDegradation\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      _builder.append("\t", "\t\t");
                      _builder.append("\"Cant\":\"");
                      double _dVal_61 = failreason.getReason().getConstDeg().getCant().getDVal();
                      _builder.append(_dVal_61, "\t\t");
                      _builder.append("\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      _builder.append("\t", "\t\t");
                      _builder.append("\"NPeaks\":\"null\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      _builder.append("\t", "\t\t");
                      _builder.append("\"Time\":\"null\",");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      _builder.append("\t", "\t\t");
                      _builder.append("\"Unit\":\"null\"");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
            _builder.append("\t\t");
            _builder.append("},");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("\t", "\t");
        _builder.append("\"Description\":\"");
        String _value_10 = param.getCheck().getDescription().getValue();
        _builder.append(_value_10, "\t");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
        {
          int _plusPlus = cont++;
          int _size = CPS.getOracle().size();
          int _minus = (_size - 1);
          boolean _notEquals = (_plusPlus != _minus);
          if (_notEquals) {
            _builder.append("\t");
            _builder.append("},");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("}");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_oracle_h(final Oracle param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#ifndef ");
    String _upperCase = param.getName().toString().toUpperCase();
    _builder.append(_upperCase);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.append("#define ");
    String _upperCase_1 = param.getName().toString().toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    {
      if (((param.getWhen() != null) && (param.getWhile() != null))) {
        {
          String _name = param.getCheck().getName();
          boolean _tripleNotEquals = (_name != null);
          if (_tripleNotEquals) {
            {
              Upper _upper = param.getCheck().getReference().getUpper();
              boolean _tripleNotEquals_1 = (_upper != null);
              if (_tripleNotEquals_1) {
                _builder.append("struct Ret{");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("int assert;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("double diff;");
                _builder.newLine();
                _builder.append("};");
                _builder.newLine();
                _builder.append("struct Ret ");
                String _string = param.getName().toString();
                _builder.append(_string);
                _builder.append(" (");
                {
                  boolean _equals = param.getCheck().getName().equals("timeStamp");
                  boolean _not = (!_equals);
                  if (_not) {
                    _builder.append("double ");
                    String _string_1 = param.getCheck().getName().toString();
                    _builder.append(_string_1);
                    _builder.append("[], ");
                  }
                }
                {
                  EList<AbstractElement2> _elements = param.getWhen().getEm().getElements();
                  for(final AbstractElement2 par1 : _elements) {
                    {
                      if (((par1.getName() != null) && (!par1.getName().equals("timeStamp")))) {
                        _builder.append("double ");
                        String _name_1 = par1.getName();
                        _builder.append(_name_1);
                        _builder.append("[],");
                      }
                    }
                  }
                }
                {
                  EList<AbstractElement2> _elements_1 = param.getWhile().getEm().getElements();
                  for(final AbstractElement2 par2 : _elements_1) {
                    {
                      if (((par2.getName() != null) && (!par2.getName().equals("timeStamp")))) {
                        _builder.append("double ");
                        String _name_2 = par2.getName();
                        _builder.append(_name_2);
                        _builder.append("[],");
                      }
                    }
                  }
                }
                _builder.append(" double timeStamp[]);");
                _builder.newLineIfNotEmpty();
              } else {
                Lower _lower = param.getCheck().getReference().getLower();
                boolean _tripleNotEquals_2 = (_lower != null);
                if (_tripleNotEquals_2) {
                  _builder.append("struct Ret{");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("int assert;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("double diff;");
                  _builder.newLine();
                  _builder.append("};");
                  _builder.newLine();
                  _builder.append("struct Ret ");
                  String _string_2 = param.getName().toString();
                  _builder.append(_string_2);
                  _builder.append(" (");
                  {
                    boolean _equals_1 = param.getCheck().getName().equals("timeStamp");
                    boolean _not_1 = (!_equals_1);
                    if (_not_1) {
                      _builder.append("double ");
                      String _string_3 = param.getCheck().getName().toString();
                      _builder.append(_string_3);
                      _builder.append("[], ");
                    }
                  }
                  {
                    EList<AbstractElement2> _elements_2 = param.getWhen().getEm().getElements();
                    for(final AbstractElement2 par1_1 : _elements_2) {
                      {
                        if (((par1_1.getName() != null) && (!par1_1.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_3 = par1_1.getName();
                          _builder.append(_name_3);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  {
                    EList<AbstractElement2> _elements_3 = param.getWhile().getEm().getElements();
                    for(final AbstractElement2 par2_1 : _elements_3) {
                      {
                        if (((par2_1.getName() != null) && (!par2_1.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_4 = par2_1.getName();
                          _builder.append(_name_4);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  _builder.append(" double timeStamp[]);");
                  _builder.newLineIfNotEmpty();
                } else {
                  Same _same = param.getCheck().getReference().getSame();
                  boolean _tripleNotEquals_3 = (_same != null);
                  if (_tripleNotEquals_3) {
                    _builder.append("struct Ret{");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("int assert;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("double diff;");
                    _builder.newLine();
                    _builder.append("};");
                    _builder.newLine();
                    _builder.append("struct Ret ");
                    String _string_4 = param.getName().toString();
                    _builder.append(_string_4);
                    _builder.append(" (");
                    {
                      boolean _equals_2 = param.getCheck().getName().equals("timeStamp");
                      boolean _not_2 = (!_equals_2);
                      if (_not_2) {
                        _builder.append("double ");
                        String _string_5 = param.getCheck().getName().toString();
                        _builder.append(_string_5);
                        _builder.append("[], ");
                      }
                    }
                    {
                      EList<AbstractElement2> _elements_4 = param.getWhen().getEm().getElements();
                      for(final AbstractElement2 par1_2 : _elements_4) {
                        {
                          if (((par1_2.getName() != null) && (!par1_2.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_5 = par1_2.getName();
                            _builder.append(_name_5);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    {
                      EList<AbstractElement2> _elements_5 = param.getWhile().getEm().getElements();
                      for(final AbstractElement2 par2_2 : _elements_5) {
                        {
                          if (((par2_2.getName() != null) && (!par2_2.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_6 = par2_2.getName();
                            _builder.append(_name_6);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" double timeStamp[]);");
                    _builder.newLineIfNotEmpty();
                  } else {
                    NotSame _notsame = param.getCheck().getReference().getNotsame();
                    boolean _tripleNotEquals_4 = (_notsame != null);
                    if (_tripleNotEquals_4) {
                      _builder.append("struct Ret{");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("int assert;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("double diff;");
                      _builder.newLine();
                      _builder.append("};");
                      _builder.newLine();
                      _builder.append("struct Ret ");
                      String _string_6 = param.getName().toString();
                      _builder.append(_string_6);
                      _builder.append(" (");
                      {
                        boolean _equals_3 = param.getCheck().getName().equals("timeStamp");
                        boolean _not_3 = (!_equals_3);
                        if (_not_3) {
                          _builder.append("double ");
                          String _string_7 = param.getCheck().getName().toString();
                          _builder.append(_string_7);
                          _builder.append("[], ");
                        }
                      }
                      {
                        EList<AbstractElement2> _elements_6 = param.getWhen().getEm().getElements();
                        for(final AbstractElement2 par1_3 : _elements_6) {
                          {
                            if (((par1_3.getName() != null) && (!par1_3.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_7 = par1_3.getName();
                              _builder.append(_name_7);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      {
                        EList<AbstractElement2> _elements_7 = param.getWhile().getEm().getElements();
                        for(final AbstractElement2 par2_3 : _elements_7) {
                          {
                            if (((par2_3.getName() != null) && (!par2_3.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_8 = par2_3.getName();
                              _builder.append(_name_8);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" double timeStamp[]);");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t");
                      _builder.newLine();
                    } else {
                      Range _range = param.getCheck().getReference().getRange();
                      boolean _tripleNotEquals_5 = (_range != null);
                      if (_tripleNotEquals_5) {
                        _builder.append("struct Ret{");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("int assert;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("double diff_up;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("double diff_down;");
                        _builder.newLine();
                        _builder.append("};");
                        _builder.newLine();
                        _builder.append("struct Ret ");
                        String _string_8 = param.getName().toString();
                        _builder.append(_string_8);
                        _builder.append(" (");
                        {
                          boolean _equals_4 = param.getCheck().getName().equals("timeStamp");
                          boolean _not_4 = (!_equals_4);
                          if (_not_4) {
                            _builder.append("double ");
                            String _string_9 = param.getCheck().getName().toString();
                            _builder.append(_string_9);
                            _builder.append("[], ");
                          }
                        }
                        {
                          EList<AbstractElement2> _elements_8 = param.getWhen().getEm().getElements();
                          for(final AbstractElement2 par1_4 : _elements_8) {
                            {
                              if (((par1_4.getName() != null) && (!par1_4.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_9 = par1_4.getName();
                                _builder.append(_name_9);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        {
                          EList<AbstractElement2> _elements_9 = param.getWhile().getEm().getElements();
                          for(final AbstractElement2 par2_4 : _elements_9) {
                            {
                              if (((par2_4.getName() != null) && (!par2_4.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_10 = par2_4.getName();
                                _builder.append(_name_10);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" double timeStamp[]);");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Gap _gap = param.getCheck().getReference().getGap();
                        boolean _tripleNotEquals_6 = (_gap != null);
                        if (_tripleNotEquals_6) {
                          _builder.append("struct Ret{");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("int assert;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("double diff_up;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("double diff_down;");
                          _builder.newLine();
                          _builder.append("};");
                          _builder.newLine();
                          _builder.append("struct Ret ");
                          String _string_10 = param.getName().toString();
                          _builder.append(_string_10);
                          _builder.append(" (");
                          {
                            boolean _equals_5 = param.getCheck().getName().equals("timeStamp");
                            boolean _not_5 = (!_equals_5);
                            if (_not_5) {
                              _builder.append("double ");
                              String _string_11 = param.getCheck().getName().toString();
                              _builder.append(_string_11);
                              _builder.append("[], ");
                            }
                          }
                          {
                            EList<AbstractElement2> _elements_10 = param.getWhen().getEm().getElements();
                            for(final AbstractElement2 par1_5 : _elements_10) {
                              {
                                if (((par1_5.getName() != null) && (!par1_5.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_11 = par1_5.getName();
                                  _builder.append(_name_11);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          {
                            EList<AbstractElement2> _elements_11 = param.getWhile().getEm().getElements();
                            for(final AbstractElement2 par2_5 : _elements_11) {
                              {
                                if (((par2_5.getName() != null) && (!par2_5.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_12 = par2_5.getName();
                                  _builder.append(_name_12);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" double timeStamp[]);");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            {
              Upper _upper_1 = param.getCheck().getReference().getUpper();
              boolean _tripleNotEquals_7 = (_upper_1 != null);
              if (_tripleNotEquals_7) {
                _builder.append("struct Ret{");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("int assert;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("double diff;");
                _builder.newLine();
                _builder.append("};");
                _builder.newLine();
                _builder.append("struct Ret ");
                String _string_12 = param.getName().toString();
                _builder.append(_string_12);
                _builder.append(" (");
                {
                  EList<AbstractElement2> _elements_12 = param.getCheck().getEm().getElements();
                  for(final AbstractElement2 par3 : _elements_12) {
                    {
                      if (((par3.getName() != null) && (!par3.getName().equals("timeStamp")))) {
                        _builder.append("double ");
                        String _name_13 = par3.getName();
                        _builder.append(_name_13);
                        _builder.append("[],");
                      }
                    }
                  }
                }
                _builder.append(" ");
                {
                  EList<AbstractElement2> _elements_13 = param.getWhen().getEm().getElements();
                  for(final AbstractElement2 par1_6 : _elements_13) {
                    {
                      if (((par1_6.getName() != null) && (!par1_6.getName().equals("timeStamp")))) {
                        _builder.append("double ");
                        String _name_14 = par1_6.getName();
                        _builder.append(_name_14);
                        _builder.append("[],");
                      }
                    }
                  }
                }
                {
                  EList<AbstractElement2> _elements_14 = param.getWhile().getEm().getElements();
                  for(final AbstractElement2 par2_6 : _elements_14) {
                    {
                      if (((par2_6.getName() != null) && (!par2_6.getName().equals("timeStamp")))) {
                        _builder.append("double ");
                        String _name_15 = par2_6.getName();
                        _builder.append(_name_15);
                        _builder.append("[],");
                      }
                    }
                  }
                }
                _builder.append(" double timeStamp[]);");
                _builder.newLineIfNotEmpty();
              } else {
                Lower _lower_1 = param.getCheck().getReference().getLower();
                boolean _tripleNotEquals_8 = (_lower_1 != null);
                if (_tripleNotEquals_8) {
                  _builder.append("struct Ret{");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("int assert;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("double diff;");
                  _builder.newLine();
                  _builder.append("};");
                  _builder.newLine();
                  _builder.append("struct Ret ");
                  String _string_13 = param.getName().toString();
                  _builder.append(_string_13);
                  _builder.append(" (");
                  {
                    EList<AbstractElement2> _elements_15 = param.getCheck().getEm().getElements();
                    for(final AbstractElement2 par3_1 : _elements_15) {
                      {
                        if (((par3_1.getName() != null) && (!par3_1.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_16 = par3_1.getName();
                          _builder.append(_name_16);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  _builder.append(" ");
                  {
                    EList<AbstractElement2> _elements_16 = param.getWhen().getEm().getElements();
                    for(final AbstractElement2 par1_7 : _elements_16) {
                      {
                        if (((par1_7.getName() != null) && (!par1_7.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_17 = par1_7.getName();
                          _builder.append(_name_17);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  {
                    EList<AbstractElement2> _elements_17 = param.getWhile().getEm().getElements();
                    for(final AbstractElement2 par2_7 : _elements_17) {
                      {
                        if (((par2_7.getName() != null) && (!par2_7.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_18 = par2_7.getName();
                          _builder.append(_name_18);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  _builder.append(" double timeStamp[]);");
                  _builder.newLineIfNotEmpty();
                } else {
                  Same _same_1 = param.getCheck().getReference().getSame();
                  boolean _tripleNotEquals_9 = (_same_1 != null);
                  if (_tripleNotEquals_9) {
                    _builder.append("struct Ret{");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("int assert;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("double diff;");
                    _builder.newLine();
                    _builder.append("};");
                    _builder.newLine();
                    _builder.append("struct Ret ");
                    String _string_14 = param.getName().toString();
                    _builder.append(_string_14);
                    _builder.append(" (");
                    {
                      EList<AbstractElement2> _elements_18 = param.getCheck().getEm().getElements();
                      for(final AbstractElement2 par3_2 : _elements_18) {
                        {
                          if (((par3_2.getName() != null) && (!par3_2.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_19 = par3_2.getName();
                            _builder.append(_name_19);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" ");
                    {
                      EList<AbstractElement2> _elements_19 = param.getWhen().getEm().getElements();
                      for(final AbstractElement2 par1_8 : _elements_19) {
                        {
                          if (((par1_8.getName() != null) && (!par1_8.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_20 = par1_8.getName();
                            _builder.append(_name_20);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    {
                      EList<AbstractElement2> _elements_20 = param.getWhile().getEm().getElements();
                      for(final AbstractElement2 par2_8 : _elements_20) {
                        {
                          if (((par2_8.getName() != null) && (!par2_8.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_21 = par2_8.getName();
                            _builder.append(_name_21);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" double timeStamp[]);");
                    _builder.newLineIfNotEmpty();
                  } else {
                    NotSame _notsame_1 = param.getCheck().getReference().getNotsame();
                    boolean _tripleNotEquals_10 = (_notsame_1 != null);
                    if (_tripleNotEquals_10) {
                      _builder.append("struct Ret{");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("int assert;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("double diff;");
                      _builder.newLine();
                      _builder.append("};");
                      _builder.newLine();
                      _builder.append("struct Ret ");
                      String _string_15 = param.getName().toString();
                      _builder.append(_string_15);
                      _builder.append(" (");
                      {
                        EList<AbstractElement2> _elements_21 = param.getCheck().getEm().getElements();
                        for(final AbstractElement2 par3_3 : _elements_21) {
                          {
                            if (((par3_3.getName() != null) && (!par3_3.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_22 = par3_3.getName();
                              _builder.append(_name_22);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" ");
                      {
                        EList<AbstractElement2> _elements_22 = param.getWhen().getEm().getElements();
                        for(final AbstractElement2 par1_9 : _elements_22) {
                          {
                            if (((par1_9.getName() != null) && (!par1_9.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_23 = par1_9.getName();
                              _builder.append(_name_23);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      {
                        EList<AbstractElement2> _elements_23 = param.getWhile().getEm().getElements();
                        for(final AbstractElement2 par2_9 : _elements_23) {
                          {
                            if (((par2_9.getName() != null) && (!par2_9.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_24 = par2_9.getName();
                              _builder.append(_name_24);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" double timeStamp[]);");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t");
                      _builder.newLine();
                    } else {
                      Range _range_1 = param.getCheck().getReference().getRange();
                      boolean _tripleNotEquals_11 = (_range_1 != null);
                      if (_tripleNotEquals_11) {
                        _builder.append("struct Ret{");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("int assert;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("double diff_up;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("double diff_down;");
                        _builder.newLine();
                        _builder.append("};");
                        _builder.newLine();
                        _builder.append("struct Ret ");
                        String _string_16 = param.getName().toString();
                        _builder.append(_string_16);
                        _builder.append(" (");
                        {
                          EList<AbstractElement2> _elements_24 = param.getCheck().getEm().getElements();
                          for(final AbstractElement2 par3_4 : _elements_24) {
                            {
                              if (((par3_4.getName() != null) && (!par3_4.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_25 = par3_4.getName();
                                _builder.append(_name_25);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" ");
                        {
                          EList<AbstractElement2> _elements_25 = param.getWhen().getEm().getElements();
                          for(final AbstractElement2 par1_10 : _elements_25) {
                            {
                              if (((par1_10.getName() != null) && (!par1_10.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_26 = par1_10.getName();
                                _builder.append(_name_26);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        {
                          EList<AbstractElement2> _elements_26 = param.getWhile().getEm().getElements();
                          for(final AbstractElement2 par2_10 : _elements_26) {
                            {
                              if (((par2_10.getName() != null) && (!par2_10.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_27 = par2_10.getName();
                                _builder.append(_name_27);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" double timeStamp[]);");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Gap _gap_1 = param.getCheck().getReference().getGap();
                        boolean _tripleNotEquals_12 = (_gap_1 != null);
                        if (_tripleNotEquals_12) {
                          _builder.append("struct Ret{");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("int assert;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("double diff_up;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("double diff_down;");
                          _builder.newLine();
                          _builder.append("};");
                          _builder.newLine();
                          _builder.append("struct Ret ");
                          String _string_17 = param.getName().toString();
                          _builder.append(_string_17);
                          _builder.append(" (");
                          {
                            EList<AbstractElement2> _elements_27 = param.getCheck().getEm().getElements();
                            for(final AbstractElement2 par3_5 : _elements_27) {
                              {
                                if (((par3_5.getName() != null) && (!par3_5.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_28 = par3_5.getName();
                                  _builder.append(_name_28);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" ");
                          {
                            EList<AbstractElement2> _elements_28 = param.getWhen().getEm().getElements();
                            for(final AbstractElement2 par1_11 : _elements_28) {
                              {
                                if (((par1_11.getName() != null) && (!par1_11.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_29 = par1_11.getName();
                                  _builder.append(_name_29);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          {
                            EList<AbstractElement2> _elements_29 = param.getWhile().getEm().getElements();
                            for(final AbstractElement2 par2_11 : _elements_29) {
                              {
                                if (((par2_11.getName() != null) && (!par2_11.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_30 = par2_11.getName();
                                  _builder.append(_name_30);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" double timeStamp[]);");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        if (((param.getWhen() == null) && (param.getWhile() != null))) {
          {
            String _name_31 = param.getCheck().getName();
            boolean _tripleNotEquals_13 = (_name_31 != null);
            if (_tripleNotEquals_13) {
              {
                Upper _upper_2 = param.getCheck().getReference().getUpper();
                boolean _tripleNotEquals_14 = (_upper_2 != null);
                if (_tripleNotEquals_14) {
                  _builder.append("struct Ret{");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("int assert;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("double diff;");
                  _builder.newLine();
                  _builder.append("};");
                  _builder.newLine();
                  _builder.append("struct Ret ");
                  String _string_18 = param.getName().toString();
                  _builder.append(_string_18);
                  _builder.append(" (");
                  {
                    boolean _equals_6 = param.getCheck().getName().equals("timeStamp");
                    boolean _not_6 = (!_equals_6);
                    if (_not_6) {
                      _builder.append("double ");
                      String _string_19 = param.getCheck().getName().toString();
                      _builder.append(_string_19);
                      _builder.append("[], ");
                    }
                  }
                  {
                    EList<AbstractElement2> _elements_30 = param.getWhile().getEm().getElements();
                    for(final AbstractElement2 par2_12 : _elements_30) {
                      {
                        if (((par2_12.getName() != null) && (!par2_12.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_32 = par2_12.getName();
                          _builder.append(_name_32);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  _builder.append(" double timeStamp[]);");
                  _builder.newLineIfNotEmpty();
                } else {
                  Lower _lower_2 = param.getCheck().getReference().getLower();
                  boolean _tripleNotEquals_15 = (_lower_2 != null);
                  if (_tripleNotEquals_15) {
                    _builder.append("struct Ret{");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("int assert;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("double diff;");
                    _builder.newLine();
                    _builder.append("};");
                    _builder.newLine();
                    _builder.append("struct Ret ");
                    String _string_20 = param.getName().toString();
                    _builder.append(_string_20);
                    _builder.append(" (");
                    {
                      boolean _equals_7 = param.getCheck().getName().equals("timeStamp");
                      boolean _not_7 = (!_equals_7);
                      if (_not_7) {
                        _builder.append("double ");
                        String _string_21 = param.getCheck().getName().toString();
                        _builder.append(_string_21);
                        _builder.append("[], ");
                      }
                    }
                    {
                      EList<AbstractElement2> _elements_31 = param.getWhile().getEm().getElements();
                      for(final AbstractElement2 par2_13 : _elements_31) {
                        {
                          if (((par2_13.getName() != null) && (!par2_13.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_33 = par2_13.getName();
                            _builder.append(_name_33);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" double timeStamp[]);");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Same _same_2 = param.getCheck().getReference().getSame();
                    boolean _tripleNotEquals_16 = (_same_2 != null);
                    if (_tripleNotEquals_16) {
                      _builder.append("struct Ret{");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("int assert;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("double diff;");
                      _builder.newLine();
                      _builder.append("};");
                      _builder.newLine();
                      _builder.append("struct Ret ");
                      String _string_22 = param.getName().toString();
                      _builder.append(_string_22);
                      _builder.append(" (");
                      {
                        boolean _equals_8 = param.getCheck().getName().equals("timeStamp");
                        boolean _not_8 = (!_equals_8);
                        if (_not_8) {
                          _builder.append("double ");
                          String _string_23 = param.getCheck().getName().toString();
                          _builder.append(_string_23);
                          _builder.append("[], ");
                        }
                      }
                      {
                        EList<AbstractElement2> _elements_32 = param.getWhile().getEm().getElements();
                        for(final AbstractElement2 par2_14 : _elements_32) {
                          {
                            if (((par2_14.getName() != null) && (!par2_14.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_34 = par2_14.getName();
                              _builder.append(_name_34);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" double timeStamp[]);");
                      _builder.newLineIfNotEmpty();
                    } else {
                      NotSame _notsame_2 = param.getCheck().getReference().getNotsame();
                      boolean _tripleNotEquals_17 = (_notsame_2 != null);
                      if (_tripleNotEquals_17) {
                        _builder.append("struct Ret{");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("int assert;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("double diff;");
                        _builder.newLine();
                        _builder.append("};");
                        _builder.newLine();
                        _builder.append("struct Ret ");
                        String _string_24 = param.getName().toString();
                        _builder.append(_string_24);
                        _builder.append(" (");
                        {
                          boolean _equals_9 = param.getCheck().getName().equals("timeStamp");
                          boolean _not_9 = (!_equals_9);
                          if (_not_9) {
                            _builder.append("double ");
                            String _string_25 = param.getCheck().getName().toString();
                            _builder.append(_string_25);
                            _builder.append("[], ");
                          }
                        }
                        {
                          EList<AbstractElement2> _elements_33 = param.getWhile().getEm().getElements();
                          for(final AbstractElement2 par2_15 : _elements_33) {
                            {
                              if (((par2_15.getName() != null) && (!par2_15.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_35 = par2_15.getName();
                                _builder.append(_name_35);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" double timeStamp[]);");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Range _range_2 = param.getCheck().getReference().getRange();
                        boolean _tripleNotEquals_18 = (_range_2 != null);
                        if (_tripleNotEquals_18) {
                          _builder.append("struct Ret{");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("int assert;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("double diff_up;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("double diff_down;");
                          _builder.newLine();
                          _builder.append("};");
                          _builder.newLine();
                          _builder.append("struct Ret ");
                          String _string_26 = param.getName().toString();
                          _builder.append(_string_26);
                          _builder.append(" (");
                          {
                            boolean _equals_10 = param.getCheck().getName().equals("timeStamp");
                            boolean _not_10 = (!_equals_10);
                            if (_not_10) {
                              _builder.append("double ");
                              String _string_27 = param.getCheck().getName().toString();
                              _builder.append(_string_27);
                              _builder.append("[], ");
                            }
                          }
                          {
                            EList<AbstractElement2> _elements_34 = param.getWhile().getEm().getElements();
                            for(final AbstractElement2 par2_16 : _elements_34) {
                              {
                                if (((par2_16.getName() != null) && (!par2_16.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_36 = par2_16.getName();
                                  _builder.append(_name_36);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" double timeStamp[]);");
                          _builder.newLineIfNotEmpty();
                        } else {
                          Gap _gap_2 = param.getCheck().getReference().getGap();
                          boolean _tripleNotEquals_19 = (_gap_2 != null);
                          if (_tripleNotEquals_19) {
                            _builder.append("struct Ret{");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("int assert;");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("double diff_up;");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("double diff_down;");
                            _builder.newLine();
                            _builder.append("};");
                            _builder.newLine();
                            _builder.append("struct Ret ");
                            String _string_28 = param.getName().toString();
                            _builder.append(_string_28);
                            _builder.append(" (");
                            {
                              boolean _equals_11 = param.getCheck().getName().equals("timeStamp");
                              boolean _not_11 = (!_equals_11);
                              if (_not_11) {
                                _builder.append("double ");
                                String _string_29 = param.getCheck().getName().toString();
                                _builder.append(_string_29);
                                _builder.append("[], ");
                              }
                            }
                            {
                              EList<AbstractElement2> _elements_35 = param.getWhile().getEm().getElements();
                              for(final AbstractElement2 par2_17 : _elements_35) {
                                {
                                  if (((par2_17.getName() != null) && (!par2_17.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_37 = par2_17.getName();
                                    _builder.append(_name_37);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append(" double timeStamp[]);");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              {
                Upper _upper_3 = param.getCheck().getReference().getUpper();
                boolean _tripleNotEquals_20 = (_upper_3 != null);
                if (_tripleNotEquals_20) {
                  _builder.append("struct Ret{");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("int assert;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("double diff;");
                  _builder.newLine();
                  _builder.append("};");
                  _builder.newLine();
                  _builder.append("struct Ret ");
                  String _string_30 = param.getName().toString();
                  _builder.append(_string_30);
                  _builder.append(" (");
                  {
                    EList<AbstractElement2> _elements_36 = param.getCheck().getEm().getElements();
                    for(final AbstractElement2 par3_6 : _elements_36) {
                      {
                        if (((par3_6.getName() != null) && (!par3_6.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_38 = par3_6.getName();
                          _builder.append(_name_38);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  _builder.append(" ");
                  {
                    EList<AbstractElement2> _elements_37 = param.getWhile().getEm().getElements();
                    for(final AbstractElement2 par2_18 : _elements_37) {
                      {
                        if (((par2_18.getName() != null) && (!par2_18.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_39 = par2_18.getName();
                          _builder.append(_name_39);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  _builder.append(" double timeStamp[]);");
                  _builder.newLineIfNotEmpty();
                } else {
                  Lower _lower_3 = param.getCheck().getReference().getLower();
                  boolean _tripleNotEquals_21 = (_lower_3 != null);
                  if (_tripleNotEquals_21) {
                    _builder.append("struct Ret{");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("int assert;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("double diff;");
                    _builder.newLine();
                    _builder.append("};");
                    _builder.newLine();
                    _builder.append("struct Ret ");
                    String _string_31 = param.getName().toString();
                    _builder.append(_string_31);
                    _builder.append(" (");
                    {
                      EList<AbstractElement2> _elements_38 = param.getCheck().getEm().getElements();
                      for(final AbstractElement2 par3_7 : _elements_38) {
                        {
                          if (((par3_7.getName() != null) && (!par3_7.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_40 = par3_7.getName();
                            _builder.append(_name_40);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" ");
                    {
                      EList<AbstractElement2> _elements_39 = param.getWhile().getEm().getElements();
                      for(final AbstractElement2 par2_19 : _elements_39) {
                        {
                          if (((par2_19.getName() != null) && (!par2_19.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_41 = par2_19.getName();
                            _builder.append(_name_41);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" double timeStamp[]);");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Same _same_3 = param.getCheck().getReference().getSame();
                    boolean _tripleNotEquals_22 = (_same_3 != null);
                    if (_tripleNotEquals_22) {
                      _builder.append("struct Ret{");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("int assert;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("double diff;");
                      _builder.newLine();
                      _builder.append("};");
                      _builder.newLine();
                      _builder.append("struct Ret ");
                      String _string_32 = param.getName().toString();
                      _builder.append(_string_32);
                      _builder.append(" (");
                      {
                        EList<AbstractElement2> _elements_40 = param.getCheck().getEm().getElements();
                        for(final AbstractElement2 par3_8 : _elements_40) {
                          {
                            String _name_42 = par3_8.getName();
                            boolean _tripleNotEquals_23 = (_name_42 != null);
                            if (_tripleNotEquals_23) {
                              _builder.append("double ");
                              String _name_43 = par3_8.getName();
                              _builder.append(_name_43);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" ");
                      {
                        EList<AbstractElement2> _elements_41 = param.getWhile().getEm().getElements();
                        for(final AbstractElement2 par2_20 : _elements_41) {
                          {
                            if (((par2_20.getName() != null) && (!par2_20.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_44 = par2_20.getName();
                              _builder.append(_name_44);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" double timeStamp[]);");
                      _builder.newLineIfNotEmpty();
                    } else {
                      NotSame _notsame_3 = param.getCheck().getReference().getNotsame();
                      boolean _tripleNotEquals_24 = (_notsame_3 != null);
                      if (_tripleNotEquals_24) {
                        _builder.append("struct Ret{");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("int assert;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("double diff;");
                        _builder.newLine();
                        _builder.append("};");
                        _builder.newLine();
                        _builder.append("struct Ret ");
                        String _string_33 = param.getName().toString();
                        _builder.append(_string_33);
                        _builder.append(" (");
                        {
                          EList<AbstractElement2> _elements_42 = param.getCheck().getEm().getElements();
                          for(final AbstractElement2 par3_9 : _elements_42) {
                            {
                              if (((par3_9.getName() != null) && (!par3_9.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_45 = par3_9.getName();
                                _builder.append(_name_45);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" ");
                        {
                          EList<AbstractElement2> _elements_43 = param.getWhile().getEm().getElements();
                          for(final AbstractElement2 par2_21 : _elements_43) {
                            {
                              if (((par2_21.getName() != null) && (!par2_21.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_46 = par2_21.getName();
                                _builder.append(_name_46);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" double timeStamp[]);");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Range _range_3 = param.getCheck().getReference().getRange();
                        boolean _tripleNotEquals_25 = (_range_3 != null);
                        if (_tripleNotEquals_25) {
                          _builder.append("struct Ret{");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("int assert;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("double diff_up;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("double diff_down;");
                          _builder.newLine();
                          _builder.append("};");
                          _builder.newLine();
                          _builder.append("struct Ret ");
                          String _string_34 = param.getName().toString();
                          _builder.append(_string_34);
                          _builder.append(" (");
                          {
                            EList<AbstractElement2> _elements_44 = param.getCheck().getEm().getElements();
                            for(final AbstractElement2 par3_10 : _elements_44) {
                              {
                                if (((par3_10.getName() != null) && (!par3_10.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_47 = par3_10.getName();
                                  _builder.append(_name_47);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" ");
                          {
                            EList<AbstractElement2> _elements_45 = param.getWhile().getEm().getElements();
                            for(final AbstractElement2 par2_22 : _elements_45) {
                              {
                                if (((par2_22.getName() != null) && (!par2_22.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_48 = par2_22.getName();
                                  _builder.append(_name_48);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" double timeStamp[]);");
                          _builder.newLineIfNotEmpty();
                        } else {
                          Gap _gap_3 = param.getCheck().getReference().getGap();
                          boolean _tripleNotEquals_26 = (_gap_3 != null);
                          if (_tripleNotEquals_26) {
                            _builder.append("struct Ret{");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("int assert;");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("double diff_up;");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("double diff_down;");
                            _builder.newLine();
                            _builder.append("};");
                            _builder.newLine();
                            _builder.append("struct Ret ");
                            String _string_35 = param.getName().toString();
                            _builder.append(_string_35);
                            _builder.append(" (");
                            {
                              EList<AbstractElement2> _elements_46 = param.getCheck().getEm().getElements();
                              for(final AbstractElement2 par3_11 : _elements_46) {
                                {
                                  if (((par3_11.getName() != null) && (!par3_11.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_49 = par3_11.getName();
                                    _builder.append(_name_49);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append(" ");
                            {
                              EList<AbstractElement2> _elements_47 = param.getWhile().getEm().getElements();
                              for(final AbstractElement2 par2_23 : _elements_47) {
                                {
                                  if (((par2_23.getName() != null) && (!par2_23.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_50 = par2_23.getName();
                                    _builder.append(_name_50);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append(" double timeStamp[]);");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          if (((param.getWhen() != null) && (param.getWhile() == null))) {
            {
              String _name_51 = param.getCheck().getName();
              boolean _tripleNotEquals_27 = (_name_51 != null);
              if (_tripleNotEquals_27) {
                {
                  Upper _upper_4 = param.getCheck().getReference().getUpper();
                  boolean _tripleNotEquals_28 = (_upper_4 != null);
                  if (_tripleNotEquals_28) {
                    _builder.append("struct Ret{");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("int assert;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("double diff;");
                    _builder.newLine();
                    _builder.append("};");
                    _builder.newLine();
                    _builder.append("struct Ret ");
                    String _string_36 = param.getName().toString();
                    _builder.append(_string_36);
                    _builder.append(" (");
                    {
                      boolean _equals_12 = param.getCheck().getName().equals("timeStamp");
                      boolean _not_12 = (!_equals_12);
                      if (_not_12) {
                        _builder.append("double ");
                        String _string_37 = param.getCheck().getName().toString();
                        _builder.append(_string_37);
                        _builder.append("[], ");
                      }
                    }
                    {
                      EList<AbstractElement2> _elements_48 = param.getWhen().getEm().getElements();
                      for(final AbstractElement2 par1_12 : _elements_48) {
                        {
                          if (((par1_12.getName() != null) && (!par1_12.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_52 = par1_12.getName();
                            _builder.append(_name_52);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" double timeStamp[]);");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Lower _lower_4 = param.getCheck().getReference().getLower();
                    boolean _tripleNotEquals_29 = (_lower_4 != null);
                    if (_tripleNotEquals_29) {
                      _builder.append("struct Ret{");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("int assert;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("double diff;");
                      _builder.newLine();
                      _builder.append("};");
                      _builder.newLine();
                      _builder.append("struct Ret ");
                      String _string_38 = param.getName().toString();
                      _builder.append(_string_38);
                      _builder.append(" (");
                      {
                        boolean _equals_13 = param.getCheck().getName().equals("timeStamp");
                        boolean _not_13 = (!_equals_13);
                        if (_not_13) {
                          _builder.append("double ");
                          String _string_39 = param.getCheck().getName().toString();
                          _builder.append(_string_39);
                          _builder.append("[], ");
                        }
                      }
                      {
                        EList<AbstractElement2> _elements_49 = param.getWhen().getEm().getElements();
                        for(final AbstractElement2 par1_13 : _elements_49) {
                          {
                            if (((par1_13.getName() != null) && (!par1_13.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_53 = par1_13.getName();
                              _builder.append(_name_53);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" double timeStamp[]);");
                      _builder.newLineIfNotEmpty();
                    } else {
                      Same _same_4 = param.getCheck().getReference().getSame();
                      boolean _tripleNotEquals_30 = (_same_4 != null);
                      if (_tripleNotEquals_30) {
                        _builder.append("struct Ret{");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("int assert;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("double diff;");
                        _builder.newLine();
                        _builder.append("};");
                        _builder.newLine();
                        _builder.append("struct Ret ");
                        String _string_40 = param.getName().toString();
                        _builder.append(_string_40);
                        _builder.append(" (");
                        {
                          boolean _equals_14 = param.getCheck().getName().equals("timeStamp");
                          boolean _not_14 = (!_equals_14);
                          if (_not_14) {
                            _builder.append("double ");
                            String _string_41 = param.getCheck().getName().toString();
                            _builder.append(_string_41);
                            _builder.append("[], ");
                          }
                        }
                        {
                          EList<AbstractElement2> _elements_50 = param.getWhen().getEm().getElements();
                          for(final AbstractElement2 par1_14 : _elements_50) {
                            {
                              if (((par1_14.getName() != null) && (!par1_14.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_54 = par1_14.getName();
                                _builder.append(_name_54);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" double timeStamp[]);");
                        _builder.newLineIfNotEmpty();
                      } else {
                        NotSame _notsame_4 = param.getCheck().getReference().getNotsame();
                        boolean _tripleNotEquals_31 = (_notsame_4 != null);
                        if (_tripleNotEquals_31) {
                          _builder.append("struct Ret{");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("int assert;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("double diff;");
                          _builder.newLine();
                          _builder.append("};");
                          _builder.newLine();
                          _builder.append("struct Ret ");
                          String _string_42 = param.getName().toString();
                          _builder.append(_string_42);
                          _builder.append(" (");
                          {
                            boolean _equals_15 = param.getCheck().getName().equals("timeStamp");
                            boolean _not_15 = (!_equals_15);
                            if (_not_15) {
                              _builder.append("double ");
                              String _string_43 = param.getCheck().getName().toString();
                              _builder.append(_string_43);
                              _builder.append("[], ");
                            }
                          }
                          {
                            EList<AbstractElement2> _elements_51 = param.getWhen().getEm().getElements();
                            for(final AbstractElement2 par1_15 : _elements_51) {
                              {
                                if (((par1_15.getName() != null) && (!par1_15.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_55 = par1_15.getName();
                                  _builder.append(_name_55);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" double timeStamp[]);");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t");
                          _builder.newLine();
                        } else {
                          Range _range_4 = param.getCheck().getReference().getRange();
                          boolean _tripleNotEquals_32 = (_range_4 != null);
                          if (_tripleNotEquals_32) {
                            _builder.append("struct Ret{");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("int assert;");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("double diff_up;");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("double diff_down;");
                            _builder.newLine();
                            _builder.append("};");
                            _builder.newLine();
                            _builder.append("struct Ret ");
                            String _string_44 = param.getName().toString();
                            _builder.append(_string_44);
                            _builder.append(" (");
                            {
                              boolean _equals_16 = param.getCheck().getName().equals("timeStamp");
                              boolean _not_16 = (!_equals_16);
                              if (_not_16) {
                                _builder.append("double ");
                                String _string_45 = param.getCheck().getName().toString();
                                _builder.append(_string_45);
                                _builder.append("[], ");
                              }
                            }
                            {
                              EList<AbstractElement2> _elements_52 = param.getWhen().getEm().getElements();
                              for(final AbstractElement2 par1_16 : _elements_52) {
                                {
                                  if (((par1_16.getName() != null) && (!par1_16.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_56 = par1_16.getName();
                                    _builder.append(_name_56);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append(" double timeStamp[]);");
                            _builder.newLineIfNotEmpty();
                          } else {
                            Gap _gap_4 = param.getCheck().getReference().getGap();
                            boolean _tripleNotEquals_33 = (_gap_4 != null);
                            if (_tripleNotEquals_33) {
                              _builder.append("struct Ret{");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("int assert;");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("double diff_up;");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("double diff_down;");
                              _builder.newLine();
                              _builder.append("};");
                              _builder.newLine();
                              _builder.append("struct Ret ");
                              String _string_46 = param.getName().toString();
                              _builder.append(_string_46);
                              _builder.append(" (");
                              {
                                boolean _equals_17 = param.getCheck().getName().equals("timeStamp");
                                boolean _not_17 = (!_equals_17);
                                if (_not_17) {
                                  _builder.append("double ");
                                  String _string_47 = param.getCheck().getName().toString();
                                  _builder.append(_string_47);
                                  _builder.append("[], ");
                                }
                              }
                              {
                                EList<AbstractElement2> _elements_53 = param.getWhen().getEm().getElements();
                                for(final AbstractElement2 par1_17 : _elements_53) {
                                  {
                                    if (((par1_17.getName() != null) && (!par1_17.getName().equals("timeStamp")))) {
                                      _builder.append("double ");
                                      String _name_57 = par1_17.getName();
                                      _builder.append(_name_57);
                                      _builder.append("[],");
                                    }
                                  }
                                }
                              }
                              _builder.append(" double timeStamp[]);");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                {
                  Upper _upper_5 = param.getCheck().getReference().getUpper();
                  boolean _tripleNotEquals_34 = (_upper_5 != null);
                  if (_tripleNotEquals_34) {
                    _builder.append("struct Ret{");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("int assert;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("double diff;");
                    _builder.newLine();
                    _builder.append("};");
                    _builder.newLine();
                    _builder.append("struct Ret ");
                    String _string_48 = param.getName().toString();
                    _builder.append(_string_48);
                    _builder.append(" (");
                    {
                      EList<AbstractElement2> _elements_54 = param.getCheck().getEm().getElements();
                      for(final AbstractElement2 par3_12 : _elements_54) {
                        {
                          if (((par3_12.getName() != null) && (!par3_12.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_58 = par3_12.getName();
                            _builder.append(_name_58);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" ");
                    {
                      EList<AbstractElement2> _elements_55 = param.getWhen().getEm().getElements();
                      for(final AbstractElement2 par1_18 : _elements_55) {
                        {
                          if (((par1_18.getName() != null) && (!par1_18.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_59 = par1_18.getName();
                            _builder.append(_name_59);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" double timeStamp[]);");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Lower _lower_5 = param.getCheck().getReference().getLower();
                    boolean _tripleNotEquals_35 = (_lower_5 != null);
                    if (_tripleNotEquals_35) {
                      _builder.append("struct Ret{");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("int assert;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("double diff;");
                      _builder.newLine();
                      _builder.append("};");
                      _builder.newLine();
                      _builder.append("struct Ret ");
                      String _string_49 = param.getName().toString();
                      _builder.append(_string_49);
                      _builder.append(" (");
                      {
                        EList<AbstractElement2> _elements_56 = param.getCheck().getEm().getElements();
                        for(final AbstractElement2 par3_13 : _elements_56) {
                          {
                            if (((par3_13.getName() != null) && (!par3_13.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_60 = par3_13.getName();
                              _builder.append(_name_60);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" ");
                      {
                        EList<AbstractElement2> _elements_57 = param.getWhen().getEm().getElements();
                        for(final AbstractElement2 par1_19 : _elements_57) {
                          {
                            if (((par1_19.getName() != null) && (!par1_19.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_61 = par1_19.getName();
                              _builder.append(_name_61);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" double timeStamp[]);");
                      _builder.newLineIfNotEmpty();
                    } else {
                      Same _same_5 = param.getCheck().getReference().getSame();
                      boolean _tripleNotEquals_36 = (_same_5 != null);
                      if (_tripleNotEquals_36) {
                        _builder.append("struct Ret{");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("int assert;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("double diff;");
                        _builder.newLine();
                        _builder.append("};");
                        _builder.newLine();
                        _builder.append("struct Ret ");
                        String _string_50 = param.getName().toString();
                        _builder.append(_string_50);
                        _builder.append(" (");
                        {
                          EList<AbstractElement2> _elements_58 = param.getCheck().getEm().getElements();
                          for(final AbstractElement2 par3_14 : _elements_58) {
                            {
                              if (((par3_14.getName() != null) && (!par3_14.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_62 = par3_14.getName();
                                _builder.append(_name_62);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" ");
                        {
                          EList<AbstractElement2> _elements_59 = param.getWhen().getEm().getElements();
                          for(final AbstractElement2 par1_20 : _elements_59) {
                            {
                              if (((par1_20.getName() != null) && (!par1_20.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_63 = par1_20.getName();
                                _builder.append(_name_63);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" double timeStamp[]);");
                        _builder.newLineIfNotEmpty();
                      } else {
                        NotSame _notsame_5 = param.getCheck().getReference().getNotsame();
                        boolean _tripleNotEquals_37 = (_notsame_5 != null);
                        if (_tripleNotEquals_37) {
                          _builder.append("struct Ret{");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("int assert;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("double diff;");
                          _builder.newLine();
                          _builder.append("};");
                          _builder.newLine();
                          _builder.append("struct Ret ");
                          String _string_51 = param.getName().toString();
                          _builder.append(_string_51);
                          _builder.append(" (");
                          {
                            EList<AbstractElement2> _elements_60 = param.getCheck().getEm().getElements();
                            for(final AbstractElement2 par3_15 : _elements_60) {
                              {
                                if (((par3_15.getName() != null) && (!par3_15.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_64 = par3_15.getName();
                                  _builder.append(_name_64);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" ");
                          {
                            EList<AbstractElement2> _elements_61 = param.getWhen().getEm().getElements();
                            for(final AbstractElement2 par1_21 : _elements_61) {
                              {
                                if (((par1_21.getName() != null) && (!par1_21.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_65 = par1_21.getName();
                                  _builder.append(_name_65);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" double timeStamp[]);\t\t\t");
                          _builder.newLineIfNotEmpty();
                        } else {
                          Range _range_5 = param.getCheck().getReference().getRange();
                          boolean _tripleNotEquals_38 = (_range_5 != null);
                          if (_tripleNotEquals_38) {
                            _builder.append("struct Ret{");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("int assert;");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("double diff_up;");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("double diff_down;");
                            _builder.newLine();
                            _builder.append("};");
                            _builder.newLine();
                            _builder.append("struct Ret ");
                            String _string_52 = param.getName().toString();
                            _builder.append(_string_52);
                            _builder.append(" (");
                            {
                              EList<AbstractElement2> _elements_62 = param.getCheck().getEm().getElements();
                              for(final AbstractElement2 par3_16 : _elements_62) {
                                {
                                  if (((par3_16.getName() != null) && (!par3_16.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_66 = par3_16.getName();
                                    _builder.append(_name_66);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append(" ");
                            {
                              EList<AbstractElement2> _elements_63 = param.getWhen().getEm().getElements();
                              for(final AbstractElement2 par1_22 : _elements_63) {
                                {
                                  if (((par1_22.getName() != null) && (!par1_22.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_67 = par1_22.getName();
                                    _builder.append(_name_67);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append(" double timeStamp[]);");
                            _builder.newLineIfNotEmpty();
                          } else {
                            Gap _gap_5 = param.getCheck().getReference().getGap();
                            boolean _tripleNotEquals_39 = (_gap_5 != null);
                            if (_tripleNotEquals_39) {
                              _builder.append("struct Ret{");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("int assert;");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("double diff_up;");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("double diff_down;");
                              _builder.newLine();
                              _builder.append("};");
                              _builder.newLine();
                              _builder.append("struct Ret ");
                              String _string_53 = param.getName().toString();
                              _builder.append(_string_53);
                              _builder.append(" (");
                              {
                                EList<AbstractElement2> _elements_64 = param.getCheck().getEm().getElements();
                                for(final AbstractElement2 par3_17 : _elements_64) {
                                  {
                                    if (((par3_17.getName() != null) && (!par3_17.getName().equals("timeStamp")))) {
                                      _builder.append("double ");
                                      String _name_68 = par3_17.getName();
                                      _builder.append(_name_68);
                                      _builder.append("[],");
                                    }
                                  }
                                }
                              }
                              _builder.append(" ");
                              {
                                EList<AbstractElement2> _elements_65 = param.getWhen().getEm().getElements();
                                for(final AbstractElement2 par1_23 : _elements_65) {
                                  {
                                    if (((par1_23.getName() != null) && (!par1_23.getName().equals("timeStamp")))) {
                                      _builder.append("double ");
                                      String _name_69 = par1_23.getName();
                                      _builder.append(_name_69);
                                      _builder.append("[],");
                                    }
                                  }
                                }
                              }
                              _builder.append(" double timeStamp[]);");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            {
              String _name_70 = param.getCheck().getName();
              boolean _tripleNotEquals_40 = (_name_70 != null);
              if (_tripleNotEquals_40) {
                {
                  Upper _upper_6 = param.getCheck().getReference().getUpper();
                  boolean _tripleNotEquals_41 = (_upper_6 != null);
                  if (_tripleNotEquals_41) {
                    _builder.append("struct Ret{");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("int assert;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("double diff;");
                    _builder.newLine();
                    _builder.append("};");
                    _builder.newLine();
                    _builder.append("struct Ret ");
                    String _string_54 = param.getName().toString();
                    _builder.append(_string_54);
                    _builder.append(" (");
                    {
                      boolean _equals_18 = param.getCheck().getName().equals("timeStamp");
                      boolean _not_18 = (!_equals_18);
                      if (_not_18) {
                        _builder.append("double ");
                        String _string_55 = param.getCheck().getName().toString();
                        _builder.append(_string_55);
                        _builder.append("[], ");
                      }
                    }
                    _builder.append(" double timeStamp[]);");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Lower _lower_6 = param.getCheck().getReference().getLower();
                    boolean _tripleNotEquals_42 = (_lower_6 != null);
                    if (_tripleNotEquals_42) {
                      _builder.append("struct Ret{");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("int assert;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("double diff;");
                      _builder.newLine();
                      _builder.append("};");
                      _builder.newLine();
                      _builder.append("struct Ret ");
                      String _string_56 = param.getName().toString();
                      _builder.append(_string_56);
                      _builder.append(" (");
                      {
                        boolean _equals_19 = param.getCheck().getName().equals("timeStamp");
                        boolean _not_19 = (!_equals_19);
                        if (_not_19) {
                          _builder.append("double ");
                          String _string_57 = param.getCheck().getName().toString();
                          _builder.append(_string_57);
                          _builder.append("[], ");
                        }
                      }
                      _builder.append("double timeStamp[]);");
                      _builder.newLineIfNotEmpty();
                    } else {
                      Same _same_6 = param.getCheck().getReference().getSame();
                      boolean _tripleNotEquals_43 = (_same_6 != null);
                      if (_tripleNotEquals_43) {
                        _builder.append("struct Ret{");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("int assert;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("double diff;");
                        _builder.newLine();
                        _builder.append("};");
                        _builder.newLine();
                        _builder.append("struct Ret ");
                        String _string_58 = param.getName().toString();
                        _builder.append(_string_58);
                        _builder.append(" (");
                        {
                          boolean _equals_20 = param.getCheck().getName().equals("timeStamp");
                          boolean _not_20 = (!_equals_20);
                          if (_not_20) {
                            _builder.append("double ");
                            String _string_59 = param.getCheck().getName().toString();
                            _builder.append(_string_59);
                            _builder.append("[], ");
                          }
                        }
                        _builder.append("double timeStamp[]);");
                        _builder.newLineIfNotEmpty();
                      } else {
                        NotSame _notsame_6 = param.getCheck().getReference().getNotsame();
                        boolean _tripleNotEquals_44 = (_notsame_6 != null);
                        if (_tripleNotEquals_44) {
                          _builder.append("struct Ret{");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("int assert;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("double diff;");
                          _builder.newLine();
                          _builder.append("};");
                          _builder.newLine();
                          _builder.append("struct Ret ");
                          String _string_60 = param.getName().toString();
                          _builder.append(_string_60);
                          _builder.append(" (");
                          {
                            boolean _equals_21 = param.getCheck().getName().equals("timeStamp");
                            boolean _not_21 = (!_equals_21);
                            if (_not_21) {
                              _builder.append("double ");
                              String _string_61 = param.getCheck().getName().toString();
                              _builder.append(_string_61);
                              _builder.append("[], ");
                            }
                          }
                          _builder.append("double timeStamp[]);\t\t\t");
                          _builder.newLineIfNotEmpty();
                        } else {
                          Range _range_6 = param.getCheck().getReference().getRange();
                          boolean _tripleNotEquals_45 = (_range_6 != null);
                          if (_tripleNotEquals_45) {
                            _builder.append("struct Ret{");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("int assert;");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("double diff_up;");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("double diff_down;");
                            _builder.newLine();
                            _builder.append("};");
                            _builder.newLine();
                            _builder.append("struct Ret ");
                            String _string_62 = param.getName().toString();
                            _builder.append(_string_62);
                            _builder.append(" (");
                            {
                              boolean _equals_22 = param.getCheck().getName().equals("timeStamp");
                              boolean _not_22 = (!_equals_22);
                              if (_not_22) {
                                _builder.append("double ");
                                String _string_63 = param.getCheck().getName().toString();
                                _builder.append(_string_63);
                                _builder.append("[], ");
                              }
                            }
                            _builder.append("double timeStamp[]);");
                            _builder.newLineIfNotEmpty();
                          } else {
                            Gap _gap_6 = param.getCheck().getReference().getGap();
                            boolean _tripleNotEquals_46 = (_gap_6 != null);
                            if (_tripleNotEquals_46) {
                              _builder.append("struct Ret{");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("int assert;");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("double diff_up;");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("double diff_down;");
                              _builder.newLine();
                              _builder.append("};");
                              _builder.newLine();
                              _builder.append("struct Ret ");
                              String _string_64 = param.getName().toString();
                              _builder.append(_string_64);
                              _builder.append(" (");
                              {
                                boolean _equals_23 = param.getCheck().getName().equals("timeStamp");
                                boolean _not_23 = (!_equals_23);
                                if (_not_23) {
                                  _builder.append("double ");
                                  String _string_65 = param.getCheck().getName().toString();
                                  _builder.append(_string_65);
                                  _builder.append("[], ");
                                }
                              }
                              _builder.append("double timeStamp[]);");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                {
                  Upper _upper_7 = param.getCheck().getReference().getUpper();
                  boolean _tripleNotEquals_47 = (_upper_7 != null);
                  if (_tripleNotEquals_47) {
                    _builder.append("struct Ret{");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("int assert;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("double diff;");
                    _builder.newLine();
                    _builder.append("};");
                    _builder.newLine();
                    _builder.append("struct Ret ");
                    String _string_66 = param.getName().toString();
                    _builder.append(_string_66);
                    _builder.append(" (");
                    {
                      EList<AbstractElement2> _elements_66 = param.getCheck().getEm().getElements();
                      for(final AbstractElement2 par3_18 : _elements_66) {
                        {
                          if (((par3_18.getName() != null) && (!par3_18.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_71 = par3_18.getName();
                            _builder.append(_name_71);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append("double timeStamp[]);");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Lower _lower_7 = param.getCheck().getReference().getLower();
                    boolean _tripleNotEquals_48 = (_lower_7 != null);
                    if (_tripleNotEquals_48) {
                      _builder.append("struct Ret{");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("int assert;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("double diff;");
                      _builder.newLine();
                      _builder.append("};");
                      _builder.newLine();
                      _builder.append("struct Ret ");
                      String _string_67 = param.getName().toString();
                      _builder.append(_string_67);
                      _builder.append(" (");
                      {
                        EList<AbstractElement2> _elements_67 = param.getCheck().getEm().getElements();
                        for(final AbstractElement2 par3_19 : _elements_67) {
                          {
                            if (((par3_19.getName() != null) && (!par3_19.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_72 = par3_19.getName();
                              _builder.append(_name_72);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append("double timeStamp[]);");
                      _builder.newLineIfNotEmpty();
                    } else {
                      Same _same_7 = param.getCheck().getReference().getSame();
                      boolean _tripleNotEquals_49 = (_same_7 != null);
                      if (_tripleNotEquals_49) {
                        _builder.append("struct Ret{");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("int assert;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("double diff;");
                        _builder.newLine();
                        _builder.append("};");
                        _builder.newLine();
                        _builder.append("struct Ret ");
                        String _string_68 = param.getName().toString();
                        _builder.append(_string_68);
                        _builder.append(" (");
                        {
                          EList<AbstractElement2> _elements_68 = param.getCheck().getEm().getElements();
                          for(final AbstractElement2 par3_20 : _elements_68) {
                            {
                              if (((par3_20.getName() != null) && (!par3_20.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_73 = par3_20.getName();
                                _builder.append(_name_73);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append("double timeStamp[]);");
                        _builder.newLineIfNotEmpty();
                      } else {
                        NotSame _notsame_7 = param.getCheck().getReference().getNotsame();
                        boolean _tripleNotEquals_50 = (_notsame_7 != null);
                        if (_tripleNotEquals_50) {
                          _builder.append("struct Ret{");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("int assert;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("double diff;");
                          _builder.newLine();
                          _builder.append("};");
                          _builder.newLine();
                          _builder.append("struct Ret ");
                          String _string_69 = param.getName().toString();
                          _builder.append(_string_69);
                          _builder.append(" (");
                          {
                            EList<AbstractElement2> _elements_69 = param.getCheck().getEm().getElements();
                            for(final AbstractElement2 par3_21 : _elements_69) {
                              {
                                if (((par3_21.getName() != null) && (!par3_21.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_74 = par3_21.getName();
                                  _builder.append(_name_74);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append("double timeStamp[]);\t\t\t\t");
                          _builder.newLineIfNotEmpty();
                        } else {
                          Range _range_7 = param.getCheck().getReference().getRange();
                          boolean _tripleNotEquals_51 = (_range_7 != null);
                          if (_tripleNotEquals_51) {
                            _builder.append("struct Ret{");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("int assert;");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("double diff_up;");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("double diff_down;");
                            _builder.newLine();
                            _builder.append("};");
                            _builder.newLine();
                            _builder.append("struct Ret ");
                            String _string_70 = param.getName().toString();
                            _builder.append(_string_70);
                            _builder.append(" (");
                            {
                              EList<AbstractElement2> _elements_70 = param.getCheck().getEm().getElements();
                              for(final AbstractElement2 par3_22 : _elements_70) {
                                {
                                  if (((par3_22.getName() != null) && (!par3_22.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_75 = par3_22.getName();
                                    _builder.append(_name_75);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append("double timeStamp[]);");
                            _builder.newLineIfNotEmpty();
                          } else {
                            Gap _gap_7 = param.getCheck().getReference().getGap();
                            boolean _tripleNotEquals_52 = (_gap_7 != null);
                            if (_tripleNotEquals_52) {
                              _builder.append("struct Ret{");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("int assert;");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("double diff_up;");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("double diff_down;");
                              _builder.newLine();
                              _builder.append("};");
                              _builder.newLine();
                              _builder.append("struct Ret ");
                              String _string_71 = param.getName().toString();
                              _builder.append(_string_71);
                              _builder.append(" (");
                              {
                                EList<AbstractElement2> _elements_71 = param.getCheck().getEm().getElements();
                                for(final AbstractElement2 par3_23 : _elements_71) {
                                  {
                                    if (((par3_23.getName() != null) && (!par3_23.getName().equals("timeStamp")))) {
                                      _builder.append("double ");
                                      String _name_76 = par3_23.getName();
                                      _builder.append(_name_76);
                                      _builder.append("[],");
                                    }
                                  }
                                }
                              }
                              _builder.append("double timeStamp[]);");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_oracle_c(final Oracle param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include \"");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append(".h\"");
    _builder.newLineIfNotEmpty();
    _builder.append("//");
    String _value = param.getCheck().getDescription().getValue();
    _builder.append(_value);
    _builder.newLineIfNotEmpty();
    {
      if (((param.getWhen() != null) && (param.getWhile() != null))) {
        {
          String _name = param.getCheck().getName();
          boolean _tripleNotEquals = (_name != null);
          if (_tripleNotEquals) {
            {
              Upper _upper = param.getCheck().getReference().getUpper();
              boolean _tripleNotEquals_1 = (_upper != null);
              if (_tripleNotEquals_1) {
                _builder.append("struct Ret ");
                String _string_1 = param.getName().toString();
                _builder.append(_string_1);
                _builder.append(" (");
                {
                  boolean _equals = param.getCheck().getName().equals("timeStamp");
                  boolean _not = (!_equals);
                  if (_not) {
                    _builder.append("double ");
                    String _string_2 = param.getCheck().getName().toString();
                    _builder.append(_string_2);
                    _builder.append("[], ");
                  }
                }
                _builder.append(" ");
                {
                  EList<AbstractElement2> _elements = param.getWhen().getEm().getElements();
                  for(final AbstractElement2 par1 : _elements) {
                    {
                      if (((par1.getName() != null) && (!par1.getName().equals("timeStamp")))) {
                        _builder.append("double ");
                        String _name_1 = par1.getName();
                        _builder.append(_name_1);
                        _builder.append("[],");
                      }
                    }
                  }
                }
                {
                  EList<AbstractElement2> _elements_1 = param.getWhile().getEm().getElements();
                  for(final AbstractElement2 par2 : _elements_1) {
                    {
                      if (((par2.getName() != null) && (!par2.getName().equals("timeStamp")))) {
                        _builder.append("double ");
                        String _name_2 = par2.getName();
                        _builder.append(_name_2);
                        _builder.append("[],");
                      }
                    }
                  }
                }
                _builder.append(" double timeStamp[]){");
                _builder.newLineIfNotEmpty();
              } else {
                Lower _lower = param.getCheck().getReference().getLower();
                boolean _tripleNotEquals_2 = (_lower != null);
                if (_tripleNotEquals_2) {
                  _builder.append("struct Ret ");
                  String _string_3 = param.getName().toString();
                  _builder.append(_string_3);
                  _builder.append(" (");
                  {
                    boolean _equals_1 = param.getCheck().getName().equals("timeStamp");
                    boolean _not_1 = (!_equals_1);
                    if (_not_1) {
                      _builder.append("double ");
                      String _string_4 = param.getCheck().getName().toString();
                      _builder.append(_string_4);
                      _builder.append("[], ");
                    }
                  }
                  _builder.append(" ");
                  {
                    EList<AbstractElement2> _elements_2 = param.getWhen().getEm().getElements();
                    for(final AbstractElement2 par1_1 : _elements_2) {
                      {
                        if (((par1_1.getName() != null) && (!par1_1.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_3 = par1_1.getName();
                          _builder.append(_name_3);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  {
                    EList<AbstractElement2> _elements_3 = param.getWhile().getEm().getElements();
                    for(final AbstractElement2 par2_1 : _elements_3) {
                      {
                        if (((par2_1.getName() != null) && (!par2_1.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_4 = par2_1.getName();
                          _builder.append(_name_4);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  _builder.append(" double timeStamp[]){");
                  _builder.newLineIfNotEmpty();
                } else {
                  Same _same = param.getCheck().getReference().getSame();
                  boolean _tripleNotEquals_3 = (_same != null);
                  if (_tripleNotEquals_3) {
                    _builder.append("struct Ret ");
                    String _string_5 = param.getName().toString();
                    _builder.append(_string_5);
                    _builder.append(" (");
                    {
                      boolean _equals_2 = param.getCheck().getName().equals("timeStamp");
                      boolean _not_2 = (!_equals_2);
                      if (_not_2) {
                        _builder.append("double ");
                        String _string_6 = param.getCheck().getName().toString();
                        _builder.append(_string_6);
                        _builder.append("[], ");
                      }
                    }
                    _builder.append(" ");
                    {
                      EList<AbstractElement2> _elements_4 = param.getWhen().getEm().getElements();
                      for(final AbstractElement2 par1_2 : _elements_4) {
                        {
                          if (((par1_2.getName() != null) && (!par1_2.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_5 = par1_2.getName();
                            _builder.append(_name_5);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    {
                      EList<AbstractElement2> _elements_5 = param.getWhile().getEm().getElements();
                      for(final AbstractElement2 par2_2 : _elements_5) {
                        {
                          if (((par2_2.getName() != null) && (!par2_2.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_6 = par2_2.getName();
                            _builder.append(_name_6);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" double timeStamp[]){");
                    _builder.newLineIfNotEmpty();
                  } else {
                    NotSame _notsame = param.getCheck().getReference().getNotsame();
                    boolean _tripleNotEquals_4 = (_notsame != null);
                    if (_tripleNotEquals_4) {
                      _builder.append("struct Ret ");
                      String _string_7 = param.getName().toString();
                      _builder.append(_string_7);
                      _builder.append(" (");
                      {
                        boolean _equals_3 = param.getCheck().getName().equals("timeStamp");
                        boolean _not_3 = (!_equals_3);
                        if (_not_3) {
                          _builder.append("double ");
                          String _string_8 = param.getCheck().getName().toString();
                          _builder.append(_string_8);
                          _builder.append("[], ");
                        }
                      }
                      _builder.append(" ");
                      {
                        EList<AbstractElement2> _elements_6 = param.getWhen().getEm().getElements();
                        for(final AbstractElement2 par1_3 : _elements_6) {
                          {
                            if (((par1_3.getName() != null) && (!par1_3.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_7 = par1_3.getName();
                              _builder.append(_name_7);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      {
                        EList<AbstractElement2> _elements_7 = param.getWhile().getEm().getElements();
                        for(final AbstractElement2 par2_3 : _elements_7) {
                          {
                            if (((par2_3.getName() != null) && (!par2_3.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_8 = par2_3.getName();
                              _builder.append(_name_8);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" double timeStamp[]){");
                      _builder.newLineIfNotEmpty();
                    } else {
                      Range _range = param.getCheck().getReference().getRange();
                      boolean _tripleNotEquals_5 = (_range != null);
                      if (_tripleNotEquals_5) {
                        _builder.append("struct Ret ");
                        String _string_9 = param.getName().toString();
                        _builder.append(_string_9);
                        _builder.append(" (");
                        {
                          boolean _equals_4 = param.getCheck().getName().equals("timeStamp");
                          boolean _not_4 = (!_equals_4);
                          if (_not_4) {
                            _builder.append("double ");
                            String _string_10 = param.getCheck().getName().toString();
                            _builder.append(_string_10);
                            _builder.append("[], ");
                          }
                        }
                        _builder.append(" ");
                        {
                          EList<AbstractElement2> _elements_8 = param.getWhen().getEm().getElements();
                          for(final AbstractElement2 par1_4 : _elements_8) {
                            {
                              if (((par1_4.getName() != null) && (!par1_4.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_9 = par1_4.getName();
                                _builder.append(_name_9);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        {
                          EList<AbstractElement2> _elements_9 = param.getWhile().getEm().getElements();
                          for(final AbstractElement2 par2_4 : _elements_9) {
                            {
                              if (((par2_4.getName() != null) && (!par2_4.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_10 = par2_4.getName();
                                _builder.append(_name_10);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" double timeStamp[]){");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Gap _gap = param.getCheck().getReference().getGap();
                        boolean _tripleNotEquals_6 = (_gap != null);
                        if (_tripleNotEquals_6) {
                          _builder.append("struct Ret ");
                          String _string_11 = param.getName().toString();
                          _builder.append(_string_11);
                          _builder.append(" (");
                          {
                            boolean _equals_5 = param.getCheck().getName().equals("timeStamp");
                            boolean _not_5 = (!_equals_5);
                            if (_not_5) {
                              _builder.append("double ");
                              String _string_12 = param.getCheck().getName().toString();
                              _builder.append(_string_12);
                              _builder.append("[], ");
                            }
                          }
                          _builder.append(" ");
                          {
                            EList<AbstractElement2> _elements_10 = param.getWhen().getEm().getElements();
                            for(final AbstractElement2 par1_5 : _elements_10) {
                              {
                                if (((par1_5.getName() != null) && (!par1_5.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_11 = par1_5.getName();
                                  _builder.append(_name_11);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          {
                            EList<AbstractElement2> _elements_11 = param.getWhile().getEm().getElements();
                            for(final AbstractElement2 par2_5 : _elements_11) {
                              {
                                if (((par2_5.getName() != null) && (!par2_5.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_12 = par2_5.getName();
                                  _builder.append(_name_12);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" double timeStamp[]){");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            {
              Upper _upper_1 = param.getCheck().getReference().getUpper();
              boolean _tripleNotEquals_7 = (_upper_1 != null);
              if (_tripleNotEquals_7) {
                _builder.append("struct Ret ");
                String _string_13 = param.getName().toString();
                _builder.append(_string_13);
                _builder.append(" (");
                {
                  EList<AbstractElement2> _elements_12 = param.getCheck().getEm().getElements();
                  for(final AbstractElement2 par3 : _elements_12) {
                    {
                      if (((par3.getName() != null) && (!par3.getName().equals("timeStamp")))) {
                        _builder.append("double ");
                        String _name_13 = par3.getName();
                        _builder.append(_name_13);
                        _builder.append("[],");
                      }
                    }
                  }
                }
                _builder.append(" ");
                {
                  EList<AbstractElement2> _elements_13 = param.getWhen().getEm().getElements();
                  for(final AbstractElement2 par1_6 : _elements_13) {
                    {
                      if (((par1_6.getName() != null) && (!par1_6.getName().equals("timeStamp")))) {
                        _builder.append("double ");
                        String _name_14 = par1_6.getName();
                        _builder.append(_name_14);
                        _builder.append("[],");
                      }
                    }
                  }
                }
                {
                  EList<AbstractElement2> _elements_14 = param.getWhile().getEm().getElements();
                  for(final AbstractElement2 par2_6 : _elements_14) {
                    {
                      if (((par2_6.getName() != null) && (!par2_6.getName().equals("timeStamp")))) {
                        _builder.append("double ");
                        String _name_15 = par2_6.getName();
                        _builder.append(_name_15);
                        _builder.append("[],");
                      }
                    }
                  }
                }
                _builder.append(" double timeStamp[]){");
                _builder.newLineIfNotEmpty();
              } else {
                Lower _lower_1 = param.getCheck().getReference().getLower();
                boolean _tripleNotEquals_8 = (_lower_1 != null);
                if (_tripleNotEquals_8) {
                  _builder.append("struct Ret ");
                  String _string_14 = param.getName().toString();
                  _builder.append(_string_14);
                  _builder.append(" (");
                  {
                    EList<AbstractElement2> _elements_15 = param.getCheck().getEm().getElements();
                    for(final AbstractElement2 par3_1 : _elements_15) {
                      {
                        if (((par3_1.getName() != null) && (!par3_1.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_16 = par3_1.getName();
                          _builder.append(_name_16);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  _builder.append(" ");
                  {
                    EList<AbstractElement2> _elements_16 = param.getWhen().getEm().getElements();
                    for(final AbstractElement2 par1_7 : _elements_16) {
                      {
                        if (((par1_7.getName() != null) && (!par1_7.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_17 = par1_7.getName();
                          _builder.append(_name_17);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  {
                    EList<AbstractElement2> _elements_17 = param.getWhile().getEm().getElements();
                    for(final AbstractElement2 par2_7 : _elements_17) {
                      {
                        if (((par2_7.getName() != null) && (!par2_7.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_18 = par2_7.getName();
                          _builder.append(_name_18);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  _builder.append(" double timeStamp[]){");
                  _builder.newLineIfNotEmpty();
                } else {
                  Same _same_1 = param.getCheck().getReference().getSame();
                  boolean _tripleNotEquals_9 = (_same_1 != null);
                  if (_tripleNotEquals_9) {
                    _builder.append("struct Ret ");
                    String _string_15 = param.getName().toString();
                    _builder.append(_string_15);
                    _builder.append(" (");
                    {
                      EList<AbstractElement2> _elements_18 = param.getCheck().getEm().getElements();
                      for(final AbstractElement2 par3_2 : _elements_18) {
                        {
                          if (((par3_2.getName() != null) && (!par3_2.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_19 = par3_2.getName();
                            _builder.append(_name_19);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" ");
                    {
                      EList<AbstractElement2> _elements_19 = param.getWhen().getEm().getElements();
                      for(final AbstractElement2 par1_8 : _elements_19) {
                        {
                          if (((par1_8.getName() != null) && (!par1_8.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_20 = par1_8.getName();
                            _builder.append(_name_20);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    {
                      EList<AbstractElement2> _elements_20 = param.getWhile().getEm().getElements();
                      for(final AbstractElement2 par2_8 : _elements_20) {
                        {
                          if (((par2_8.getName() != null) && (!par2_8.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_21 = par2_8.getName();
                            _builder.append(_name_21);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" double timeStamp[]){");
                    _builder.newLineIfNotEmpty();
                  } else {
                    NotSame _notsame_1 = param.getCheck().getReference().getNotsame();
                    boolean _tripleNotEquals_10 = (_notsame_1 != null);
                    if (_tripleNotEquals_10) {
                      _builder.append("struct Ret ");
                      String _string_16 = param.getName().toString();
                      _builder.append(_string_16);
                      _builder.append(" (");
                      {
                        EList<AbstractElement2> _elements_21 = param.getCheck().getEm().getElements();
                        for(final AbstractElement2 par3_3 : _elements_21) {
                          {
                            if (((par3_3.getName() != null) && (!par3_3.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_22 = par3_3.getName();
                              _builder.append(_name_22);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" ");
                      {
                        EList<AbstractElement2> _elements_22 = param.getWhen().getEm().getElements();
                        for(final AbstractElement2 par1_9 : _elements_22) {
                          {
                            if (((par1_9.getName() != null) && (!par1_9.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_23 = par1_9.getName();
                              _builder.append(_name_23);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      {
                        EList<AbstractElement2> _elements_23 = param.getWhile().getEm().getElements();
                        for(final AbstractElement2 par2_9 : _elements_23) {
                          {
                            if (((par2_9.getName() != null) && (!par2_9.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_24 = par2_9.getName();
                              _builder.append(_name_24);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" double timeStamp[]){\t\t\t");
                      _builder.newLineIfNotEmpty();
                    } else {
                      Range _range_1 = param.getCheck().getReference().getRange();
                      boolean _tripleNotEquals_11 = (_range_1 != null);
                      if (_tripleNotEquals_11) {
                        _builder.append("struct Ret ");
                        String _string_17 = param.getName().toString();
                        _builder.append(_string_17);
                        _builder.append(" (");
                        {
                          EList<AbstractElement2> _elements_24 = param.getCheck().getEm().getElements();
                          for(final AbstractElement2 par3_4 : _elements_24) {
                            {
                              if (((par3_4.getName() != null) && (!par3_4.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_25 = par3_4.getName();
                                _builder.append(_name_25);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" ");
                        {
                          EList<AbstractElement2> _elements_25 = param.getWhen().getEm().getElements();
                          for(final AbstractElement2 par1_10 : _elements_25) {
                            {
                              if (((par1_10.getName() != null) && (!par1_10.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_26 = par1_10.getName();
                                _builder.append(_name_26);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        {
                          EList<AbstractElement2> _elements_26 = param.getWhile().getEm().getElements();
                          for(final AbstractElement2 par2_10 : _elements_26) {
                            {
                              if (((par2_10.getName() != null) && (!par2_10.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_27 = par2_10.getName();
                                _builder.append(_name_27);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" double timeStamp[]){");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Gap _gap_1 = param.getCheck().getReference().getGap();
                        boolean _tripleNotEquals_12 = (_gap_1 != null);
                        if (_tripleNotEquals_12) {
                          _builder.append("struct Ret ");
                          String _string_18 = param.getName().toString();
                          _builder.append(_string_18);
                          _builder.append(" (");
                          {
                            EList<AbstractElement2> _elements_27 = param.getCheck().getEm().getElements();
                            for(final AbstractElement2 par3_5 : _elements_27) {
                              {
                                if (((par3_5.getName() != null) && (!par3_5.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_28 = par3_5.getName();
                                  _builder.append(_name_28);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" ");
                          {
                            EList<AbstractElement2> _elements_28 = param.getWhen().getEm().getElements();
                            for(final AbstractElement2 par1_11 : _elements_28) {
                              {
                                if (((par1_11.getName() != null) && (!par1_11.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_29 = par1_11.getName();
                                  _builder.append(_name_29);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          {
                            EList<AbstractElement2> _elements_29 = param.getWhile().getEm().getElements();
                            for(final AbstractElement2 par2_11 : _elements_29) {
                              {
                                if (((par2_11.getName() != null) && (!par2_11.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_30 = par2_11.getName();
                                  _builder.append(_name_30);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" double timeStamp[]){");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        if (((param.getWhen() == null) && (param.getWhile() != null))) {
          {
            String _name_31 = param.getCheck().getName();
            boolean _tripleNotEquals_13 = (_name_31 != null);
            if (_tripleNotEquals_13) {
              {
                Upper _upper_2 = param.getCheck().getReference().getUpper();
                boolean _tripleNotEquals_14 = (_upper_2 != null);
                if (_tripleNotEquals_14) {
                  _builder.append("struct Ret ");
                  String _string_19 = param.getName().toString();
                  _builder.append(_string_19);
                  _builder.append(" (");
                  {
                    boolean _equals_6 = param.getCheck().getName().equals("timeStamp");
                    boolean _not_6 = (!_equals_6);
                    if (_not_6) {
                      _builder.append("double ");
                      String _string_20 = param.getCheck().getName().toString();
                      _builder.append(_string_20);
                      _builder.append("[], ");
                    }
                  }
                  {
                    EList<AbstractElement2> _elements_30 = param.getWhile().getEm().getElements();
                    for(final AbstractElement2 par2_12 : _elements_30) {
                      {
                        if (((par2_12.getName() != null) && (!par2_12.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_32 = par2_12.getName();
                          _builder.append(_name_32);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  _builder.append(" double timeStamp[]){");
                  _builder.newLineIfNotEmpty();
                } else {
                  Lower _lower_2 = param.getCheck().getReference().getLower();
                  boolean _tripleNotEquals_15 = (_lower_2 != null);
                  if (_tripleNotEquals_15) {
                    _builder.append("struct Ret ");
                    String _string_21 = param.getName().toString();
                    _builder.append(_string_21);
                    _builder.append(" (");
                    {
                      boolean _equals_7 = param.getCheck().getName().equals("timeStamp");
                      boolean _not_7 = (!_equals_7);
                      if (_not_7) {
                        _builder.append("double ");
                        String _string_22 = param.getCheck().getName().toString();
                        _builder.append(_string_22);
                        _builder.append("[], ");
                      }
                    }
                    _builder.append(" ");
                    {
                      EList<AbstractElement2> _elements_31 = param.getWhile().getEm().getElements();
                      for(final AbstractElement2 par2_13 : _elements_31) {
                        {
                          if (((par2_13.getName() != null) && (!par2_13.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_33 = par2_13.getName();
                            _builder.append(_name_33);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" double timeStamp[]){");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Same _same_2 = param.getCheck().getReference().getSame();
                    boolean _tripleNotEquals_16 = (_same_2 != null);
                    if (_tripleNotEquals_16) {
                      _builder.append("struct Ret ");
                      String _string_23 = param.getName().toString();
                      _builder.append(_string_23);
                      _builder.append(" (");
                      {
                        boolean _equals_8 = param.getCheck().getName().equals("timeStamp");
                        boolean _not_8 = (!_equals_8);
                        if (_not_8) {
                          _builder.append("double ");
                          String _string_24 = param.getCheck().getName().toString();
                          _builder.append(_string_24);
                          _builder.append("[], ");
                        }
                      }
                      _builder.append(" ");
                      {
                        EList<AbstractElement2> _elements_32 = param.getWhile().getEm().getElements();
                        for(final AbstractElement2 par2_14 : _elements_32) {
                          {
                            if (((par2_14.getName() != null) && (!par2_14.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_34 = par2_14.getName();
                              _builder.append(_name_34);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" double timeStamp[]){");
                      _builder.newLineIfNotEmpty();
                    } else {
                      NotSame _notsame_2 = param.getCheck().getReference().getNotsame();
                      boolean _tripleNotEquals_17 = (_notsame_2 != null);
                      if (_tripleNotEquals_17) {
                        _builder.append("struct Ret ");
                        String _string_25 = param.getName().toString();
                        _builder.append(_string_25);
                        _builder.append(" (");
                        {
                          boolean _equals_9 = param.getCheck().getName().equals("timeStamp");
                          boolean _not_9 = (!_equals_9);
                          if (_not_9) {
                            _builder.append("double ");
                            String _string_26 = param.getCheck().getName().toString();
                            _builder.append(_string_26);
                            _builder.append("[], ");
                          }
                        }
                        _builder.append(" ");
                        {
                          EList<AbstractElement2> _elements_33 = param.getWhile().getEm().getElements();
                          for(final AbstractElement2 par2_15 : _elements_33) {
                            {
                              if (((par2_15.getName() != null) && (!par2_15.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_35 = par2_15.getName();
                                _builder.append(_name_35);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" double timeStamp[]){\t\t\t\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Range _range_2 = param.getCheck().getReference().getRange();
                        boolean _tripleNotEquals_18 = (_range_2 != null);
                        if (_tripleNotEquals_18) {
                          _builder.append("struct Ret ");
                          String _string_27 = param.getName().toString();
                          _builder.append(_string_27);
                          _builder.append(" (");
                          {
                            boolean _equals_10 = param.getCheck().getName().equals("timeStamp");
                            boolean _not_10 = (!_equals_10);
                            if (_not_10) {
                              _builder.append("double ");
                              String _string_28 = param.getCheck().getName().toString();
                              _builder.append(_string_28);
                              _builder.append("[], ");
                            }
                          }
                          _builder.append(" ");
                          {
                            EList<AbstractElement2> _elements_34 = param.getWhile().getEm().getElements();
                            for(final AbstractElement2 par2_16 : _elements_34) {
                              {
                                if (((par2_16.getName() != null) && (!par2_16.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_36 = par2_16.getName();
                                  _builder.append(_name_36);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" double timeStamp[]){");
                          _builder.newLineIfNotEmpty();
                        } else {
                          Gap _gap_2 = param.getCheck().getReference().getGap();
                          boolean _tripleNotEquals_19 = (_gap_2 != null);
                          if (_tripleNotEquals_19) {
                            _builder.append("struct Ret ");
                            String _string_29 = param.getName().toString();
                            _builder.append(_string_29);
                            _builder.append(" (double ");
                            String _string_30 = param.getCheck().getName().toString();
                            _builder.append(_string_30);
                            _builder.append("[], ");
                            {
                              EList<AbstractElement2> _elements_35 = param.getWhile().getEm().getElements();
                              for(final AbstractElement2 par2_17 : _elements_35) {
                                {
                                  if (((par2_17.getName() != null) && (!par2_17.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_37 = par2_17.getName();
                                    _builder.append(_name_37);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append(" double timeStamp[]){");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              {
                Upper _upper_3 = param.getCheck().getReference().getUpper();
                boolean _tripleNotEquals_20 = (_upper_3 != null);
                if (_tripleNotEquals_20) {
                  _builder.append("struct Ret ");
                  String _string_31 = param.getName().toString();
                  _builder.append(_string_31);
                  _builder.append(" (");
                  {
                    EList<AbstractElement2> _elements_36 = param.getCheck().getEm().getElements();
                    for(final AbstractElement2 par3_6 : _elements_36) {
                      {
                        if (((par3_6.getName() != null) && (!par3_6.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_38 = par3_6.getName();
                          _builder.append(_name_38);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  _builder.append(" ");
                  {
                    EList<AbstractElement2> _elements_37 = param.getWhile().getEm().getElements();
                    for(final AbstractElement2 par2_18 : _elements_37) {
                      {
                        if (((par2_18.getName() != null) && (!par2_18.getName().equals("timeStamp")))) {
                          _builder.append("double ");
                          String _name_39 = par2_18.getName();
                          _builder.append(_name_39);
                          _builder.append("[],");
                        }
                      }
                    }
                  }
                  _builder.append(" double timeStamp[]){");
                  _builder.newLineIfNotEmpty();
                } else {
                  Lower _lower_3 = param.getCheck().getReference().getLower();
                  boolean _tripleNotEquals_21 = (_lower_3 != null);
                  if (_tripleNotEquals_21) {
                    _builder.append("struct Ret ");
                    String _string_32 = param.getName().toString();
                    _builder.append(_string_32);
                    _builder.append(" (");
                    {
                      EList<AbstractElement2> _elements_38 = param.getCheck().getEm().getElements();
                      for(final AbstractElement2 par3_7 : _elements_38) {
                        {
                          if (((par3_7.getName() != null) && (!par3_7.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_40 = par3_7.getName();
                            _builder.append(_name_40);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" ");
                    {
                      EList<AbstractElement2> _elements_39 = param.getWhile().getEm().getElements();
                      for(final AbstractElement2 par2_19 : _elements_39) {
                        {
                          if (((par2_19.getName() != null) && (!par2_19.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_41 = par2_19.getName();
                            _builder.append(_name_41);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" double timeStamp[]){");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Same _same_3 = param.getCheck().getReference().getSame();
                    boolean _tripleNotEquals_22 = (_same_3 != null);
                    if (_tripleNotEquals_22) {
                      _builder.append("struct Ret ");
                      String _string_33 = param.getName().toString();
                      _builder.append(_string_33);
                      _builder.append(" (");
                      {
                        EList<AbstractElement2> _elements_40 = param.getCheck().getEm().getElements();
                        for(final AbstractElement2 par3_8 : _elements_40) {
                          {
                            if (((par3_8.getName() != null) && (!par3_8.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_42 = par3_8.getName();
                              _builder.append(_name_42);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" ");
                      {
                        EList<AbstractElement2> _elements_41 = param.getWhile().getEm().getElements();
                        for(final AbstractElement2 par2_20 : _elements_41) {
                          {
                            if (((par2_20.getName() != null) && (!par2_20.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_43 = par2_20.getName();
                              _builder.append(_name_43);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" double timeStamp[]){");
                      _builder.newLineIfNotEmpty();
                    } else {
                      NotSame _notsame_3 = param.getCheck().getReference().getNotsame();
                      boolean _tripleNotEquals_23 = (_notsame_3 != null);
                      if (_tripleNotEquals_23) {
                        _builder.append("struct Ret ");
                        String _string_34 = param.getName().toString();
                        _builder.append(_string_34);
                        _builder.append(" (");
                        {
                          EList<AbstractElement2> _elements_42 = param.getCheck().getEm().getElements();
                          for(final AbstractElement2 par3_9 : _elements_42) {
                            {
                              if (((par3_9.getName() != null) && (!par3_9.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_44 = par3_9.getName();
                                _builder.append(_name_44);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" ");
                        {
                          EList<AbstractElement2> _elements_43 = param.getWhile().getEm().getElements();
                          for(final AbstractElement2 par2_21 : _elements_43) {
                            {
                              if (((par2_21.getName() != null) && (!par2_21.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_45 = par2_21.getName();
                                _builder.append(_name_45);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" double timeStamp[]){\t\t\t\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Range _range_3 = param.getCheck().getReference().getRange();
                        boolean _tripleNotEquals_24 = (_range_3 != null);
                        if (_tripleNotEquals_24) {
                          _builder.append("struct Ret ");
                          String _string_35 = param.getName().toString();
                          _builder.append(_string_35);
                          _builder.append(" (");
                          {
                            EList<AbstractElement2> _elements_44 = param.getCheck().getEm().getElements();
                            for(final AbstractElement2 par3_10 : _elements_44) {
                              {
                                if (((par3_10.getName() != null) && (!par3_10.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_46 = par3_10.getName();
                                  _builder.append(_name_46);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" ");
                          {
                            EList<AbstractElement2> _elements_45 = param.getWhile().getEm().getElements();
                            for(final AbstractElement2 par2_22 : _elements_45) {
                              {
                                if (((par2_22.getName() != null) && (!par2_22.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_47 = par2_22.getName();
                                  _builder.append(_name_47);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" double timeStamp[]){");
                          _builder.newLineIfNotEmpty();
                        } else {
                          Gap _gap_3 = param.getCheck().getReference().getGap();
                          boolean _tripleNotEquals_25 = (_gap_3 != null);
                          if (_tripleNotEquals_25) {
                            _builder.append("struct Ret ");
                            String _string_36 = param.getName().toString();
                            _builder.append(_string_36);
                            _builder.append(" (");
                            {
                              EList<AbstractElement2> _elements_46 = param.getCheck().getEm().getElements();
                              for(final AbstractElement2 par3_11 : _elements_46) {
                                {
                                  if (((par3_11.getName() != null) && (!par3_11.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_48 = par3_11.getName();
                                    _builder.append(_name_48);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append(" ");
                            {
                              EList<AbstractElement2> _elements_47 = param.getWhile().getEm().getElements();
                              for(final AbstractElement2 par2_23 : _elements_47) {
                                {
                                  if (((par2_23.getName() != null) && (!par2_23.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_49 = par2_23.getName();
                                    _builder.append(_name_49);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append(" double timeStamp[]){");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          if (((param.getWhen() != null) && (param.getWhile() == null))) {
            {
              String _name_50 = param.getCheck().getName();
              boolean _tripleNotEquals_26 = (_name_50 != null);
              if (_tripleNotEquals_26) {
                {
                  Upper _upper_4 = param.getCheck().getReference().getUpper();
                  boolean _tripleNotEquals_27 = (_upper_4 != null);
                  if (_tripleNotEquals_27) {
                    _builder.append("struct Ret ");
                    String _string_37 = param.getName().toString();
                    _builder.append(_string_37);
                    _builder.append(" (");
                    {
                      boolean _equals_11 = param.getCheck().getName().equals("timeStamp");
                      boolean _not_11 = (!_equals_11);
                      if (_not_11) {
                        _builder.append("double ");
                        String _string_38 = param.getCheck().getName().toString();
                        _builder.append(_string_38);
                        _builder.append("[], ");
                      }
                    }
                    _builder.append(" ");
                    {
                      EList<AbstractElement2> _elements_48 = param.getWhen().getEm().getElements();
                      for(final AbstractElement2 par1_12 : _elements_48) {
                        {
                          if (((par1_12.getName() != null) && (!par1_12.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_51 = par1_12.getName();
                            _builder.append(_name_51);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" double timeStamp[]){");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Lower _lower_4 = param.getCheck().getReference().getLower();
                    boolean _tripleNotEquals_28 = (_lower_4 != null);
                    if (_tripleNotEquals_28) {
                      _builder.append("struct Ret ");
                      String _string_39 = param.getName().toString();
                      _builder.append(_string_39);
                      _builder.append(" (");
                      {
                        boolean _equals_12 = param.getCheck().getName().equals("timeStamp");
                        boolean _not_12 = (!_equals_12);
                        if (_not_12) {
                          _builder.append("double ");
                          String _string_40 = param.getCheck().getName().toString();
                          _builder.append(_string_40);
                          _builder.append("[], ");
                        }
                      }
                      _builder.append(" ");
                      {
                        EList<AbstractElement2> _elements_49 = param.getWhen().getEm().getElements();
                        for(final AbstractElement2 par1_13 : _elements_49) {
                          {
                            if (((par1_13.getName() != null) && (!par1_13.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_52 = par1_13.getName();
                              _builder.append(_name_52);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" double timeStamp[]){");
                      _builder.newLineIfNotEmpty();
                    } else {
                      Same _same_4 = param.getCheck().getReference().getSame();
                      boolean _tripleNotEquals_29 = (_same_4 != null);
                      if (_tripleNotEquals_29) {
                        _builder.append("struct Ret ");
                        String _string_41 = param.getName().toString();
                        _builder.append(_string_41);
                        _builder.append(" (");
                        {
                          boolean _equals_13 = param.getCheck().getName().equals("timeStamp");
                          boolean _not_13 = (!_equals_13);
                          if (_not_13) {
                            _builder.append("double ");
                            String _string_42 = param.getCheck().getName().toString();
                            _builder.append(_string_42);
                            _builder.append("[], ");
                          }
                        }
                        _builder.append(" ");
                        {
                          EList<AbstractElement2> _elements_50 = param.getWhen().getEm().getElements();
                          for(final AbstractElement2 par1_14 : _elements_50) {
                            {
                              if (((par1_14.getName() != null) && (!par1_14.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_53 = par1_14.getName();
                                _builder.append(_name_53);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" double timeStamp[]){");
                        _builder.newLineIfNotEmpty();
                      } else {
                        NotSame _notsame_4 = param.getCheck().getReference().getNotsame();
                        boolean _tripleNotEquals_30 = (_notsame_4 != null);
                        if (_tripleNotEquals_30) {
                          _builder.append("struct Ret ");
                          String _string_43 = param.getName().toString();
                          _builder.append(_string_43);
                          _builder.append(" (");
                          {
                            boolean _equals_14 = param.getCheck().getName().equals("timeStamp");
                            boolean _not_14 = (!_equals_14);
                            if (_not_14) {
                              _builder.append("double ");
                              String _string_44 = param.getCheck().getName().toString();
                              _builder.append(_string_44);
                              _builder.append("[], ");
                            }
                          }
                          _builder.append(" ");
                          {
                            EList<AbstractElement2> _elements_51 = param.getWhen().getEm().getElements();
                            for(final AbstractElement2 par1_15 : _elements_51) {
                              {
                                if (((par1_15.getName() != null) && (!par1_15.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_54 = par1_15.getName();
                                  _builder.append(_name_54);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" double timeStamp[]){\t\t\t");
                          _builder.newLineIfNotEmpty();
                        } else {
                          Range _range_4 = param.getCheck().getReference().getRange();
                          boolean _tripleNotEquals_31 = (_range_4 != null);
                          if (_tripleNotEquals_31) {
                            _builder.append("struct Ret ");
                            String _string_45 = param.getName().toString();
                            _builder.append(_string_45);
                            _builder.append(" (");
                            {
                              boolean _equals_15 = param.getCheck().getName().equals("timeStamp");
                              boolean _not_15 = (!_equals_15);
                              if (_not_15) {
                                _builder.append("double ");
                                String _string_46 = param.getCheck().getName().toString();
                                _builder.append(_string_46);
                                _builder.append("[], ");
                              }
                            }
                            _builder.append(" ");
                            {
                              EList<AbstractElement2> _elements_52 = param.getWhen().getEm().getElements();
                              for(final AbstractElement2 par1_16 : _elements_52) {
                                {
                                  if (((par1_16.getName() != null) && (!par1_16.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_55 = par1_16.getName();
                                    _builder.append(_name_55);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append(" double timeStamp[]){");
                            _builder.newLineIfNotEmpty();
                          } else {
                            Gap _gap_4 = param.getCheck().getReference().getGap();
                            boolean _tripleNotEquals_32 = (_gap_4 != null);
                            if (_tripleNotEquals_32) {
                              _builder.append("struct Ret ");
                              String _string_47 = param.getName().toString();
                              _builder.append(_string_47);
                              _builder.append(" (");
                              {
                                boolean _equals_16 = param.getCheck().getName().equals("timeStamp");
                                boolean _not_16 = (!_equals_16);
                                if (_not_16) {
                                  _builder.append("double ");
                                  String _string_48 = param.getCheck().getName().toString();
                                  _builder.append(_string_48);
                                  _builder.append("[], ");
                                }
                              }
                              _builder.append(" ");
                              {
                                EList<AbstractElement2> _elements_53 = param.getWhen().getEm().getElements();
                                for(final AbstractElement2 par1_17 : _elements_53) {
                                  {
                                    if (((par1_17.getName() != null) && (!par1_17.getName().equals("timeStamp")))) {
                                      _builder.append("double ");
                                      String _name_56 = par1_17.getName();
                                      _builder.append(_name_56);
                                      _builder.append("[],");
                                    }
                                  }
                                }
                              }
                              _builder.append(" double timeStamp[]){");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                {
                  Upper _upper_5 = param.getCheck().getReference().getUpper();
                  boolean _tripleNotEquals_33 = (_upper_5 != null);
                  if (_tripleNotEquals_33) {
                    _builder.append("struct Ret ");
                    String _string_49 = param.getName().toString();
                    _builder.append(_string_49);
                    _builder.append(" (");
                    {
                      EList<AbstractElement2> _elements_54 = param.getCheck().getEm().getElements();
                      for(final AbstractElement2 par3_12 : _elements_54) {
                        {
                          if (((par3_12.getName() != null) && (!par3_12.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_57 = par3_12.getName();
                            _builder.append(_name_57);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" ");
                    {
                      EList<AbstractElement2> _elements_55 = param.getWhen().getEm().getElements();
                      for(final AbstractElement2 par1_18 : _elements_55) {
                        {
                          if (((par1_18.getName() != null) && (!par1_18.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_58 = par1_18.getName();
                            _builder.append(_name_58);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append(" double timeStamp[]){");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Lower _lower_5 = param.getCheck().getReference().getLower();
                    boolean _tripleNotEquals_34 = (_lower_5 != null);
                    if (_tripleNotEquals_34) {
                      _builder.append("struct Ret ");
                      String _string_50 = param.getName().toString();
                      _builder.append(_string_50);
                      _builder.append(" (");
                      {
                        EList<AbstractElement2> _elements_56 = param.getCheck().getEm().getElements();
                        for(final AbstractElement2 par3_13 : _elements_56) {
                          {
                            if (((par3_13.getName() != null) && (!par3_13.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_59 = par3_13.getName();
                              _builder.append(_name_59);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" ");
                      {
                        EList<AbstractElement2> _elements_57 = param.getWhen().getEm().getElements();
                        for(final AbstractElement2 par1_19 : _elements_57) {
                          {
                            if (((par1_19.getName() != null) && (!par1_19.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_60 = par1_19.getName();
                              _builder.append(_name_60);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append(" double timeStamp[]){");
                      _builder.newLineIfNotEmpty();
                    } else {
                      Same _same_5 = param.getCheck().getReference().getSame();
                      boolean _tripleNotEquals_35 = (_same_5 != null);
                      if (_tripleNotEquals_35) {
                        _builder.append("struct Ret ");
                        String _string_51 = param.getName().toString();
                        _builder.append(_string_51);
                        _builder.append(" (");
                        {
                          EList<AbstractElement2> _elements_58 = param.getCheck().getEm().getElements();
                          for(final AbstractElement2 par3_14 : _elements_58) {
                            {
                              if (((par3_14.getName() != null) && (!par3_14.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_61 = par3_14.getName();
                                _builder.append(_name_61);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" ");
                        {
                          EList<AbstractElement2> _elements_59 = param.getWhen().getEm().getElements();
                          for(final AbstractElement2 par1_20 : _elements_59) {
                            {
                              if (((par1_20.getName() != null) && (!par1_20.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_62 = par1_20.getName();
                                _builder.append(_name_62);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append(" double timeStamp[]){");
                        _builder.newLineIfNotEmpty();
                      } else {
                        NotSame _notsame_5 = param.getCheck().getReference().getNotsame();
                        boolean _tripleNotEquals_36 = (_notsame_5 != null);
                        if (_tripleNotEquals_36) {
                          _builder.append("struct Ret ");
                          String _string_52 = param.getName().toString();
                          _builder.append(_string_52);
                          _builder.append(" (");
                          {
                            EList<AbstractElement2> _elements_60 = param.getCheck().getEm().getElements();
                            for(final AbstractElement2 par3_15 : _elements_60) {
                              {
                                if (((par3_15.getName() != null) && (!par3_15.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_63 = par3_15.getName();
                                  _builder.append(_name_63);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" ");
                          {
                            EList<AbstractElement2> _elements_61 = param.getWhen().getEm().getElements();
                            for(final AbstractElement2 par1_21 : _elements_61) {
                              {
                                if (((par1_21.getName() != null) && (!par1_21.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_64 = par1_21.getName();
                                  _builder.append(_name_64);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append(" double timeStamp[]){\t\t\t");
                          _builder.newLineIfNotEmpty();
                        } else {
                          Range _range_5 = param.getCheck().getReference().getRange();
                          boolean _tripleNotEquals_37 = (_range_5 != null);
                          if (_tripleNotEquals_37) {
                            _builder.append("struct Ret ");
                            String _string_53 = param.getName().toString();
                            _builder.append(_string_53);
                            _builder.append(" (");
                            {
                              EList<AbstractElement2> _elements_62 = param.getCheck().getEm().getElements();
                              for(final AbstractElement2 par3_16 : _elements_62) {
                                {
                                  if (((par3_16.getName() != null) && (!par3_16.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_65 = par3_16.getName();
                                    _builder.append(_name_65);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append(" ");
                            {
                              EList<AbstractElement2> _elements_63 = param.getWhen().getEm().getElements();
                              for(final AbstractElement2 par1_22 : _elements_63) {
                                {
                                  if (((par1_22.getName() != null) && (!par1_22.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_66 = par1_22.getName();
                                    _builder.append(_name_66);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append(" double timeStamp[]){");
                            _builder.newLineIfNotEmpty();
                          } else {
                            Gap _gap_5 = param.getCheck().getReference().getGap();
                            boolean _tripleNotEquals_38 = (_gap_5 != null);
                            if (_tripleNotEquals_38) {
                              _builder.append("struct Ret ");
                              String _string_54 = param.getName().toString();
                              _builder.append(_string_54);
                              _builder.append(" (");
                              {
                                EList<AbstractElement2> _elements_64 = param.getCheck().getEm().getElements();
                                for(final AbstractElement2 par3_17 : _elements_64) {
                                  {
                                    if (((par3_17.getName() != null) && (!par3_17.getName().equals("timeStamp")))) {
                                      _builder.append("double ");
                                      String _name_67 = par3_17.getName();
                                      _builder.append(_name_67);
                                      _builder.append("[],");
                                    }
                                  }
                                }
                              }
                              _builder.append(" ");
                              {
                                EList<AbstractElement2> _elements_65 = param.getWhen().getEm().getElements();
                                for(final AbstractElement2 par1_23 : _elements_65) {
                                  {
                                    if (((par1_23.getName() != null) && (!par1_23.getName().equals("timeStamp")))) {
                                      _builder.append("double ");
                                      String _name_68 = par1_23.getName();
                                      _builder.append(_name_68);
                                      _builder.append("[],");
                                    }
                                  }
                                }
                              }
                              _builder.append(" double timeStamp[]){");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            {
              String _name_69 = param.getCheck().getName();
              boolean _tripleNotEquals_39 = (_name_69 != null);
              if (_tripleNotEquals_39) {
                {
                  Upper _upper_6 = param.getCheck().getReference().getUpper();
                  boolean _tripleNotEquals_40 = (_upper_6 != null);
                  if (_tripleNotEquals_40) {
                    _builder.append("struct Ret ");
                    String _string_55 = param.getName().toString();
                    _builder.append(_string_55);
                    _builder.append(" (");
                    {
                      boolean _equals_17 = param.getCheck().getName().equals("timeStamp");
                      boolean _not_17 = (!_equals_17);
                      if (_not_17) {
                        _builder.append("double ");
                        String _string_56 = param.getCheck().getName().toString();
                        _builder.append(_string_56);
                        _builder.append("[], ");
                      }
                    }
                    _builder.append("double timeStamp[]){");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Lower _lower_6 = param.getCheck().getReference().getLower();
                    boolean _tripleNotEquals_41 = (_lower_6 != null);
                    if (_tripleNotEquals_41) {
                      _builder.append("struct Ret ");
                      String _string_57 = param.getName().toString();
                      _builder.append(_string_57);
                      _builder.append(" (");
                      {
                        boolean _equals_18 = param.getCheck().getName().equals("timeStamp");
                        boolean _not_18 = (!_equals_18);
                        if (_not_18) {
                          _builder.append("double ");
                          String _string_58 = param.getCheck().getName().toString();
                          _builder.append(_string_58);
                          _builder.append("[], ");
                        }
                      }
                      _builder.append("double timeStamp[]){");
                      _builder.newLineIfNotEmpty();
                    } else {
                      Same _same_6 = param.getCheck().getReference().getSame();
                      boolean _tripleNotEquals_42 = (_same_6 != null);
                      if (_tripleNotEquals_42) {
                        _builder.append("struct Ret ");
                        String _string_59 = param.getName().toString();
                        _builder.append(_string_59);
                        _builder.append(" (");
                        {
                          boolean _equals_19 = param.getCheck().getName().equals("timeStamp");
                          boolean _not_19 = (!_equals_19);
                          if (_not_19) {
                            _builder.append("double ");
                            String _string_60 = param.getCheck().getName().toString();
                            _builder.append(_string_60);
                            _builder.append("[], ");
                          }
                        }
                        _builder.append("double timeStamp[]){");
                        _builder.newLineIfNotEmpty();
                      } else {
                        NotSame _notsame_6 = param.getCheck().getReference().getNotsame();
                        boolean _tripleNotEquals_43 = (_notsame_6 != null);
                        if (_tripleNotEquals_43) {
                          _builder.append("struct Ret ");
                          String _string_61 = param.getName().toString();
                          _builder.append(_string_61);
                          _builder.append(" (");
                          {
                            boolean _equals_20 = param.getCheck().getName().equals("timeStamp");
                            boolean _not_20 = (!_equals_20);
                            if (_not_20) {
                              _builder.append("double ");
                              String _string_62 = param.getCheck().getName().toString();
                              _builder.append(_string_62);
                              _builder.append("[], ");
                            }
                          }
                          _builder.append("double timeStamp[]){\t\t\t");
                          _builder.newLineIfNotEmpty();
                        } else {
                          Range _range_6 = param.getCheck().getReference().getRange();
                          boolean _tripleNotEquals_44 = (_range_6 != null);
                          if (_tripleNotEquals_44) {
                            _builder.append("struct Ret ");
                            String _string_63 = param.getName().toString();
                            _builder.append(_string_63);
                            _builder.append(" (");
                            {
                              boolean _equals_21 = param.getCheck().getName().equals("timeStamp");
                              boolean _not_21 = (!_equals_21);
                              if (_not_21) {
                                _builder.append("double ");
                                String _string_64 = param.getCheck().getName().toString();
                                _builder.append(_string_64);
                                _builder.append("[], ");
                              }
                            }
                            _builder.append("double timeStamp[]){");
                            _builder.newLineIfNotEmpty();
                          } else {
                            Gap _gap_6 = param.getCheck().getReference().getGap();
                            boolean _tripleNotEquals_45 = (_gap_6 != null);
                            if (_tripleNotEquals_45) {
                              _builder.append("struct Ret ");
                              String _string_65 = param.getName().toString();
                              _builder.append(_string_65);
                              _builder.append(" (");
                              {
                                boolean _equals_22 = param.getCheck().getName().equals("timeStamp");
                                boolean _not_22 = (!_equals_22);
                                if (_not_22) {
                                  _builder.append("double ");
                                  String _string_66 = param.getCheck().getName().toString();
                                  _builder.append(_string_66);
                                  _builder.append("[], ");
                                }
                              }
                              _builder.append("double timeStamp[]){");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                {
                  Upper _upper_7 = param.getCheck().getReference().getUpper();
                  boolean _tripleNotEquals_46 = (_upper_7 != null);
                  if (_tripleNotEquals_46) {
                    _builder.append("struct Ret ");
                    String _string_67 = param.getName().toString();
                    _builder.append(_string_67);
                    _builder.append(" (");
                    {
                      EList<AbstractElement2> _elements_66 = param.getCheck().getEm().getElements();
                      for(final AbstractElement2 par3_18 : _elements_66) {
                        {
                          if (((par3_18.getName() != null) && (!par3_18.getName().equals("timeStamp")))) {
                            _builder.append("double ");
                            String _name_70 = par3_18.getName();
                            _builder.append(_name_70);
                            _builder.append("[],");
                          }
                        }
                      }
                    }
                    _builder.append("double timeStamp[]){");
                    _builder.newLineIfNotEmpty();
                  } else {
                    Lower _lower_7 = param.getCheck().getReference().getLower();
                    boolean _tripleNotEquals_47 = (_lower_7 != null);
                    if (_tripleNotEquals_47) {
                      _builder.append("struct Ret ");
                      String _string_68 = param.getName().toString();
                      _builder.append(_string_68);
                      _builder.append(" (");
                      {
                        EList<AbstractElement2> _elements_67 = param.getCheck().getEm().getElements();
                        for(final AbstractElement2 par3_19 : _elements_67) {
                          {
                            if (((par3_19.getName() != null) && (!par3_19.getName().equals("timeStamp")))) {
                              _builder.append("double ");
                              String _name_71 = par3_19.getName();
                              _builder.append(_name_71);
                              _builder.append("[],");
                            }
                          }
                        }
                      }
                      _builder.append("double timeStamp[]){");
                      _builder.newLineIfNotEmpty();
                    } else {
                      Same _same_7 = param.getCheck().getReference().getSame();
                      boolean _tripleNotEquals_48 = (_same_7 != null);
                      if (_tripleNotEquals_48) {
                        _builder.append("struct Ret ");
                        String _string_69 = param.getName().toString();
                        _builder.append(_string_69);
                        _builder.append(" (");
                        {
                          EList<AbstractElement2> _elements_68 = param.getCheck().getEm().getElements();
                          for(final AbstractElement2 par3_20 : _elements_68) {
                            {
                              if (((par3_20.getName() != null) && (!par3_20.getName().equals("timeStamp")))) {
                                _builder.append("double ");
                                String _name_72 = par3_20.getName();
                                _builder.append(_name_72);
                                _builder.append("[],");
                              }
                            }
                          }
                        }
                        _builder.append("double timeStamp[]){");
                        _builder.newLineIfNotEmpty();
                      } else {
                        NotSame _notsame_7 = param.getCheck().getReference().getNotsame();
                        boolean _tripleNotEquals_49 = (_notsame_7 != null);
                        if (_tripleNotEquals_49) {
                          _builder.append("struct Ret ");
                          String _string_70 = param.getName().toString();
                          _builder.append(_string_70);
                          _builder.append(" (");
                          {
                            EList<AbstractElement2> _elements_69 = param.getCheck().getEm().getElements();
                            for(final AbstractElement2 par3_21 : _elements_69) {
                              {
                                if (((par3_21.getName() != null) && (!par3_21.getName().equals("timeStamp")))) {
                                  _builder.append("double ");
                                  String _name_73 = par3_21.getName();
                                  _builder.append(_name_73);
                                  _builder.append("[],");
                                }
                              }
                            }
                          }
                          _builder.append("double timeStamp[]){\t\t\t");
                          _builder.newLineIfNotEmpty();
                        } else {
                          Range _range_7 = param.getCheck().getReference().getRange();
                          boolean _tripleNotEquals_50 = (_range_7 != null);
                          if (_tripleNotEquals_50) {
                            _builder.append("struct Ret ");
                            String _string_71 = param.getName().toString();
                            _builder.append(_string_71);
                            _builder.append(" (");
                            {
                              EList<AbstractElement2> _elements_70 = param.getCheck().getEm().getElements();
                              for(final AbstractElement2 par3_22 : _elements_70) {
                                {
                                  if (((par3_22.getName() != null) && (!par3_22.getName().equals("timeStamp")))) {
                                    _builder.append("double ");
                                    String _name_74 = par3_22.getName();
                                    _builder.append(_name_74);
                                    _builder.append("[],");
                                  }
                                }
                              }
                            }
                            _builder.append("double timeStamp[]){");
                            _builder.newLineIfNotEmpty();
                          } else {
                            Gap _gap_7 = param.getCheck().getReference().getGap();
                            boolean _tripleNotEquals_51 = (_gap_7 != null);
                            if (_tripleNotEquals_51) {
                              _builder.append("struct Ret ");
                              String _string_72 = param.getName().toString();
                              _builder.append(_string_72);
                              _builder.append(" (");
                              {
                                EList<AbstractElement2> _elements_71 = param.getCheck().getEm().getElements();
                                for(final AbstractElement2 par3_23 : _elements_71) {
                                  {
                                    if (((par3_23.getName() != null) && (!par3_23.getName().equals("timeStamp")))) {
                                      _builder.append("double ");
                                      String _name_75 = par3_23.getName();
                                      _builder.append(_name_75);
                                      _builder.append("[],");
                                    }
                                  }
                                }
                              }
                              _builder.append("double timeStamp[]){");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("struct Ret ret;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return ret;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
