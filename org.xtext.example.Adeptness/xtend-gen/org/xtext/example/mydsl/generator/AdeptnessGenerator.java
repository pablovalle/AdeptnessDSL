/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.adeptness.Check_Gap;
import org.xtext.example.mydsl.adeptness.Check_Range;
import org.xtext.example.mydsl.adeptness.Check_Static_lower_only;
import org.xtext.example.mydsl.adeptness.Check_Static_upper_only;
import org.xtext.example.mydsl.adeptness.Signal;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AdeptnessGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("adeptness.xml", this.createXML(Iterables.<Signal>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Signal.class)));
    Iterable<Signal> _filter = Iterables.<Signal>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Signal.class);
    for (final Signal e : _filter) {
      {
        EList<Check_Range> _check_range = e.getCheck_range();
        for (final Check_Range f : _check_range) {
          {
            String _string = this._iQualifiedNameProvider.getFullyQualifiedName(f).toString("/");
            String _plus = (_string + ".c");
            fsa.generateFile(_plus, this.create_range_c(f));
            String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(f).toString("/");
            String _plus_1 = (_string_1 + ".h");
            fsa.generateFile(_plus_1, this.create_range_h(f));
            String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(f).toString("/");
            String _plus_2 = (_string_2 + ".m");
            fsa.generateFile(_plus_2, this.create_range_m(f));
          }
        }
        EList<Check_Gap> _check_gap = e.getCheck_gap();
        for (final Check_Gap u : _check_gap) {
          {
            String _string = this._iQualifiedNameProvider.getFullyQualifiedName(u).toString("/");
            String _plus = (_string + ".c");
            fsa.generateFile(_plus, this.create_gap_c(u));
            String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(u).toString("/");
            String _plus_1 = (_string_1 + ".h");
            fsa.generateFile(_plus_1, this.create_gap_h(u));
            String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(u).toString("/");
            String _plus_2 = (_string_2 + ".m");
            fsa.generateFile(_plus_2, this.create_gap_m(u));
          }
        }
        EList<Check_Static_lower_only> _check_static_lower = e.getCheck_static_lower();
        for (final Check_Static_lower_only l : _check_static_lower) {
          {
            String _string = this._iQualifiedNameProvider.getFullyQualifiedName(l).toString("/");
            String _plus = (_string + ".c");
            fsa.generateFile(_plus, this.create_low_c(l));
            String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(l).toString("/");
            String _plus_1 = (_string_1 + ".h");
            fsa.generateFile(_plus_1, this.create_low_h(l));
            String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(l).toString("/");
            String _plus_2 = (_string_2 + ".m");
            fsa.generateFile(_plus_2, this.create_low_m(l));
          }
        }
        EList<Check_Static_upper_only> _check_static_upper = e.getCheck_static_upper();
        for (final Check_Static_upper_only d : _check_static_upper) {
          {
            String _string = this._iQualifiedNameProvider.getFullyQualifiedName(d).toString("/");
            String _plus = (_string + ".c");
            fsa.generateFile(_plus, this.create_up_c(d));
            String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(d).toString("/");
            String _plus_1 = (_string_1 + ".h");
            fsa.generateFile(_plus_1, this.create_up_h(d));
            String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(d).toString("/");
            String _plus_2 = (_string_2 + ".m");
            fsa.generateFile(_plus_2, this.create_up_m(d));
          }
        }
      }
    }
  }
  
  public CharSequence createXML(final Iterable<Signal> signals) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\'1.0\' encoding=\"UTF-8\"?>");
    _builder.newLine();
    {
      for(final Signal s : signals) {
        _builder.append("\t");
        _builder.append("<Signal>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("<SignalDescription name=\"");
        String _string = this._iQualifiedNameProvider.getFullyQualifiedName(s).toString("/");
        _builder.append(_string, "\t\t");
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("<TypeSignalDescription name=\"Static\">");
        _builder.newLine();
        {
          EList<Check_Gap> _check_gap = s.getCheck_gap();
          for(final Check_Gap c : _check_gap) {
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("<Type name=\"");
            String _string_1 = c.getName().toString();
            _builder.append(_string_1, "\t\t\t\t");
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("<Parameters>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t\t");
            _builder.append("<");
            String _string_2 = c.getInclusive_bound().eClass().getName().toString();
            _builder.append(_string_2, "\t\t\t\t\t\t");
            _builder.append(">");
            boolean _isBool = c.getInclusive_bound().getValue().isBool();
            _builder.append(_isBool, "\t\t\t\t\t\t");
            _builder.append("</");
            String _string_3 = c.getInclusive_bound().eClass().getName().toString();
            _builder.append(_string_3, "\t\t\t\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t\t");
            _builder.append("<");
            String _string_4 = c.getBound_up().eClass().getName().toString();
            _builder.append(_string_4, "\t\t\t\t\t\t");
            _builder.append(">");
            double _dVal = c.getBound_up().getValue().getDVal();
            _builder.append(_dVal, "\t\t\t\t\t\t");
            _builder.append("</");
            String _string_5 = c.getBound_up().eClass().getName().toString();
            _builder.append(_string_5, "\t\t\t\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t\t");
            _builder.append("<");
            String _string_6 = c.getBound_low().eClass().getName().toString();
            _builder.append(_string_6, "\t\t\t\t\t\t");
            _builder.append(">");
            double _dVal_1 = c.getBound_low().getValue().getDVal();
            _builder.append(_dVal_1, "\t\t\t\t\t\t");
            _builder.append("</");
            String _string_7 = c.getBound_low().eClass().getName().toString();
            _builder.append(_string_7, "\t\t\t\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("</Parameters>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("</Type>\t\t\t\t");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("</TypeSignalDescription>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("<TypeSignalDescription name=\"Static_Low\">");
        _builder.newLine();
        {
          EList<Check_Static_lower_only> _check_static_lower = s.getCheck_static_lower();
          for(final Check_Static_lower_only l : _check_static_lower) {
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("<Type name=\"");
            String _string_8 = l.getName().toString();
            _builder.append(_string_8, "\t\t\t\t");
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("<Parameters>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t\t");
            _builder.append("<");
            String _string_9 = l.getInclusive_bound().eClass().getName().toString();
            _builder.append(_string_9, "\t\t\t\t\t\t");
            _builder.append(">");
            boolean _isBool_1 = l.getInclusive_bound().getValue().isBool();
            _builder.append(_isBool_1, "\t\t\t\t\t\t");
            _builder.append("</");
            String _string_10 = l.getInclusive_bound().eClass().getName().toString();
            _builder.append(_string_10, "\t\t\t\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t\t");
            _builder.append("<");
            String _string_11 = l.getBound_low().eClass().getName().toString();
            _builder.append(_string_11, "\t\t\t\t\t\t");
            _builder.append(">");
            double _dVal_2 = l.getBound_low().getValue().getDVal();
            _builder.append(_dVal_2, "\t\t\t\t\t\t");
            _builder.append("</");
            String _string_12 = l.getBound_low().eClass().getName().toString();
            _builder.append(_string_12, "\t\t\t\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("</Parameters>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("</Type>\t\t\t\t");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("</TypeSignalDescription>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("<TypeSignalDescription name=\"Static_Up\">");
        _builder.newLine();
        {
          EList<Check_Static_upper_only> _check_static_upper = s.getCheck_static_upper();
          for(final Check_Static_upper_only u : _check_static_upper) {
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("<Type name=\"");
            String _string_13 = u.getName().toString();
            _builder.append(_string_13, "\t\t\t\t");
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("<Parameters>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t\t");
            _builder.append("<");
            String _string_14 = u.getInclusive_bound().eClass().getName().toString();
            _builder.append(_string_14, "\t\t\t\t\t\t");
            _builder.append(">");
            boolean _isBool_2 = u.getInclusive_bound().getValue().isBool();
            _builder.append(_isBool_2, "\t\t\t\t\t\t");
            _builder.append("</");
            String _string_15 = u.getInclusive_bound().eClass().getName().toString();
            _builder.append(_string_15, "\t\t\t\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t\t");
            _builder.append("<");
            String _string_16 = u.getBound_up().eClass().getName().toString();
            _builder.append(_string_16, "\t\t\t\t\t\t");
            _builder.append(">");
            double _dVal_3 = u.getBound_up().getValue().getDVal();
            _builder.append(_dVal_3, "\t\t\t\t\t\t");
            _builder.append("</");
            String _string_17 = u.getBound_up().eClass().getName().toString();
            _builder.append(_string_17, "\t\t\t\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("</Parameters>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("</Type>\t\t\t\t");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("</TypeSignalDescription>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("<TypeSignalDescription name=\"Dynamic\">");
        _builder.newLine();
        {
          EList<Check_Range> _check_range = s.getCheck_range();
          for(final Check_Range d : _check_range) {
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("<Type name=\"");
            String _string_18 = d.getName().toString();
            _builder.append(_string_18, "\t\t\t\t");
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("<Parameters>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t\t");
            _builder.append("<");
            String _string_19 = d.getInclusive_bound().eClass().getName().toString();
            _builder.append(_string_19, "\t\t\t\t\t\t");
            _builder.append(">");
            boolean _isBool_3 = d.getInclusive_bound().getValue().isBool();
            _builder.append(_isBool_3, "\t\t\t\t\t\t");
            _builder.append("</");
            String _string_20 = d.getInclusive_bound().eClass().getName().toString();
            _builder.append(_string_20, "\t\t\t\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t\t");
            _builder.append("<");
            String _string_21 = d.getBound_up().eClass().getName().toString();
            _builder.append(_string_21, "\t\t\t\t\t\t");
            _builder.append(">");
            double _dVal_4 = d.getBound_up().getValue().getDVal();
            _builder.append(_dVal_4, "\t\t\t\t\t\t");
            _builder.append("</");
            String _string_22 = d.getBound_up().eClass().getName().toString();
            _builder.append(_string_22, "\t\t\t\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t\t");
            _builder.append("<");
            String _string_23 = d.getBound_low().eClass().getName().toString();
            _builder.append(_string_23, "\t\t\t\t\t\t");
            _builder.append(">");
            double _dVal_5 = d.getBound_low().getValue().getDVal();
            _builder.append(_dVal_5, "\t\t\t\t\t\t");
            _builder.append("</");
            String _string_24 = d.getBound_low().eClass().getName().toString();
            _builder.append(_string_24, "\t\t\t\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("</Parameters>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("</Type>\t\t");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("</TypeSignalDescription>\t\t\t\t\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("</SignalDescription>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("</Signal>");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence create_up_m(final Check_Static_upper_only param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("def= legacy_code(\'initialize\');");
    _builder.newLine();
    _builder.append("def.OutputFcnSpec= \'double y1=");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append("(double u1)\';");
    _builder.newLineIfNotEmpty();
    _builder.append("def.SourceFiles= {\'");
    String _string_1 = param.getName().toString();
    _builder.append(_string_1);
    _builder.append(".c\'};");
    _builder.newLineIfNotEmpty();
    _builder.append("def.HeaderFiles= {\'");
    String _string_2 = param.getName().toString();
    _builder.append(_string_2);
    _builder.append(".h\'};");
    _builder.newLineIfNotEmpty();
    _builder.append("def.SFunctionName= \'S_");
    String _string_3 = param.getName().toString();
    _builder.append(_string_3);
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("legacy_code(\'sfcn_cmex_generate\' ,def)");
    _builder.newLine();
    _builder.append("legacy_code(\'compile\' ,def)");
    _builder.newLine();
    _builder.append("exit");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_up_h(final Check_Static_upper_only param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#ifndef ");
    String _upperCase = param.getName().toString().toUpperCase();
    _builder.append(_upperCase);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.append("#define ");
    String _upperCase_1 = param.getName().toString().toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.append("double ");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append("(double Input);");
    _builder.newLineIfNotEmpty();
    _builder.append("#endif");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_up_c(final Check_Static_upper_only param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include \"");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append(".h\"");
    _builder.newLineIfNotEmpty();
    _builder.append("double ");
    String _string_1 = param.getName().toString();
    _builder.append(_string_1);
    _builder.append("(double Input){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("double ret=0;");
    _builder.newLine();
    {
      boolean _isBool = param.getInclusive_bound().getValue().isBool();
      if (_isBool) {
        _builder.append("\t");
        _builder.append("if(Input <=");
        double _dVal = param.getBound_up().getValue().getDVal();
        _builder.append(_dVal, "\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("ret=1;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}\t");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("if(Input <");
        double _dVal_1 = param.getBound_up().getValue().getDVal();
        _builder.append(_dVal_1, "\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("ret=1;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("return ret;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_low_m(final Check_Static_lower_only param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("def= legacy_code(\'initialize\');");
    _builder.newLine();
    _builder.append("def.OutputFcnSpec= \'double y1=");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append("(double u1)\';");
    _builder.newLineIfNotEmpty();
    _builder.append("def.SourceFiles= {\'");
    String _string_1 = param.getName().toString();
    _builder.append(_string_1);
    _builder.append(".c\'};");
    _builder.newLineIfNotEmpty();
    _builder.append("def.HeaderFiles= {\'");
    String _string_2 = param.getName().toString();
    _builder.append(_string_2);
    _builder.append(".h\'};");
    _builder.newLineIfNotEmpty();
    _builder.append("def.SFunctionName= \'S_");
    String _string_3 = param.getName().toString();
    _builder.append(_string_3);
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("legacy_code(\'sfcn_cmex_generate\' ,def)");
    _builder.newLine();
    _builder.append("legacy_code(\'compile\' ,def)");
    _builder.newLine();
    _builder.append("exit");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_low_h(final Check_Static_lower_only param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#ifndef ");
    String _upperCase = param.getName().toString().toUpperCase();
    _builder.append(_upperCase);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.append("#define ");
    String _upperCase_1 = param.getName().toString().toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.append("double ");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append("(double Input);");
    _builder.newLineIfNotEmpty();
    _builder.append("#endif");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_low_c(final Check_Static_lower_only param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include \"");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append(".h\"");
    _builder.newLineIfNotEmpty();
    _builder.append("double ");
    String _string_1 = param.getName().toString();
    _builder.append(_string_1);
    _builder.append("(double Input){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("double ret=0;");
    _builder.newLine();
    {
      boolean _isBool = param.getInclusive_bound().getValue().isBool();
      if (_isBool) {
        _builder.append("\t");
        _builder.append("if(Input >= ");
        double _dVal = param.getBound_low().getValue().getDVal();
        _builder.append(_dVal, "\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("ret=1;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}\t");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("if(Input > ");
        double _dVal_1 = param.getBound_low().getValue().getDVal();
        _builder.append(_dVal_1, "\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("ret=1;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("return ret;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_range_m(final Check_Range param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("def= legacy_code(\'initialize\');");
    _builder.newLine();
    _builder.append("def.OutputFcnSpec= \'double y1=");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append("(double u1)\';");
    _builder.newLineIfNotEmpty();
    _builder.append("def.SourceFiles= {\'");
    String _string_1 = param.getName().toString();
    _builder.append(_string_1);
    _builder.append(".c\'};");
    _builder.newLineIfNotEmpty();
    _builder.append("def.HeaderFiles= {\'");
    String _string_2 = param.getName().toString();
    _builder.append(_string_2);
    _builder.append(".h\'};");
    _builder.newLineIfNotEmpty();
    _builder.append("def.SFunctionName= \'S_");
    String _string_3 = param.getName().toString();
    _builder.append(_string_3);
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("legacy_code(\'sfcn_cmex_generate\' ,def)");
    _builder.newLine();
    _builder.append("legacy_code(\'compile\' ,def)");
    _builder.newLine();
    _builder.append("exit");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_range_h(final Check_Range param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#ifndef ");
    String _upperCase = param.getName().toString().toUpperCase();
    _builder.append(_upperCase);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.append("#define ");
    String _upperCase_1 = param.getName().toString().toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.append("double ");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append("(double Input);");
    _builder.newLineIfNotEmpty();
    _builder.append("#endif");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_range_c(final Check_Range param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include \"");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append(".h\"");
    _builder.newLineIfNotEmpty();
    _builder.append("double ");
    String _string_1 = param.getName().toString();
    _builder.append(_string_1);
    _builder.append("(double Input){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("double ret=0;");
    _builder.newLine();
    {
      boolean _isBool = param.getInclusive_bound().getValue().isBool();
      if (_isBool) {
        _builder.append("\t");
        _builder.append("if(Input >= ");
        double _dVal = param.getBound_low().getValue().getDVal();
        _builder.append(_dVal, "\t");
        _builder.append(" && Input <= ");
        double _dVal_1 = param.getBound_up().getValue().getDVal();
        _builder.append(_dVal_1, "\t");
        _builder.append(" ){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("ret=1;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}\t");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("if(Input > ");
        double _dVal_2 = param.getBound_low().getValue().getDVal();
        _builder.append(_dVal_2, "\t");
        _builder.append(" && Input < ");
        double _dVal_3 = param.getBound_up().getValue().getDVal();
        _builder.append(_dVal_3, "\t");
        _builder.append(" ){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("ret=1;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("return ret;\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_gap_m(final Check_Gap param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("def= legacy_code(\'initialize\');");
    _builder.newLine();
    _builder.append("def.OutputFcnSpec= \'double y1=");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append("(double u1)\';");
    _builder.newLineIfNotEmpty();
    _builder.append("def.SourceFiles= {\'");
    String _string_1 = param.getName().toString();
    _builder.append(_string_1);
    _builder.append(".c\'};");
    _builder.newLineIfNotEmpty();
    _builder.append("def.HeaderFiles= {\'");
    String _string_2 = param.getName().toString();
    _builder.append(_string_2);
    _builder.append(".h\'};");
    _builder.newLineIfNotEmpty();
    _builder.append("def.SFunctionName= \'S_");
    String _string_3 = param.getName().toString();
    _builder.append(_string_3);
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("legacy_code(\'sfcn_cmex_generate\' ,def)");
    _builder.newLine();
    _builder.append("legacy_code(\'compile\' ,def)");
    _builder.newLine();
    _builder.append("exit");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_gap_h(final Check_Gap param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#ifndef ");
    String _upperCase = param.getName().toString().toUpperCase();
    _builder.append(_upperCase);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.append("#define ");
    String _upperCase_1 = param.getName().toString().toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.append("double ");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append("(double Input);");
    _builder.newLineIfNotEmpty();
    _builder.append("#endif");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence create_gap_c(final Check_Gap param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include \"");
    String _string = param.getName().toString();
    _builder.append(_string);
    _builder.append(".h\"");
    _builder.newLineIfNotEmpty();
    _builder.append("double ");
    String _string_1 = param.getName().toString();
    _builder.append(_string_1);
    _builder.append("(double Input){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("double ret=0;");
    _builder.newLine();
    {
      boolean _isBool = param.getInclusive_bound().getValue().isBool();
      if (_isBool) {
        _builder.append("\t");
        _builder.append("if(Input <= ");
        double _dVal = param.getBound_low().getValue().getDVal();
        _builder.append(_dVal, "\t");
        _builder.append(" || Input >= ");
        double _dVal_1 = param.getBound_up().getValue().getDVal();
        _builder.append(_dVal_1, "\t");
        _builder.append(" ){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("ret=1;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}\t");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("if(Input < ");
        double _dVal_2 = param.getBound_low().getValue().getDVal();
        _builder.append(_dVal_2, "\t");
        _builder.append(" || Input > ");
        double _dVal_3 = param.getBound_up().getValue().getDVal();
        _builder.append(_dVal_3, "\t");
        _builder.append(" ){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t\t\t");
        _builder.append("ret=1;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("return ret;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
