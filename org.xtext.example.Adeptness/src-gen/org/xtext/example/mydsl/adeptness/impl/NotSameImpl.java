/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.adeptness.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.adeptness.AdeptnessPackage;
import org.xtext.example.mydsl.adeptness.Bound_up;
import org.xtext.example.mydsl.adeptness.NotSame;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Not Same</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.NotSameImpl#getBound_upp <em>Bound upp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NotSameImpl extends MinimalEObjectImpl.Container implements NotSame
{
  /**
   * The cached value of the '{@link #getBound_upp() <em>Bound upp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBound_upp()
   * @generated
   * @ordered
   */
  protected Bound_up bound_upp;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NotSameImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AdeptnessPackage.Literals.NOT_SAME;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bound_up getBound_upp()
  {
    return bound_upp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBound_upp(Bound_up newBound_upp, NotificationChain msgs)
  {
    Bound_up oldBound_upp = bound_upp;
    bound_upp = newBound_upp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.NOT_SAME__BOUND_UPP, oldBound_upp, newBound_upp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBound_upp(Bound_up newBound_upp)
  {
    if (newBound_upp != bound_upp)
    {
      NotificationChain msgs = null;
      if (bound_upp != null)
        msgs = ((InternalEObject)bound_upp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.NOT_SAME__BOUND_UPP, null, msgs);
      if (newBound_upp != null)
        msgs = ((InternalEObject)newBound_upp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.NOT_SAME__BOUND_UPP, null, msgs);
      msgs = basicSetBound_upp(newBound_upp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.NOT_SAME__BOUND_UPP, newBound_upp, newBound_upp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AdeptnessPackage.NOT_SAME__BOUND_UPP:
        return basicSetBound_upp(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AdeptnessPackage.NOT_SAME__BOUND_UPP:
        return getBound_upp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AdeptnessPackage.NOT_SAME__BOUND_UPP:
        setBound_upp((Bound_up)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.NOT_SAME__BOUND_UPP:
        setBound_upp((Bound_up)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.NOT_SAME__BOUND_UPP:
        return bound_upp != null;
    }
    return super.eIsSet(featureID);
  }

} //NotSameImpl
