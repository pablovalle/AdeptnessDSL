/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.adeptness.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.adeptness.AdeptnessPackage;
import org.xtext.example.mydsl.adeptness.DOUBLE;
import org.xtext.example.mydsl.adeptness.MonitoringVariable;
import org.xtext.example.mydsl.adeptness.Sig_type;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Monitoring Variable</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.MonitoringVariableImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.MonitoringVariableImpl#getMonitoringVariableDatatype <em>Monitoring Variable Datatype</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.MonitoringVariableImpl#getMax <em>Max</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.MonitoringVariableImpl#getMin <em>Min</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MonitoringVariableImpl extends MinimalEObjectImpl.Container implements MonitoringVariable
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getMonitoringVariableDatatype() <em>Monitoring Variable Datatype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMonitoringVariableDatatype()
   * @generated
   * @ordered
   */
  protected Sig_type monitoringVariableDatatype;

  /**
   * The cached value of the '{@link #getMax() <em>Max</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMax()
   * @generated
   * @ordered
   */
  protected DOUBLE max;

  /**
   * The cached value of the '{@link #getMin() <em>Min</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMin()
   * @generated
   * @ordered
   */
  protected DOUBLE min;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MonitoringVariableImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AdeptnessPackage.Literals.MONITORING_VARIABLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.MONITORING_VARIABLE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sig_type getMonitoringVariableDatatype()
  {
    return monitoringVariableDatatype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMonitoringVariableDatatype(Sig_type newMonitoringVariableDatatype, NotificationChain msgs)
  {
    Sig_type oldMonitoringVariableDatatype = monitoringVariableDatatype;
    monitoringVariableDatatype = newMonitoringVariableDatatype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.MONITORING_VARIABLE__MONITORING_VARIABLE_DATATYPE, oldMonitoringVariableDatatype, newMonitoringVariableDatatype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMonitoringVariableDatatype(Sig_type newMonitoringVariableDatatype)
  {
    if (newMonitoringVariableDatatype != monitoringVariableDatatype)
    {
      NotificationChain msgs = null;
      if (monitoringVariableDatatype != null)
        msgs = ((InternalEObject)monitoringVariableDatatype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.MONITORING_VARIABLE__MONITORING_VARIABLE_DATATYPE, null, msgs);
      if (newMonitoringVariableDatatype != null)
        msgs = ((InternalEObject)newMonitoringVariableDatatype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.MONITORING_VARIABLE__MONITORING_VARIABLE_DATATYPE, null, msgs);
      msgs = basicSetMonitoringVariableDatatype(newMonitoringVariableDatatype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.MONITORING_VARIABLE__MONITORING_VARIABLE_DATATYPE, newMonitoringVariableDatatype, newMonitoringVariableDatatype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DOUBLE getMax()
  {
    return max;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMax(DOUBLE newMax, NotificationChain msgs)
  {
    DOUBLE oldMax = max;
    max = newMax;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.MONITORING_VARIABLE__MAX, oldMax, newMax);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMax(DOUBLE newMax)
  {
    if (newMax != max)
    {
      NotificationChain msgs = null;
      if (max != null)
        msgs = ((InternalEObject)max).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.MONITORING_VARIABLE__MAX, null, msgs);
      if (newMax != null)
        msgs = ((InternalEObject)newMax).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.MONITORING_VARIABLE__MAX, null, msgs);
      msgs = basicSetMax(newMax, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.MONITORING_VARIABLE__MAX, newMax, newMax));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DOUBLE getMin()
  {
    return min;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMin(DOUBLE newMin, NotificationChain msgs)
  {
    DOUBLE oldMin = min;
    min = newMin;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.MONITORING_VARIABLE__MIN, oldMin, newMin);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMin(DOUBLE newMin)
  {
    if (newMin != min)
    {
      NotificationChain msgs = null;
      if (min != null)
        msgs = ((InternalEObject)min).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.MONITORING_VARIABLE__MIN, null, msgs);
      if (newMin != null)
        msgs = ((InternalEObject)newMin).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.MONITORING_VARIABLE__MIN, null, msgs);
      msgs = basicSetMin(newMin, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.MONITORING_VARIABLE__MIN, newMin, newMin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AdeptnessPackage.MONITORING_VARIABLE__MONITORING_VARIABLE_DATATYPE:
        return basicSetMonitoringVariableDatatype(null, msgs);
      case AdeptnessPackage.MONITORING_VARIABLE__MAX:
        return basicSetMax(null, msgs);
      case AdeptnessPackage.MONITORING_VARIABLE__MIN:
        return basicSetMin(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AdeptnessPackage.MONITORING_VARIABLE__NAME:
        return getName();
      case AdeptnessPackage.MONITORING_VARIABLE__MONITORING_VARIABLE_DATATYPE:
        return getMonitoringVariableDatatype();
      case AdeptnessPackage.MONITORING_VARIABLE__MAX:
        return getMax();
      case AdeptnessPackage.MONITORING_VARIABLE__MIN:
        return getMin();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AdeptnessPackage.MONITORING_VARIABLE__NAME:
        setName((String)newValue);
        return;
      case AdeptnessPackage.MONITORING_VARIABLE__MONITORING_VARIABLE_DATATYPE:
        setMonitoringVariableDatatype((Sig_type)newValue);
        return;
      case AdeptnessPackage.MONITORING_VARIABLE__MAX:
        setMax((DOUBLE)newValue);
        return;
      case AdeptnessPackage.MONITORING_VARIABLE__MIN:
        setMin((DOUBLE)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.MONITORING_VARIABLE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AdeptnessPackage.MONITORING_VARIABLE__MONITORING_VARIABLE_DATATYPE:
        setMonitoringVariableDatatype((Sig_type)null);
        return;
      case AdeptnessPackage.MONITORING_VARIABLE__MAX:
        setMax((DOUBLE)null);
        return;
      case AdeptnessPackage.MONITORING_VARIABLE__MIN:
        setMin((DOUBLE)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.MONITORING_VARIABLE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AdeptnessPackage.MONITORING_VARIABLE__MONITORING_VARIABLE_DATATYPE:
        return monitoringVariableDatatype != null;
      case AdeptnessPackage.MONITORING_VARIABLE__MAX:
        return max != null;
      case AdeptnessPackage.MONITORING_VARIABLE__MIN:
        return min != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //MonitoringVariableImpl
