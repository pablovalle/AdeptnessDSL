/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.adeptness.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.adeptness.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AdeptnessFactoryImpl extends EFactoryImpl implements AdeptnessFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AdeptnessFactory init()
  {
    try
    {
      AdeptnessFactory theAdeptnessFactory = (AdeptnessFactory)EPackage.Registry.INSTANCE.getEFactory(AdeptnessPackage.eNS_URI);
      if (theAdeptnessFactory != null)
      {
        return theAdeptnessFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AdeptnessFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AdeptnessFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AdeptnessPackage.ADEPTNESS: return createAdeptness();
      case AdeptnessPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case AdeptnessPackage.IMPORT: return createImport();
      case AdeptnessPackage.TYPE: return createType();
      case AdeptnessPackage.SIGNAL: return createSignal();
      case AdeptnessPackage.CHECK_STATIC_UPPER_ONLY: return createCheck_Static_upper_only();
      case AdeptnessPackage.CHECK_STATIC_LOWER_ONLY: return createCheck_Static_lower_only();
      case AdeptnessPackage.CHECK_RANGE: return createCheck_Range();
      case AdeptnessPackage.CHECK_GAP: return createCheck_Gap();
      case AdeptnessPackage.INCLUSIVE_BOUND: return createInclusiveBound();
      case AdeptnessPackage.BOUND_UP: return createBound_up();
      case AdeptnessPackage.BOUND_DOWN: return createBound_Down();
      case AdeptnessPackage.BOOLEAN: return createBOOLEAN();
      case AdeptnessPackage.DOUBLE: return createDOUBLE();
      case AdeptnessPackage.DATA_TYPE: return createDataType();
      case AdeptnessPackage.PACKAGE_DECLARATION: return createPackageDeclaration();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adeptness createAdeptness()
  {
    AdeptnessImpl adeptness = new AdeptnessImpl();
    return adeptness;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signal createSignal()
  {
    SignalImpl signal = new SignalImpl();
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Check_Static_upper_only createCheck_Static_upper_only()
  {
    Check_Static_upper_onlyImpl check_Static_upper_only = new Check_Static_upper_onlyImpl();
    return check_Static_upper_only;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Check_Static_lower_only createCheck_Static_lower_only()
  {
    Check_Static_lower_onlyImpl check_Static_lower_only = new Check_Static_lower_onlyImpl();
    return check_Static_lower_only;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Check_Range createCheck_Range()
  {
    Check_RangeImpl check_Range = new Check_RangeImpl();
    return check_Range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Check_Gap createCheck_Gap()
  {
    Check_GapImpl check_Gap = new Check_GapImpl();
    return check_Gap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InclusiveBound createInclusiveBound()
  {
    InclusiveBoundImpl inclusiveBound = new InclusiveBoundImpl();
    return inclusiveBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bound_up createBound_up()
  {
    Bound_upImpl bound_up = new Bound_upImpl();
    return bound_up;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bound_Down createBound_Down()
  {
    Bound_DownImpl bound_Down = new Bound_DownImpl();
    return bound_Down;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BOOLEAN createBOOLEAN()
  {
    BOOLEANImpl boolean_ = new BOOLEANImpl();
    return boolean_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DOUBLE createDOUBLE()
  {
    DOUBLEImpl double_ = new DOUBLEImpl();
    return double_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType createDataType()
  {
    DataTypeImpl dataType = new DataTypeImpl();
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PackageDeclaration createPackageDeclaration()
  {
    PackageDeclarationImpl packageDeclaration = new PackageDeclarationImpl();
    return packageDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdeptnessPackage getAdeptnessPackage()
  {
    return (AdeptnessPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AdeptnessPackage getPackage()
  {
    return AdeptnessPackage.eINSTANCE;
  }

} //AdeptnessFactoryImpl
