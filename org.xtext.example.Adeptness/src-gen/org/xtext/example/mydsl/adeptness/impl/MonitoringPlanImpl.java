/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.adeptness.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.adeptness.AdeptnessPackage;
import org.xtext.example.mydsl.adeptness.MonitoringPlan;
import org.xtext.example.mydsl.adeptness.MonitoringVariable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Monitoring Plan</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.MonitoringPlanImpl#getMonitoringVariables <em>Monitoring Variables</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MonitoringPlanImpl extends MinimalEObjectImpl.Container implements MonitoringPlan
{
  /**
   * The cached value of the '{@link #getMonitoringVariables() <em>Monitoring Variables</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMonitoringVariables()
   * @generated
   * @ordered
   */
  protected MonitoringVariable monitoringVariables;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MonitoringPlanImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AdeptnessPackage.Literals.MONITORING_PLAN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MonitoringVariable getMonitoringVariables()
  {
    return monitoringVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMonitoringVariables(MonitoringVariable newMonitoringVariables, NotificationChain msgs)
  {
    MonitoringVariable oldMonitoringVariables = monitoringVariables;
    monitoringVariables = newMonitoringVariables;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.MONITORING_PLAN__MONITORING_VARIABLES, oldMonitoringVariables, newMonitoringVariables);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMonitoringVariables(MonitoringVariable newMonitoringVariables)
  {
    if (newMonitoringVariables != monitoringVariables)
    {
      NotificationChain msgs = null;
      if (monitoringVariables != null)
        msgs = ((InternalEObject)monitoringVariables).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.MONITORING_PLAN__MONITORING_VARIABLES, null, msgs);
      if (newMonitoringVariables != null)
        msgs = ((InternalEObject)newMonitoringVariables).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.MONITORING_PLAN__MONITORING_VARIABLES, null, msgs);
      msgs = basicSetMonitoringVariables(newMonitoringVariables, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.MONITORING_PLAN__MONITORING_VARIABLES, newMonitoringVariables, newMonitoringVariables));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AdeptnessPackage.MONITORING_PLAN__MONITORING_VARIABLES:
        return basicSetMonitoringVariables(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AdeptnessPackage.MONITORING_PLAN__MONITORING_VARIABLES:
        return getMonitoringVariables();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AdeptnessPackage.MONITORING_PLAN__MONITORING_VARIABLES:
        setMonitoringVariables((MonitoringVariable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.MONITORING_PLAN__MONITORING_VARIABLES:
        setMonitoringVariables((MonitoringVariable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.MONITORING_PLAN__MONITORING_VARIABLES:
        return monitoringVariables != null;
    }
    return super.eIsSet(featureID);
  }

} //MonitoringPlanImpl
