/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.adeptness.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.adeptness.AdeptnessPackage;
import org.xtext.example.mydsl.adeptness.Inputs;
import org.xtext.example.mydsl.adeptness.Test;
import org.xtext.example.mydsl.adeptness.TestingOracle;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Test</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.TestImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.TestImpl#getSut <em>Sut</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.TestImpl#getTestLevel <em>Test Level</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.TestImpl#getInputs <em>Inputs</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.TestImpl#getOracles <em>Oracles</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestImpl extends MinimalEObjectImpl.Container implements Test
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getSut() <em>Sut</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSut()
   * @generated
   * @ordered
   */
  protected static final String SUT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSut() <em>Sut</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSut()
   * @generated
   * @ordered
   */
  protected String sut = SUT_EDEFAULT;

  /**
   * The default value of the '{@link #getTestLevel() <em>Test Level</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestLevel()
   * @generated
   * @ordered
   */
  protected static final String TEST_LEVEL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTestLevel() <em>Test Level</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestLevel()
   * @generated
   * @ordered
   */
  protected String testLevel = TEST_LEVEL_EDEFAULT;

  /**
   * The cached value of the '{@link #getInputs() <em>Inputs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputs()
   * @generated
   * @ordered
   */
  protected EList<Inputs> inputs;

  /**
   * The cached value of the '{@link #getOracles() <em>Oracles</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOracles()
   * @generated
   * @ordered
   */
  protected EList<TestingOracle> oracles;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AdeptnessPackage.Literals.TEST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.TEST__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSut()
  {
    return sut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSut(String newSut)
  {
    String oldSut = sut;
    sut = newSut;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.TEST__SUT, oldSut, sut));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTestLevel()
  {
    return testLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTestLevel(String newTestLevel)
  {
    String oldTestLevel = testLevel;
    testLevel = newTestLevel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.TEST__TEST_LEVEL, oldTestLevel, testLevel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Inputs> getInputs()
  {
    if (inputs == null)
    {
      inputs = new EObjectContainmentEList<Inputs>(Inputs.class, this, AdeptnessPackage.TEST__INPUTS);
    }
    return inputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TestingOracle> getOracles()
  {
    if (oracles == null)
    {
      oracles = new EObjectContainmentEList<TestingOracle>(TestingOracle.class, this, AdeptnessPackage.TEST__ORACLES);
    }
    return oracles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AdeptnessPackage.TEST__INPUTS:
        return ((InternalEList<?>)getInputs()).basicRemove(otherEnd, msgs);
      case AdeptnessPackage.TEST__ORACLES:
        return ((InternalEList<?>)getOracles()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AdeptnessPackage.TEST__NAME:
        return getName();
      case AdeptnessPackage.TEST__SUT:
        return getSut();
      case AdeptnessPackage.TEST__TEST_LEVEL:
        return getTestLevel();
      case AdeptnessPackage.TEST__INPUTS:
        return getInputs();
      case AdeptnessPackage.TEST__ORACLES:
        return getOracles();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AdeptnessPackage.TEST__NAME:
        setName((String)newValue);
        return;
      case AdeptnessPackage.TEST__SUT:
        setSut((String)newValue);
        return;
      case AdeptnessPackage.TEST__TEST_LEVEL:
        setTestLevel((String)newValue);
        return;
      case AdeptnessPackage.TEST__INPUTS:
        getInputs().clear();
        getInputs().addAll((Collection<? extends Inputs>)newValue);
        return;
      case AdeptnessPackage.TEST__ORACLES:
        getOracles().clear();
        getOracles().addAll((Collection<? extends TestingOracle>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.TEST__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AdeptnessPackage.TEST__SUT:
        setSut(SUT_EDEFAULT);
        return;
      case AdeptnessPackage.TEST__TEST_LEVEL:
        setTestLevel(TEST_LEVEL_EDEFAULT);
        return;
      case AdeptnessPackage.TEST__INPUTS:
        getInputs().clear();
        return;
      case AdeptnessPackage.TEST__ORACLES:
        getOracles().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.TEST__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AdeptnessPackage.TEST__SUT:
        return SUT_EDEFAULT == null ? sut != null : !SUT_EDEFAULT.equals(sut);
      case AdeptnessPackage.TEST__TEST_LEVEL:
        return TEST_LEVEL_EDEFAULT == null ? testLevel != null : !TEST_LEVEL_EDEFAULT.equals(testLevel);
      case AdeptnessPackage.TEST__INPUTS:
        return inputs != null && !inputs.isEmpty();
      case AdeptnessPackage.TEST__ORACLES:
        return oracles != null && !oracles.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", sut: ");
    result.append(sut);
    result.append(", testLevel: ");
    result.append(testLevel);
    result.append(')');
    return result.toString();
  }

} //TestImpl
