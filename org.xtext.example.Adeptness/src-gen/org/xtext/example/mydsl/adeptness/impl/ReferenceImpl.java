/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.adeptness.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.adeptness.AdeptnessPackage;
import org.xtext.example.mydsl.adeptness.Gap;
import org.xtext.example.mydsl.adeptness.Lower;
import org.xtext.example.mydsl.adeptness.NotSame;
import org.xtext.example.mydsl.adeptness.Range;
import org.xtext.example.mydsl.adeptness.Reference;
import org.xtext.example.mydsl.adeptness.Same;
import org.xtext.example.mydsl.adeptness.Upper;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Reference</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.ReferenceImpl#getUpper <em>Upper</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.ReferenceImpl#getLower <em>Lower</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.ReferenceImpl#getRange <em>Range</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.ReferenceImpl#getGap <em>Gap</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.ReferenceImpl#getSame <em>Same</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.ReferenceImpl#getNotsame <em>Notsame</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReferenceImpl extends MinimalEObjectImpl.Container implements Reference
{
  /**
   * The cached value of the '{@link #getUpper() <em>Upper</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpper()
   * @generated
   * @ordered
   */
  protected Upper upper;

  /**
   * The cached value of the '{@link #getLower() <em>Lower</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLower()
   * @generated
   * @ordered
   */
  protected Lower lower;

  /**
   * The cached value of the '{@link #getRange() <em>Range</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRange()
   * @generated
   * @ordered
   */
  protected Range range;

  /**
   * The cached value of the '{@link #getGap() <em>Gap</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGap()
   * @generated
   * @ordered
   */
  protected Gap gap;

  /**
   * The cached value of the '{@link #getSame() <em>Same</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSame()
   * @generated
   * @ordered
   */
  protected Same same;

  /**
   * The cached value of the '{@link #getNotsame() <em>Notsame</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNotsame()
   * @generated
   * @ordered
   */
  protected NotSame notsame;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReferenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AdeptnessPackage.Literals.REFERENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Upper getUpper()
  {
    return upper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUpper(Upper newUpper, NotificationChain msgs)
  {
    Upper oldUpper = upper;
    upper = newUpper;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REFERENCE__UPPER, oldUpper, newUpper);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUpper(Upper newUpper)
  {
    if (newUpper != upper)
    {
      NotificationChain msgs = null;
      if (upper != null)
        msgs = ((InternalEObject)upper).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REFERENCE__UPPER, null, msgs);
      if (newUpper != null)
        msgs = ((InternalEObject)newUpper).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REFERENCE__UPPER, null, msgs);
      msgs = basicSetUpper(newUpper, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REFERENCE__UPPER, newUpper, newUpper));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lower getLower()
  {
    return lower;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLower(Lower newLower, NotificationChain msgs)
  {
    Lower oldLower = lower;
    lower = newLower;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REFERENCE__LOWER, oldLower, newLower);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLower(Lower newLower)
  {
    if (newLower != lower)
    {
      NotificationChain msgs = null;
      if (lower != null)
        msgs = ((InternalEObject)lower).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REFERENCE__LOWER, null, msgs);
      if (newLower != null)
        msgs = ((InternalEObject)newLower).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REFERENCE__LOWER, null, msgs);
      msgs = basicSetLower(newLower, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REFERENCE__LOWER, newLower, newLower));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Range getRange()
  {
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRange(Range newRange, NotificationChain msgs)
  {
    Range oldRange = range;
    range = newRange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REFERENCE__RANGE, oldRange, newRange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRange(Range newRange)
  {
    if (newRange != range)
    {
      NotificationChain msgs = null;
      if (range != null)
        msgs = ((InternalEObject)range).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REFERENCE__RANGE, null, msgs);
      if (newRange != null)
        msgs = ((InternalEObject)newRange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REFERENCE__RANGE, null, msgs);
      msgs = basicSetRange(newRange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REFERENCE__RANGE, newRange, newRange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Gap getGap()
  {
    return gap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGap(Gap newGap, NotificationChain msgs)
  {
    Gap oldGap = gap;
    gap = newGap;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REFERENCE__GAP, oldGap, newGap);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGap(Gap newGap)
  {
    if (newGap != gap)
    {
      NotificationChain msgs = null;
      if (gap != null)
        msgs = ((InternalEObject)gap).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REFERENCE__GAP, null, msgs);
      if (newGap != null)
        msgs = ((InternalEObject)newGap).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REFERENCE__GAP, null, msgs);
      msgs = basicSetGap(newGap, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REFERENCE__GAP, newGap, newGap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Same getSame()
  {
    return same;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSame(Same newSame, NotificationChain msgs)
  {
    Same oldSame = same;
    same = newSame;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REFERENCE__SAME, oldSame, newSame);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSame(Same newSame)
  {
    if (newSame != same)
    {
      NotificationChain msgs = null;
      if (same != null)
        msgs = ((InternalEObject)same).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REFERENCE__SAME, null, msgs);
      if (newSame != null)
        msgs = ((InternalEObject)newSame).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REFERENCE__SAME, null, msgs);
      msgs = basicSetSame(newSame, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REFERENCE__SAME, newSame, newSame));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotSame getNotsame()
  {
    return notsame;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNotsame(NotSame newNotsame, NotificationChain msgs)
  {
    NotSame oldNotsame = notsame;
    notsame = newNotsame;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REFERENCE__NOTSAME, oldNotsame, newNotsame);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNotsame(NotSame newNotsame)
  {
    if (newNotsame != notsame)
    {
      NotificationChain msgs = null;
      if (notsame != null)
        msgs = ((InternalEObject)notsame).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REFERENCE__NOTSAME, null, msgs);
      if (newNotsame != null)
        msgs = ((InternalEObject)newNotsame).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REFERENCE__NOTSAME, null, msgs);
      msgs = basicSetNotsame(newNotsame, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REFERENCE__NOTSAME, newNotsame, newNotsame));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AdeptnessPackage.REFERENCE__UPPER:
        return basicSetUpper(null, msgs);
      case AdeptnessPackage.REFERENCE__LOWER:
        return basicSetLower(null, msgs);
      case AdeptnessPackage.REFERENCE__RANGE:
        return basicSetRange(null, msgs);
      case AdeptnessPackage.REFERENCE__GAP:
        return basicSetGap(null, msgs);
      case AdeptnessPackage.REFERENCE__SAME:
        return basicSetSame(null, msgs);
      case AdeptnessPackage.REFERENCE__NOTSAME:
        return basicSetNotsame(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AdeptnessPackage.REFERENCE__UPPER:
        return getUpper();
      case AdeptnessPackage.REFERENCE__LOWER:
        return getLower();
      case AdeptnessPackage.REFERENCE__RANGE:
        return getRange();
      case AdeptnessPackage.REFERENCE__GAP:
        return getGap();
      case AdeptnessPackage.REFERENCE__SAME:
        return getSame();
      case AdeptnessPackage.REFERENCE__NOTSAME:
        return getNotsame();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AdeptnessPackage.REFERENCE__UPPER:
        setUpper((Upper)newValue);
        return;
      case AdeptnessPackage.REFERENCE__LOWER:
        setLower((Lower)newValue);
        return;
      case AdeptnessPackage.REFERENCE__RANGE:
        setRange((Range)newValue);
        return;
      case AdeptnessPackage.REFERENCE__GAP:
        setGap((Gap)newValue);
        return;
      case AdeptnessPackage.REFERENCE__SAME:
        setSame((Same)newValue);
        return;
      case AdeptnessPackage.REFERENCE__NOTSAME:
        setNotsame((NotSame)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.REFERENCE__UPPER:
        setUpper((Upper)null);
        return;
      case AdeptnessPackage.REFERENCE__LOWER:
        setLower((Lower)null);
        return;
      case AdeptnessPackage.REFERENCE__RANGE:
        setRange((Range)null);
        return;
      case AdeptnessPackage.REFERENCE__GAP:
        setGap((Gap)null);
        return;
      case AdeptnessPackage.REFERENCE__SAME:
        setSame((Same)null);
        return;
      case AdeptnessPackage.REFERENCE__NOTSAME:
        setNotsame((NotSame)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.REFERENCE__UPPER:
        return upper != null;
      case AdeptnessPackage.REFERENCE__LOWER:
        return lower != null;
      case AdeptnessPackage.REFERENCE__RANGE:
        return range != null;
      case AdeptnessPackage.REFERENCE__GAP:
        return gap != null;
      case AdeptnessPackage.REFERENCE__SAME:
        return same != null;
      case AdeptnessPackage.REFERENCE__NOTSAME:
        return notsame != null;
    }
    return super.eIsSet(featureID);
  }

} //ReferenceImpl
