/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.adeptness.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.adeptness.AdeptnessPackage;
import org.xtext.example.mydsl.adeptness.DOUBLE;
import org.xtext.example.mydsl.adeptness.TimeType;
import org.xtext.example.mydsl.adeptness.XPeaks;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XPeaks</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.XPeaksImpl#getCant <em>Cant</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.XPeaksImpl#getNPeaks <em>NPeaks</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.XPeaksImpl#getTime <em>Time</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.XPeaksImpl#getUnit <em>Unit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XPeaksImpl extends MinimalEObjectImpl.Container implements XPeaks
{
  /**
   * The cached value of the '{@link #getCant() <em>Cant</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCant()
   * @generated
   * @ordered
   */
  protected DOUBLE cant;

  /**
   * The cached value of the '{@link #getNPeaks() <em>NPeaks</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNPeaks()
   * @generated
   * @ordered
   */
  protected DOUBLE nPeaks;

  /**
   * The default value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected static final int TIME_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected int time = TIME_EDEFAULT;

  /**
   * The cached value of the '{@link #getUnit() <em>Unit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected TimeType unit;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XPeaksImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AdeptnessPackage.Literals.XPEAKS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DOUBLE getCant()
  {
    return cant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCant(DOUBLE newCant, NotificationChain msgs)
  {
    DOUBLE oldCant = cant;
    cant = newCant;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.XPEAKS__CANT, oldCant, newCant);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCant(DOUBLE newCant)
  {
    if (newCant != cant)
    {
      NotificationChain msgs = null;
      if (cant != null)
        msgs = ((InternalEObject)cant).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.XPEAKS__CANT, null, msgs);
      if (newCant != null)
        msgs = ((InternalEObject)newCant).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.XPEAKS__CANT, null, msgs);
      msgs = basicSetCant(newCant, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.XPEAKS__CANT, newCant, newCant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DOUBLE getNPeaks()
  {
    return nPeaks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNPeaks(DOUBLE newNPeaks, NotificationChain msgs)
  {
    DOUBLE oldNPeaks = nPeaks;
    nPeaks = newNPeaks;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.XPEAKS__NPEAKS, oldNPeaks, newNPeaks);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNPeaks(DOUBLE newNPeaks)
  {
    if (newNPeaks != nPeaks)
    {
      NotificationChain msgs = null;
      if (nPeaks != null)
        msgs = ((InternalEObject)nPeaks).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.XPEAKS__NPEAKS, null, msgs);
      if (newNPeaks != null)
        msgs = ((InternalEObject)newNPeaks).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.XPEAKS__NPEAKS, null, msgs);
      msgs = basicSetNPeaks(newNPeaks, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.XPEAKS__NPEAKS, newNPeaks, newNPeaks));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTime(int newTime)
  {
    int oldTime = time;
    time = newTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.XPEAKS__TIME, oldTime, time));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeType getUnit()
  {
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnit(TimeType newUnit, NotificationChain msgs)
  {
    TimeType oldUnit = unit;
    unit = newUnit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.XPEAKS__UNIT, oldUnit, newUnit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnit(TimeType newUnit)
  {
    if (newUnit != unit)
    {
      NotificationChain msgs = null;
      if (unit != null)
        msgs = ((InternalEObject)unit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.XPEAKS__UNIT, null, msgs);
      if (newUnit != null)
        msgs = ((InternalEObject)newUnit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.XPEAKS__UNIT, null, msgs);
      msgs = basicSetUnit(newUnit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.XPEAKS__UNIT, newUnit, newUnit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AdeptnessPackage.XPEAKS__CANT:
        return basicSetCant(null, msgs);
      case AdeptnessPackage.XPEAKS__NPEAKS:
        return basicSetNPeaks(null, msgs);
      case AdeptnessPackage.XPEAKS__UNIT:
        return basicSetUnit(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AdeptnessPackage.XPEAKS__CANT:
        return getCant();
      case AdeptnessPackage.XPEAKS__NPEAKS:
        return getNPeaks();
      case AdeptnessPackage.XPEAKS__TIME:
        return getTime();
      case AdeptnessPackage.XPEAKS__UNIT:
        return getUnit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AdeptnessPackage.XPEAKS__CANT:
        setCant((DOUBLE)newValue);
        return;
      case AdeptnessPackage.XPEAKS__NPEAKS:
        setNPeaks((DOUBLE)newValue);
        return;
      case AdeptnessPackage.XPEAKS__TIME:
        setTime((Integer)newValue);
        return;
      case AdeptnessPackage.XPEAKS__UNIT:
        setUnit((TimeType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.XPEAKS__CANT:
        setCant((DOUBLE)null);
        return;
      case AdeptnessPackage.XPEAKS__NPEAKS:
        setNPeaks((DOUBLE)null);
        return;
      case AdeptnessPackage.XPEAKS__TIME:
        setTime(TIME_EDEFAULT);
        return;
      case AdeptnessPackage.XPEAKS__UNIT:
        setUnit((TimeType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.XPEAKS__CANT:
        return cant != null;
      case AdeptnessPackage.XPEAKS__NPEAKS:
        return nPeaks != null;
      case AdeptnessPackage.XPEAKS__TIME:
        return time != TIME_EDEFAULT;
      case AdeptnessPackage.XPEAKS__UNIT:
        return unit != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (time: ");
    result.append(time);
    result.append(')');
    return result.toString();
  }

} //XPeaksImpl
