/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.adeptness.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.adeptness.AdeptnessPackage;
import org.xtext.example.mydsl.adeptness.AfterWhen;
import org.xtext.example.mydsl.adeptness.During;
import org.xtext.example.mydsl.adeptness.Wait;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>After When</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.AfterWhenImpl#getWait <em>Wait</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.AfterWhenImpl#getDuring <em>During</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AfterWhenImpl extends MinimalEObjectImpl.Container implements AfterWhen
{
  /**
   * The cached value of the '{@link #getWait() <em>Wait</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWait()
   * @generated
   * @ordered
   */
  protected Wait wait;

  /**
   * The cached value of the '{@link #getDuring() <em>During</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDuring()
   * @generated
   * @ordered
   */
  protected During during;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AfterWhenImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AdeptnessPackage.Literals.AFTER_WHEN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Wait getWait()
  {
    return wait;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWait(Wait newWait, NotificationChain msgs)
  {
    Wait oldWait = wait;
    wait = newWait;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.AFTER_WHEN__WAIT, oldWait, newWait);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWait(Wait newWait)
  {
    if (newWait != wait)
    {
      NotificationChain msgs = null;
      if (wait != null)
        msgs = ((InternalEObject)wait).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.AFTER_WHEN__WAIT, null, msgs);
      if (newWait != null)
        msgs = ((InternalEObject)newWait).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.AFTER_WHEN__WAIT, null, msgs);
      msgs = basicSetWait(newWait, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.AFTER_WHEN__WAIT, newWait, newWait));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public During getDuring()
  {
    return during;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDuring(During newDuring, NotificationChain msgs)
  {
    During oldDuring = during;
    during = newDuring;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.AFTER_WHEN__DURING, oldDuring, newDuring);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDuring(During newDuring)
  {
    if (newDuring != during)
    {
      NotificationChain msgs = null;
      if (during != null)
        msgs = ((InternalEObject)during).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.AFTER_WHEN__DURING, null, msgs);
      if (newDuring != null)
        msgs = ((InternalEObject)newDuring).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.AFTER_WHEN__DURING, null, msgs);
      msgs = basicSetDuring(newDuring, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.AFTER_WHEN__DURING, newDuring, newDuring));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AdeptnessPackage.AFTER_WHEN__WAIT:
        return basicSetWait(null, msgs);
      case AdeptnessPackage.AFTER_WHEN__DURING:
        return basicSetDuring(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AdeptnessPackage.AFTER_WHEN__WAIT:
        return getWait();
      case AdeptnessPackage.AFTER_WHEN__DURING:
        return getDuring();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AdeptnessPackage.AFTER_WHEN__WAIT:
        setWait((Wait)newValue);
        return;
      case AdeptnessPackage.AFTER_WHEN__DURING:
        setDuring((During)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.AFTER_WHEN__WAIT:
        setWait((Wait)null);
        return;
      case AdeptnessPackage.AFTER_WHEN__DURING:
        setDuring((During)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.AFTER_WHEN__WAIT:
        return wait != null;
      case AdeptnessPackage.AFTER_WHEN__DURING:
        return during != null;
    }
    return super.eIsSet(featureID);
  }

} //AfterWhenImpl
