/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.adeptness.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.adeptness.AdeptnessPackage;
import org.xtext.example.mydsl.adeptness.ConstDeg;
import org.xtext.example.mydsl.adeptness.HighPeak;
import org.xtext.example.mydsl.adeptness.HighTime;
import org.xtext.example.mydsl.adeptness.Reason;
import org.xtext.example.mydsl.adeptness.XPeaks;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Reason</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.ReasonImpl#getHighPeak <em>High Peak</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.ReasonImpl#getHighTime <em>High Time</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.ReasonImpl#getConstDeg <em>Const Deg</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.adeptness.impl.ReasonImpl#getXPeaks <em>XPeaks</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReasonImpl extends MinimalEObjectImpl.Container implements Reason
{
  /**
   * The cached value of the '{@link #getHighPeak() <em>High Peak</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHighPeak()
   * @generated
   * @ordered
   */
  protected HighPeak highPeak;

  /**
   * The cached value of the '{@link #getHighTime() <em>High Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHighTime()
   * @generated
   * @ordered
   */
  protected HighTime highTime;

  /**
   * The cached value of the '{@link #getConstDeg() <em>Const Deg</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstDeg()
   * @generated
   * @ordered
   */
  protected ConstDeg constDeg;

  /**
   * The cached value of the '{@link #getXPeaks() <em>XPeaks</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXPeaks()
   * @generated
   * @ordered
   */
  protected XPeaks xPeaks;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReasonImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AdeptnessPackage.Literals.REASON;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HighPeak getHighPeak()
  {
    return highPeak;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHighPeak(HighPeak newHighPeak, NotificationChain msgs)
  {
    HighPeak oldHighPeak = highPeak;
    highPeak = newHighPeak;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REASON__HIGH_PEAK, oldHighPeak, newHighPeak);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHighPeak(HighPeak newHighPeak)
  {
    if (newHighPeak != highPeak)
    {
      NotificationChain msgs = null;
      if (highPeak != null)
        msgs = ((InternalEObject)highPeak).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REASON__HIGH_PEAK, null, msgs);
      if (newHighPeak != null)
        msgs = ((InternalEObject)newHighPeak).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REASON__HIGH_PEAK, null, msgs);
      msgs = basicSetHighPeak(newHighPeak, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REASON__HIGH_PEAK, newHighPeak, newHighPeak));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HighTime getHighTime()
  {
    return highTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHighTime(HighTime newHighTime, NotificationChain msgs)
  {
    HighTime oldHighTime = highTime;
    highTime = newHighTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REASON__HIGH_TIME, oldHighTime, newHighTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHighTime(HighTime newHighTime)
  {
    if (newHighTime != highTime)
    {
      NotificationChain msgs = null;
      if (highTime != null)
        msgs = ((InternalEObject)highTime).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REASON__HIGH_TIME, null, msgs);
      if (newHighTime != null)
        msgs = ((InternalEObject)newHighTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REASON__HIGH_TIME, null, msgs);
      msgs = basicSetHighTime(newHighTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REASON__HIGH_TIME, newHighTime, newHighTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstDeg getConstDeg()
  {
    return constDeg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstDeg(ConstDeg newConstDeg, NotificationChain msgs)
  {
    ConstDeg oldConstDeg = constDeg;
    constDeg = newConstDeg;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REASON__CONST_DEG, oldConstDeg, newConstDeg);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstDeg(ConstDeg newConstDeg)
  {
    if (newConstDeg != constDeg)
    {
      NotificationChain msgs = null;
      if (constDeg != null)
        msgs = ((InternalEObject)constDeg).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REASON__CONST_DEG, null, msgs);
      if (newConstDeg != null)
        msgs = ((InternalEObject)newConstDeg).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REASON__CONST_DEG, null, msgs);
      msgs = basicSetConstDeg(newConstDeg, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REASON__CONST_DEG, newConstDeg, newConstDeg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XPeaks getXPeaks()
  {
    return xPeaks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetXPeaks(XPeaks newXPeaks, NotificationChain msgs)
  {
    XPeaks oldXPeaks = xPeaks;
    xPeaks = newXPeaks;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REASON__XPEAKS, oldXPeaks, newXPeaks);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setXPeaks(XPeaks newXPeaks)
  {
    if (newXPeaks != xPeaks)
    {
      NotificationChain msgs = null;
      if (xPeaks != null)
        msgs = ((InternalEObject)xPeaks).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REASON__XPEAKS, null, msgs);
      if (newXPeaks != null)
        msgs = ((InternalEObject)newXPeaks).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AdeptnessPackage.REASON__XPEAKS, null, msgs);
      msgs = basicSetXPeaks(newXPeaks, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AdeptnessPackage.REASON__XPEAKS, newXPeaks, newXPeaks));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AdeptnessPackage.REASON__HIGH_PEAK:
        return basicSetHighPeak(null, msgs);
      case AdeptnessPackage.REASON__HIGH_TIME:
        return basicSetHighTime(null, msgs);
      case AdeptnessPackage.REASON__CONST_DEG:
        return basicSetConstDeg(null, msgs);
      case AdeptnessPackage.REASON__XPEAKS:
        return basicSetXPeaks(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AdeptnessPackage.REASON__HIGH_PEAK:
        return getHighPeak();
      case AdeptnessPackage.REASON__HIGH_TIME:
        return getHighTime();
      case AdeptnessPackage.REASON__CONST_DEG:
        return getConstDeg();
      case AdeptnessPackage.REASON__XPEAKS:
        return getXPeaks();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AdeptnessPackage.REASON__HIGH_PEAK:
        setHighPeak((HighPeak)newValue);
        return;
      case AdeptnessPackage.REASON__HIGH_TIME:
        setHighTime((HighTime)newValue);
        return;
      case AdeptnessPackage.REASON__CONST_DEG:
        setConstDeg((ConstDeg)newValue);
        return;
      case AdeptnessPackage.REASON__XPEAKS:
        setXPeaks((XPeaks)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.REASON__HIGH_PEAK:
        setHighPeak((HighPeak)null);
        return;
      case AdeptnessPackage.REASON__HIGH_TIME:
        setHighTime((HighTime)null);
        return;
      case AdeptnessPackage.REASON__CONST_DEG:
        setConstDeg((ConstDeg)null);
        return;
      case AdeptnessPackage.REASON__XPEAKS:
        setXPeaks((XPeaks)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AdeptnessPackage.REASON__HIGH_PEAK:
        return highPeak != null;
      case AdeptnessPackage.REASON__HIGH_TIME:
        return highTime != null;
      case AdeptnessPackage.REASON__CONST_DEG:
        return constDeg != null;
      case AdeptnessPackage.REASON__XPEAKS:
        return xPeaks != null;
    }
    return super.eIsSet(featureID);
  }

} //ReasonImpl
