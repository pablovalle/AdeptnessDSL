/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AdeptnessGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AdeptnessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.Adeptness");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Adeptness:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImportParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractElement:
		//	PackageDeclaration | Type | Import;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageDeclaration | Type | Import
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_0() { return cPackageDeclarationParserRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
		
		//Import
		public RuleCall getImportParserRuleCall_2() { return cImportParserRuleCall_2; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	DataType | Signal;
		@Override public ParserRule getRule() { return rule; }
		
		//DataType | Signal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }
		
		//Signal
		public RuleCall getSignalParserRuleCall_1() { return cSignalParserRuleCall_1; }
	}
	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCheck_static_upperAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCheck_static_upperCheck_Static_upper_onlyParserRuleCall_3_0 = (RuleCall)cCheck_static_upperAssignment_3.eContents().get(0);
		private final Assignment cCheck_static_lowerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCheck_static_lowerCheck_Static_lower_onlyParserRuleCall_4_0 = (RuleCall)cCheck_static_lowerAssignment_4.eContents().get(0);
		private final Assignment cCheck_rangeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCheck_rangeCheck_RangeParserRuleCall_5_0 = (RuleCall)cCheck_rangeAssignment_5.eContents().get(0);
		private final Assignment cCheck_gapAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCheck_gapCheck_GapParserRuleCall_6_0 = (RuleCall)cCheck_gapAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////Each signal could have more than one oracles
		//Signal:
		//	'signal' name=ID '{'
		//	check_static_upper+=Check_Static_upper_only*
		//	check_static_lower+=Check_Static_lower_only*
		//	check_range+=Check_Range*
		//	check_gap+=Check_Gap*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'signal' name=ID '{' check_static_upper+=Check_Static_upper_only* check_static_lower+=Check_Static_lower_only*
		//check_range+=Check_Range* check_gap+=Check_Gap* '}'
		public Group getGroup() { return cGroup; }
		
		//'signal'
		public Keyword getSignalKeyword_0() { return cSignalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//check_static_upper+=Check_Static_upper_only*
		public Assignment getCheck_static_upperAssignment_3() { return cCheck_static_upperAssignment_3; }
		
		//Check_Static_upper_only
		public RuleCall getCheck_static_upperCheck_Static_upper_onlyParserRuleCall_3_0() { return cCheck_static_upperCheck_Static_upper_onlyParserRuleCall_3_0; }
		
		//check_static_lower+=Check_Static_lower_only*
		public Assignment getCheck_static_lowerAssignment_4() { return cCheck_static_lowerAssignment_4; }
		
		//Check_Static_lower_only
		public RuleCall getCheck_static_lowerCheck_Static_lower_onlyParserRuleCall_4_0() { return cCheck_static_lowerCheck_Static_lower_onlyParserRuleCall_4_0; }
		
		//check_range+=Check_Range*
		public Assignment getCheck_rangeAssignment_5() { return cCheck_rangeAssignment_5; }
		
		//Check_Range
		public RuleCall getCheck_rangeCheck_RangeParserRuleCall_5_0() { return cCheck_rangeCheck_RangeParserRuleCall_5_0; }
		
		//check_gap+=Check_Gap*
		public Assignment getCheck_gapAssignment_6() { return cCheck_gapAssignment_6; }
		
		//Check_Gap
		public RuleCall getCheck_gapCheck_GapParserRuleCall_6_0() { return cCheck_gapCheck_GapParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class Check_Static_upper_onlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.Check_Static_upper_only");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheck_Static_UpperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInclusive_boundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInclusive_boundInclusiveBoundParserRuleCall_3_0 = (RuleCall)cInclusive_boundAssignment_3.eContents().get(0);
		private final Assignment cBound_upAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBound_upBound_upParserRuleCall_4_0 = (RuleCall)cBound_upAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Oracle for upper limit --> Below reference signal
		//Check_Static_upper_only:
		//	'Check_Static_Upper' name=ID '{'
		//	inclusive_bound=InclusiveBound bound_up=Bound_up '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Check_Static_Upper' name=ID '{' inclusive_bound=InclusiveBound bound_up=Bound_up '}'
		public Group getGroup() { return cGroup; }
		
		//'Check_Static_Upper'
		public Keyword getCheck_Static_UpperKeyword_0() { return cCheck_Static_UpperKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//inclusive_bound=InclusiveBound
		public Assignment getInclusive_boundAssignment_3() { return cInclusive_boundAssignment_3; }
		
		//InclusiveBound
		public RuleCall getInclusive_boundInclusiveBoundParserRuleCall_3_0() { return cInclusive_boundInclusiveBoundParserRuleCall_3_0; }
		
		//bound_up=Bound_up
		public Assignment getBound_upAssignment_4() { return cBound_upAssignment_4; }
		
		//Bound_up
		public RuleCall getBound_upBound_upParserRuleCall_4_0() { return cBound_upBound_upParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class Check_Static_lower_onlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.Check_Static_lower_only");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheck_Static_LowerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInclusive_boundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInclusive_boundInclusiveBoundParserRuleCall_3_0 = (RuleCall)cInclusive_boundAssignment_3.eContents().get(0);
		private final Assignment cBound_lowAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBound_lowBound_DownParserRuleCall_4_0 = (RuleCall)cBound_lowAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Oracle for lower limit --> Above reference signal
		//Check_Static_lower_only:
		//	'Check_Static_Lower' name=ID '{'
		//	inclusive_bound=InclusiveBound bound_low=Bound_Down '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Check_Static_Lower' name=ID '{' inclusive_bound=InclusiveBound bound_low=Bound_Down '}'
		public Group getGroup() { return cGroup; }
		
		//'Check_Static_Lower'
		public Keyword getCheck_Static_LowerKeyword_0() { return cCheck_Static_LowerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//inclusive_bound=InclusiveBound
		public Assignment getInclusive_boundAssignment_3() { return cInclusive_boundAssignment_3; }
		
		//InclusiveBound
		public RuleCall getInclusive_boundInclusiveBoundParserRuleCall_3_0() { return cInclusive_boundInclusiveBoundParserRuleCall_3_0; }
		
		//bound_low=Bound_Down
		public Assignment getBound_lowAssignment_4() { return cBound_lowAssignment_4; }
		
		//Bound_Down
		public RuleCall getBound_lowBound_DownParserRuleCall_4_0() { return cBound_lowBound_DownParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class Check_RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.Check_Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheck_RangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInclusive_boundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInclusive_boundInclusiveBoundParserRuleCall_3_0 = (RuleCall)cInclusive_boundAssignment_3.eContents().get(0);
		private final Assignment cBound_lowAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBound_lowBound_DownParserRuleCall_4_0 = (RuleCall)cBound_lowAssignment_4.eContents().get(0);
		private final Assignment cBound_upAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBound_upBound_upParserRuleCall_5_0 = (RuleCall)cBound_upAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////Oracle for Above and Below limit --> In range reference signal
		//Check_Range:
		//	'Check_Range' name=ID '{'
		//	inclusive_bound=InclusiveBound bound_low=Bound_Down bound_up=Bound_up '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Check_Range' name=ID '{' inclusive_bound=InclusiveBound bound_low=Bound_Down bound_up=Bound_up '}'
		public Group getGroup() { return cGroup; }
		
		//'Check_Range'
		public Keyword getCheck_RangeKeyword_0() { return cCheck_RangeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//inclusive_bound=InclusiveBound
		public Assignment getInclusive_boundAssignment_3() { return cInclusive_boundAssignment_3; }
		
		//InclusiveBound
		public RuleCall getInclusive_boundInclusiveBoundParserRuleCall_3_0() { return cInclusive_boundInclusiveBoundParserRuleCall_3_0; }
		
		//bound_low=Bound_Down
		public Assignment getBound_lowAssignment_4() { return cBound_lowAssignment_4; }
		
		//Bound_Down
		public RuleCall getBound_lowBound_DownParserRuleCall_4_0() { return cBound_lowBound_DownParserRuleCall_4_0; }
		
		//bound_up=Bound_up
		public Assignment getBound_upAssignment_5() { return cBound_upAssignment_5; }
		
		//Bound_up
		public RuleCall getBound_upBound_upParserRuleCall_5_0() { return cBound_upBound_upParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class Check_GapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.Check_Gap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheck_GapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInclusive_boundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInclusive_boundInclusiveBoundParserRuleCall_3_0 = (RuleCall)cInclusive_boundAssignment_3.eContents().get(0);
		private final Assignment cBound_lowAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBound_lowBound_DownParserRuleCall_4_0 = (RuleCall)cBound_lowAssignment_4.eContents().get(0);
		private final Assignment cBound_upAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBound_upBound_upParserRuleCall_5_0 = (RuleCall)cBound_upAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////Oracle for !Above and !Below limit --> Gap reference signal
		//Check_Gap:
		//	'Check_Gap' name=ID '{'
		//	inclusive_bound=InclusiveBound bound_low=Bound_Down bound_up=Bound_up '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Check_Gap' name=ID '{' inclusive_bound=InclusiveBound bound_low=Bound_Down bound_up=Bound_up '}'
		public Group getGroup() { return cGroup; }
		
		//'Check_Gap'
		public Keyword getCheck_GapKeyword_0() { return cCheck_GapKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//inclusive_bound=InclusiveBound
		public Assignment getInclusive_boundAssignment_3() { return cInclusive_boundAssignment_3; }
		
		//InclusiveBound
		public RuleCall getInclusive_boundInclusiveBoundParserRuleCall_3_0() { return cInclusive_boundInclusiveBoundParserRuleCall_3_0; }
		
		//bound_low=Bound_Down
		public Assignment getBound_lowAssignment_4() { return cBound_lowAssignment_4; }
		
		//Bound_Down
		public RuleCall getBound_lowBound_DownParserRuleCall_4_0() { return cBound_lowBound_DownParserRuleCall_4_0; }
		
		//bound_up=Bound_up
		public Assignment getBound_upAssignment_5() { return cBound_upAssignment_5; }
		
		//Bound_up
		public RuleCall getBound_upBound_upParserRuleCall_5_0() { return cBound_upBound_upParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class InclusiveBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.InclusiveBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInclusiveBoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueBOOLEANParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		////If the limits must be included ==
		//InclusiveBound:
		//	'inclusiveBound' name=ID '=' value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//'inclusiveBound' name=ID '=' value=BOOLEAN
		public Group getGroup() { return cGroup; }
		
		//'inclusiveBound'
		public Keyword getInclusiveBoundKeyword_0() { return cInclusiveBoundKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANParserRuleCall_3_0() { return cValueBOOLEANParserRuleCall_3_0; }
	}
	public class Bound_upElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.Bound_up");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBound_upKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueDOUBLEParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		////Upper limit
		//Bound_up:
		//	'bound_up' name=ID '=' value=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'bound_up' name=ID '=' value=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'bound_up'
		public Keyword getBound_upKeyword_0() { return cBound_upKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//DOUBLE
		public RuleCall getValueDOUBLEParserRuleCall_3_0() { return cValueDOUBLEParserRuleCall_3_0; }
	}
	public class Bound_DownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.Bound_Down");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBound_downKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueDOUBLEParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		////Lower limit
		//Bound_Down:
		//	'bound_down' name=ID '=' value=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'bound_down' name=ID '=' value=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'bound_down'
		public Keyword getBound_downKeyword_0() { return cBound_downKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//DOUBLE
		public RuleCall getValueDOUBLEParserRuleCall_3_0() { return cValueDOUBLEParserRuleCall_3_0; }
	}
	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.BOOLEAN");
		private final Assignment cBoolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBoolBParserRuleCall_0 = (RuleCall)cBoolAssignment.eContents().get(0);
		
		////Boolean declaration
		//BOOLEAN:
		//	bool=b;
		@Override public ParserRule getRule() { return rule; }
		
		//bool=b
		public Assignment getBoolAssignment() { return cBoolAssignment; }
		
		//b
		public RuleCall getBoolBParserRuleCall_0() { return cBoolBParserRuleCall_0; }
	}
	public class BElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.b");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//b ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.DOUBLE");
		private final Assignment cDValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDValDParserRuleCall_0 = (RuleCall)cDValAssignment.eContents().get(0);
		
		////Double declaration
		//DOUBLE:
		//	dVal=d;
		@Override public ParserRule getRule() { return rule; }
		
		//dVal=d
		public Assignment getDValAssignment() { return cDValAssignment; }
		
		//d
		public RuleCall getDValDParserRuleCall_0() { return cDValDParserRuleCall_0; }
	}
	public class DElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.d");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//d ecore::EDouble:
		//	'-'? INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//('.' INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		///*Output:
		//	'outPut' name=ID '=' value=BOOLEAN
		//;
		//
		//StopSim:
		//	'stopSim' name=ID '=' value=BOOLEAN
		//;
		//
		//CallBack:
		//	'callBack' name=ID '=' value=STRING
		//;
		//
		//Assertion:
		//	'assertion' name=ID '=' value=BOOLEAN
		//;*/ /*Bound_Up_Low:
		//	'bound_up_low' name=ID '=' value=BOOLEAN
		//;
		//
		//Bound_Lower:
		//	'bound_lower' name=ID '=' value=BOOLEAN
		//;
		//
		//Bound_Upper:
		//	'bound_upper' name=ID '=' value=BOOLEAN
		//;*/ //DataType declaration
		//DataType:
		//	'datatype' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Adeptness.PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsAbstractElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Package declaration
		//PackageDeclaration:
		//	'package' name=QualifiedName '{'
		//	elements+=AbstractElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{' elements+=AbstractElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_3_0() { return cElementsAbstractElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private final AdeptnessElements pAdeptness;
	private final AbstractElementElements pAbstractElement;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final TypeElements pType;
	private final SignalElements pSignal;
	private final Check_Static_upper_onlyElements pCheck_Static_upper_only;
	private final Check_Static_lower_onlyElements pCheck_Static_lower_only;
	private final Check_RangeElements pCheck_Range;
	private final Check_GapElements pCheck_Gap;
	private final InclusiveBoundElements pInclusiveBound;
	private final Bound_upElements pBound_up;
	private final Bound_DownElements pBound_Down;
	private final BOOLEANElements pBOOLEAN;
	private final BElements pB;
	private final DOUBLEElements pDOUBLE;
	private final DElements pD;
	private final DataTypeElements pDataType;
	private final PackageDeclarationElements pPackageDeclaration;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AdeptnessGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAdeptness = new AdeptnessElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pType = new TypeElements();
		this.pSignal = new SignalElements();
		this.pCheck_Static_upper_only = new Check_Static_upper_onlyElements();
		this.pCheck_Static_lower_only = new Check_Static_lower_onlyElements();
		this.pCheck_Range = new Check_RangeElements();
		this.pCheck_Gap = new Check_GapElements();
		this.pInclusiveBound = new InclusiveBoundElements();
		this.pBound_up = new Bound_upElements();
		this.pBound_Down = new Bound_DownElements();
		this.pBOOLEAN = new BOOLEANElements();
		this.pB = new BElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pD = new DElements();
		this.pDataType = new DataTypeElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Adeptness".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Adeptness:
	//	elements+=AbstractElement*;
	public AdeptnessElements getAdeptnessAccess() {
		return pAdeptness;
	}
	
	public ParserRule getAdeptnessRule() {
		return getAdeptnessAccess().getRule();
	}
	
	//AbstractElement:
	//	PackageDeclaration | Type | Import;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Type:
	//	DataType | Signal;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	////Each signal could have more than one oracles
	//Signal:
	//	'signal' name=ID '{'
	//	check_static_upper+=Check_Static_upper_only*
	//	check_static_lower+=Check_Static_lower_only*
	//	check_range+=Check_Range*
	//	check_gap+=Check_Gap*
	//	'}';
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	////Oracle for upper limit --> Below reference signal
	//Check_Static_upper_only:
	//	'Check_Static_Upper' name=ID '{'
	//	inclusive_bound=InclusiveBound bound_up=Bound_up '}';
	public Check_Static_upper_onlyElements getCheck_Static_upper_onlyAccess() {
		return pCheck_Static_upper_only;
	}
	
	public ParserRule getCheck_Static_upper_onlyRule() {
		return getCheck_Static_upper_onlyAccess().getRule();
	}
	
	////Oracle for lower limit --> Above reference signal
	//Check_Static_lower_only:
	//	'Check_Static_Lower' name=ID '{'
	//	inclusive_bound=InclusiveBound bound_low=Bound_Down '}';
	public Check_Static_lower_onlyElements getCheck_Static_lower_onlyAccess() {
		return pCheck_Static_lower_only;
	}
	
	public ParserRule getCheck_Static_lower_onlyRule() {
		return getCheck_Static_lower_onlyAccess().getRule();
	}
	
	////Oracle for Above and Below limit --> In range reference signal
	//Check_Range:
	//	'Check_Range' name=ID '{'
	//	inclusive_bound=InclusiveBound bound_low=Bound_Down bound_up=Bound_up '}';
	public Check_RangeElements getCheck_RangeAccess() {
		return pCheck_Range;
	}
	
	public ParserRule getCheck_RangeRule() {
		return getCheck_RangeAccess().getRule();
	}
	
	////Oracle for !Above and !Below limit --> Gap reference signal
	//Check_Gap:
	//	'Check_Gap' name=ID '{'
	//	inclusive_bound=InclusiveBound bound_low=Bound_Down bound_up=Bound_up '}';
	public Check_GapElements getCheck_GapAccess() {
		return pCheck_Gap;
	}
	
	public ParserRule getCheck_GapRule() {
		return getCheck_GapAccess().getRule();
	}
	
	////If the limits must be included ==
	//InclusiveBound:
	//	'inclusiveBound' name=ID '=' value=BOOLEAN;
	public InclusiveBoundElements getInclusiveBoundAccess() {
		return pInclusiveBound;
	}
	
	public ParserRule getInclusiveBoundRule() {
		return getInclusiveBoundAccess().getRule();
	}
	
	////Upper limit
	//Bound_up:
	//	'bound_up' name=ID '=' value=DOUBLE;
	public Bound_upElements getBound_upAccess() {
		return pBound_up;
	}
	
	public ParserRule getBound_upRule() {
		return getBound_upAccess().getRule();
	}
	
	////Lower limit
	//Bound_Down:
	//	'bound_down' name=ID '=' value=DOUBLE;
	public Bound_DownElements getBound_DownAccess() {
		return pBound_Down;
	}
	
	public ParserRule getBound_DownRule() {
		return getBound_DownAccess().getRule();
	}
	
	////Boolean declaration
	//BOOLEAN:
	//	bool=b;
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//b ecore::EBoolean:
	//	'true' | 'false';
	public BElements getBAccess() {
		return pB;
	}
	
	public ParserRule getBRule() {
		return getBAccess().getRule();
	}
	
	////Double declaration
	//DOUBLE:
	//	dVal=d;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//d ecore::EDouble:
	//	'-'? INT ('.' INT)?;
	public DElements getDAccess() {
		return pD;
	}
	
	public ParserRule getDRule() {
		return getDAccess().getRule();
	}
	
	///*Output:
	//	'outPut' name=ID '=' value=BOOLEAN
	//;
	//
	//StopSim:
	//	'stopSim' name=ID '=' value=BOOLEAN
	//;
	//
	//CallBack:
	//	'callBack' name=ID '=' value=STRING
	//;
	//
	//Assertion:
	//	'assertion' name=ID '=' value=BOOLEAN
	//;*/ /*Bound_Up_Low:
	//	'bound_up_low' name=ID '=' value=BOOLEAN
	//;
	//
	//Bound_Lower:
	//	'bound_lower' name=ID '=' value=BOOLEAN
	//;
	//
	//Bound_Upper:
	//	'bound_upper' name=ID '=' value=BOOLEAN
	//;*/ //DataType declaration
	//DataType:
	//	'datatype' name=ID;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	////Package declaration
	//PackageDeclaration:
	//	'package' name=QualifiedName '{'
	//	elements+=AbstractElement*
	//	'}';
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
