/*
 * generated by Xtext 2.21.0
 */
grammar InternalAdeptness;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.AdeptnessGrammarAccess;

}

@parser::members {

 	private AdeptnessGrammarAccess grammarAccess;

    public InternalAdeptnessParser(TokenStream input, AdeptnessGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Adeptness";
   	}

   	@Override
   	protected AdeptnessGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAdeptness
entryRuleAdeptness returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdeptnessRule()); }
	iv_ruleAdeptness=ruleAdeptness
	{ $current=$iv_ruleAdeptness.current; }
	EOF;

// Rule Adeptness
ruleAdeptness returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAdeptnessAccess().getElementsAbstractElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleAbstractElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAdeptnessRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.mydsl.Adeptness.AbstractElement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	iv_ruleAbstractElement=ruleAbstractElement
	{ $current=$iv_ruleAbstractElement.current; }
	EOF;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getPackageDeclarationParserRuleCall_0());
		}
		this_PackageDeclaration_0=rulePackageDeclaration
		{
			$current = $this_PackageDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getTypeParserRuleCall_1());
		}
		this_Type_1=ruleType
		{
			$current = $this_Type_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getImportsParserRuleCall_2());
		}
		this_Imports_2=ruleImports
		{
			$current = $this_Imports_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleImports
entryRuleImports returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportsRule()); }
	iv_ruleImports=ruleImports
	{ $current=$iv_ruleImports.current; }
	EOF;

// Rule Imports
ruleImports returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportsAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportsAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportsRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"org.xtext.example.mydsl.Adeptness.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_0());
		}
		this_DataType_0=ruleDataType
		{
			$current = $this_DataType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getSignalParserRuleCall_1());
		}
		this_Signal_1=ruleSignal
		{
			$current = $this_Signal_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getMonitoringFileParserRuleCall_2());
		}
		this_MonitoringFile_2=ruleMonitoringFile
		{
			$current = $this_MonitoringFile_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMonitoringFile
entryRuleMonitoringFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMonitoringFileRule()); }
	iv_ruleMonitoringFile=ruleMonitoringFile
	{ $current=$iv_ruleMonitoringFile.current; }
	EOF;

// Rule MonitoringFile
ruleMonitoringFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MONITORINGPLAN'
		{
			newLeafNode(otherlv_0, grammarAccess.getMonitoringFileAccess().getMONITORINGPLANKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMonitoringFileAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMonitoringFileRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getMonitoringFileAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMonitoringFileAccess().getMonitoringPlanMonitoringPlanParserRuleCall_3_0());
				}
				lv_monitoringPlan_3_0=ruleMonitoringPlan
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMonitoringFileRule());
					}
					add(
						$current,
						"monitoringPlan",
						lv_monitoringPlan_3_0,
						"org.xtext.example.mydsl.Adeptness.MonitoringPlan");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='ENDMONITORINGPLAN'
		{
			newLeafNode(otherlv_4, grammarAccess.getMonitoringFileAccess().getENDMONITORINGPLANKeyword_4());
		}
	)
;

// Entry rule entryRuleMonitoringPlan
entryRuleMonitoringPlan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMonitoringPlanRule()); }
	iv_ruleMonitoringPlan=ruleMonitoringPlan
	{ $current=$iv_ruleMonitoringPlan.current; }
	EOF;

// Rule MonitoringPlan
ruleMonitoringPlan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMonitoringPlanAccess().getMonitoringVariablesMonitoringVariableParserRuleCall_0());
			}
			lv_monitoringVariables_0_0=ruleMonitoringVariable
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMonitoringPlanRule());
				}
				set(
					$current,
					"monitoringVariables",
					lv_monitoringVariables_0_0,
					"org.xtext.example.mydsl.Adeptness.MonitoringVariable");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMonitoringVariable
entryRuleMonitoringVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMonitoringVariableRule()); }
	iv_ruleMonitoringVariable=ruleMonitoringVariable
	{ $current=$iv_ruleMonitoringVariable.current; }
	EOF;

// Rule MonitoringVariable
ruleMonitoringVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MONITOR'
		{
			newLeafNode(otherlv_0, grammarAccess.getMonitoringVariableAccess().getMONITORKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMonitoringVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMonitoringVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getMonitoringVariableAccess().getColonKeyword_2());
		}
		otherlv_3='type'
		{
			newLeafNode(otherlv_3, grammarAccess.getMonitoringVariableAccess().getTypeKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getMonitoringVariableAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMonitoringVariableAccess().getMonitoringVariableDatatypeSig_typeParserRuleCall_5_0());
				}
				lv_MonitoringVariableDatatype_5_0=ruleSig_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMonitoringVariableRule());
					}
					set(
						$current,
						"MonitoringVariableDatatype",
						lv_MonitoringVariableDatatype_5_0,
						"org.xtext.example.mydsl.Adeptness.Sig_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='max'
			{
				newLeafNode(otherlv_6, grammarAccess.getMonitoringVariableAccess().getMaxKeyword_6_0());
			}
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getMonitoringVariableAccess().getColonKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMonitoringVariableAccess().getMaxDOUBLEParserRuleCall_6_2_0());
					}
					lv_max_8_0=ruleDOUBLE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMonitoringVariableRule());
						}
						set(
							$current,
							"max",
							lv_max_8_0,
							"org.xtext.example.mydsl.Adeptness.DOUBLE");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9='min'
			{
				newLeafNode(otherlv_9, grammarAccess.getMonitoringVariableAccess().getMinKeyword_6_3());
			}
			otherlv_10=':'
			{
				newLeafNode(otherlv_10, grammarAccess.getMonitoringVariableAccess().getColonKeyword_6_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMonitoringVariableAccess().getMinDOUBLEParserRuleCall_6_5_0());
					}
					lv_min_11_0=ruleDOUBLE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMonitoringVariableRule());
						}
						set(
							$current,
							"min",
							lv_min_11_0,
							"org.xtext.example.mydsl.Adeptness.DOUBLE");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_12='ENDMONITOR'
		{
			newLeafNode(otherlv_12, grammarAccess.getMonitoringVariableAccess().getENDMONITORKeyword_7());
		}
	)
;

// Entry rule entryRuleSig_type
entryRuleSig_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSig_typeRule()); }
	iv_ruleSig_type=ruleSig_type
	{ $current=$iv_ruleSig_type.current; }
	EOF;

// Rule Sig_type
ruleSig_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_sig_type_0_0='boolean'
				{
					newLeafNode(lv_sig_type_0_0, grammarAccess.getSig_typeAccess().getSig_typeBooleanKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSig_typeRule());
					}
					setWithLastConsumed($current, "sig_type", lv_sig_type_0_0, "boolean");
				}
			)
		)
		    |
		(
			(
				lv_sig_type_1_0='int'
				{
					newLeafNode(lv_sig_type_1_0, grammarAccess.getSig_typeAccess().getSig_typeIntKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSig_typeRule());
					}
					setWithLastConsumed($current, "sig_type", lv_sig_type_1_0, "int");
				}
			)
		)
		    |
		(
			(
				lv_sig_type_2_0='double'
				{
					newLeafNode(lv_sig_type_2_0, grammarAccess.getSig_typeAccess().getSig_typeDoubleKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSig_typeRule());
					}
					setWithLastConsumed($current, "sig_type", lv_sig_type_2_0, "double");
				}
			)
		)
	)
;

// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignalRule()); }
	iv_ruleSignal=ruleSignal
	{ $current=$iv_ruleSignal.current; }
	EOF;

// Rule Signal
ruleSignal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CPS'
		{
			newLeafNode(otherlv_0, grammarAccess.getSignalAccess().getCPSKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignalRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getSignalAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					lv_cardinalityNumCPS_3_0=RULE_INT
					{
						newLeafNode(lv_cardinalityNumCPS_3_0, grammarAccess.getSignalAccess().getCardinalityNumCPSINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSignalRule());
						}
						setWithLastConsumed(
							$current,
							"cardinalityNumCPS",
							lv_cardinalityNumCPS_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getSignalAccess().getRightSquareBracketKeyword_2_2());
			}
		)?
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getSignalAccess().getColonKeyword_3());
		}
		(
			otherlv_6='implements'
			{
				newLeafNode(otherlv_6, grammarAccess.getSignalAccess().getImplementsKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSignalRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getSignalAccess().getSuperTypeMonitoringFileCrossReference_4_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSignalAccess().getOracleOracleParserRuleCall_5_0());
				}
				lv_oracle_8_0=ruleOracle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignalRule());
					}
					add(
						$current,
						"oracle",
						lv_oracle_8_0,
						"org.xtext.example.mydsl.Adeptness.Oracle");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_9='ENDCPS'
		{
			newLeafNode(otherlv_9, grammarAccess.getSignalAccess().getENDCPSKeyword_6());
		}
	)
;

// Entry rule entryRuleOracle
entryRuleOracle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOracleRule()); }
	iv_ruleOracle=ruleOracle
	{ $current=$iv_ruleOracle.current; }
	EOF;

// Rule Oracle
ruleOracle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ORACLE'
		{
			newLeafNode(otherlv_0, grammarAccess.getOracleAccess().getORACLEKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOracleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOracleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getOracleAccess().getColonKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOracleAccess().getWhenWhenParserRuleCall_3_0_0());
					}
					lv_when_3_0=ruleWhen
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOracleRule());
						}
						add(
							$current,
							"when",
							lv_when_3_0,
							"org.xtext.example.mydsl.Adeptness.When");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getOracleAccess().getWhileWhileParserRuleCall_3_1_0());
					}
					lv_while_4_0=ruleWhile
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOracleRule());
						}
						add(
							$current,
							"while",
							lv_while_4_0,
							"org.xtext.example.mydsl.Adeptness.While");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getOracleAccess().getCheckChecksParserRuleCall_4_0());
				}
				lv_check_5_0=ruleChecks
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOracleRule());
					}
					add(
						$current,
						"check",
						lv_check_5_0,
						"org.xtext.example.mydsl.Adeptness.Checks");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6='ENDORACLE'
		{
			newLeafNode(otherlv_6, grammarAccess.getOracleAccess().getENDORACLEKeyword_5());
		}
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while:'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getEmExpressionsModelParserRuleCall_1_0());
				}
				lv_em_1_0=ruleExpressionsModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"em",
						lv_em_1_0,
						"org.xtext.example.mydsl.Adeptness.ExpressionsModel");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWhen
entryRuleWhen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhenRule()); }
	iv_ruleWhen=ruleWhen
	{ $current=$iv_ruleWhen.current; }
	EOF;

// Rule When
ruleWhen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='when:'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhenAccess().getWhenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhenAccess().getEmExpressionsModelParserRuleCall_1_0());
				}
				lv_em_1_0=ruleExpressionsModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhenRule());
					}
					set(
						$current,
						"em",
						lv_em_1_0,
						"org.xtext.example.mydsl.Adeptness.ExpressionsModel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWhenAccess().getAwAfterWhenParserRuleCall_2_0());
				}
				lv_aw_2_0=ruleAfterWhen
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhenRule());
					}
					set(
						$current,
						"aw",
						lv_aw_2_0,
						"org.xtext.example.mydsl.Adeptness.AfterWhen");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAfterWhen
entryRuleAfterWhen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAfterWhenRule()); }
	iv_ruleAfterWhen=ruleAfterWhen
	{ $current=$iv_ruleAfterWhen.current; }
	EOF;

// Rule AfterWhen
ruleAfterWhen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAfterWhenAccess().getWaitWaitParserRuleCall_0_0());
				}
				lv_wait_0_0=ruleWait
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAfterWhenRule());
					}
					set(
						$current,
						"wait",
						lv_wait_0_0,
						"org.xtext.example.mydsl.Adeptness.Wait");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAfterWhenAccess().getDuringDuringParserRuleCall_1_0());
				}
				lv_during_1_0=ruleDuring
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAfterWhenRule());
					}
					set(
						$current,
						"during",
						lv_during_1_0,
						"org.xtext.example.mydsl.Adeptness.During");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWait
entryRuleWait returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWaitRule()); }
	iv_ruleWait=ruleWait
	{ $current=$iv_ruleWait.current; }
	EOF;

// Rule Wait
ruleWait returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='after('
		{
			newLeafNode(otherlv_0, grammarAccess.getWaitAccess().getAfterKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWaitAccess().getTimeDOUBLEParserRuleCall_1_0());
				}
				lv_time_1_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWaitRule());
					}
					set(
						$current,
						"time",
						lv_time_1_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getWaitAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWaitAccess().getUnitTimeTypeParserRuleCall_3_0());
				}
				lv_unit_3_0=ruleTimeType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWaitRule());
					}
					set(
						$current,
						"unit",
						lv_unit_3_0,
						"org.xtext.example.mydsl.Adeptness.TimeType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getWaitAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleDuring
entryRuleDuring returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDuringRule()); }
	iv_ruleDuring=ruleDuring
	{ $current=$iv_ruleDuring.current; }
	EOF;

// Rule During
ruleDuring returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='during('
		{
			newLeafNode(otherlv_0, grammarAccess.getDuringAccess().getDuringKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDuringAccess().getTimeDOUBLEParserRuleCall_1_0());
				}
				lv_time_1_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDuringRule());
					}
					set(
						$current,
						"time",
						lv_time_1_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getDuringAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDuringAccess().getUnitTimeTypeParserRuleCall_3_0());
				}
				lv_unit_3_0=ruleTimeType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDuringRule());
					}
					set(
						$current,
						"unit",
						lv_unit_3_0,
						"org.xtext.example.mydsl.Adeptness.TimeType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getDuringAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleChecks
entryRuleChecks returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChecksRule()); }
	iv_ruleChecks=ruleChecks
	{ $current=$iv_ruleChecks.current; }
	EOF;

// Rule Checks
ruleChecks returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='checks:'
		{
			newLeafNode(otherlv_0, grammarAccess.getChecksAccess().getChecksKeyword_0());
		}
		(
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getChecksAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChecksRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getChecksAccess().getEmExpressionsModelParserRuleCall_1_1_0());
					}
					lv_em_2_0=ruleExpressionsModel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChecksRule());
						}
						set(
							$current,
							"em",
							lv_em_2_0,
							"org.xtext.example.mydsl.Adeptness.ExpressionsModel");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getChecksAccess().getReferenceReferenceParserRuleCall_2_0());
				}
				lv_reference_3_0=ruleReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChecksRule());
					}
					set(
						$current,
						"reference",
						lv_reference_3_0,
						"org.xtext.example.mydsl.Adeptness.Reference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getChecksAccess().getFailReasonFailReasonParserRuleCall_3_0());
				}
				lv_failReason_4_0=ruleFailReason
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChecksRule());
					}
					add(
						$current,
						"failReason",
						lv_failReason_4_0,
						"org.xtext.example.mydsl.Adeptness.FailReason");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getChecksAccess().getDescriptionDescriptionParserRuleCall_4_0());
				}
				lv_description_5_0=ruleDescription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChecksRule());
					}
					set(
						$current,
						"description",
						lv_description_5_0,
						"org.xtext.example.mydsl.Adeptness.Description");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); }
	iv_ruleDescription=ruleDescription
	{ $current=$iv_ruleDescription.current; }
	EOF;

// Rule Description
ruleDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Description: '
		{
			newLeafNode(otherlv_0, grammarAccess.getDescriptionAccess().getDescriptionKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_STRING
				{
					newLeafNode(lv_value_1_0, grammarAccess.getDescriptionAccess().getValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDescriptionRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleFailReason
entryRuleFailReason returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFailReasonRule()); }
	iv_ruleFailReason=ruleFailReason
	{ $current=$iv_ruleFailReason.current; }
	EOF;

// Rule FailReason
ruleFailReason returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fails if :'
		{
			newLeafNode(otherlv_0, grammarAccess.getFailReasonAccess().getFailsIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFailReasonAccess().getReasonReasonParserRuleCall_1_0());
				}
				lv_reason_1_0=ruleReason
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFailReasonRule());
					}
					set(
						$current,
						"reason",
						lv_reason_1_0,
						"org.xtext.example.mydsl.Adeptness.Reason");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReason
entryRuleReason returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReasonRule()); }
	iv_ruleReason=ruleReason
	{ $current=$iv_ruleReason.current; }
	EOF;

// Rule Reason
ruleReason returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getReasonAccess().getHighPeakHighPeakParserRuleCall_0_0_0());
					}
					lv_highPeak_0_0=ruleHighPeak
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReasonRule());
						}
						set(
							$current,
							"highPeak",
							lv_highPeak_0_0,
							"org.xtext.example.mydsl.Adeptness.HighPeak");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReasonAccess().getHighTimeHighTimeParserRuleCall_0_1_0());
					}
					lv_highTime_1_0=ruleHighTime
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReasonRule());
						}
						set(
							$current,
							"highTime",
							lv_highTime_1_0,
							"org.xtext.example.mydsl.Adeptness.HighTime");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReasonAccess().getConstDegConstDegParserRuleCall_0_2_0());
					}
					lv_constDeg_2_0=ruleConstDeg
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReasonRule());
						}
						set(
							$current,
							"constDeg",
							lv_constDeg_2_0,
							"org.xtext.example.mydsl.Adeptness.ConstDeg");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReasonAccess().getXPeaksXPeaksParserRuleCall_0_3_0());
					}
					lv_xPeaks_3_0=ruleXPeaks
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReasonRule());
						}
						set(
							$current,
							"xPeaks",
							lv_xPeaks_3_0,
							"org.xtext.example.mydsl.Adeptness.XPeaks");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getReasonAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleXPeaks
entryRuleXPeaks returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXPeaksRule()); }
	iv_ruleXPeaks=ruleXPeaks
	{ $current=$iv_ruleXPeaks.current; }
	EOF;

// Rule XPeaks
ruleXPeaks returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='confidence is below'
		{
			newLeafNode(otherlv_0, grammarAccess.getXPeaksAccess().getConfidenceIsBelowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXPeaksAccess().getCantDOUBLEParserRuleCall_1_0());
				}
				lv_cant_1_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXPeaksRule());
					}
					set(
						$current,
						"cant",
						lv_cant_1_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='more than'
		{
			newLeafNode(otherlv_2, grammarAccess.getXPeaksAccess().getMoreThanKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXPeaksAccess().getNPeaksDOUBLEParserRuleCall_3_0());
				}
				lv_nPeaks_3_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXPeaksRule());
					}
					set(
						$current,
						"nPeaks",
						lv_nPeaks_3_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='times within'
		{
			newLeafNode(otherlv_4, grammarAccess.getXPeaksAccess().getTimesWithinKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXPeaksAccess().getTimeDOUBLEParserRuleCall_5_0());
				}
				lv_time_5_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXPeaksRule());
					}
					set(
						$current,
						"time",
						lv_time_5_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getXPeaksAccess().getUnitTimeTypeParserRuleCall_6_0());
				}
				lv_unit_6_0=ruleTimeType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXPeaksRule());
					}
					set(
						$current,
						"unit",
						lv_unit_6_0,
						"org.xtext.example.mydsl.Adeptness.TimeType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConstDeg
entryRuleConstDeg returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstDegRule()); }
	iv_ruleConstDeg=ruleConstDeg
	{ $current=$iv_ruleConstDeg.current; }
	EOF;

// Rule ConstDeg
ruleConstDeg returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='confidence is in constant degradation'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstDegAccess().getConfidenceIsInConstantDegradationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstDegAccess().getCantDOUBLEParserRuleCall_1_0());
				}
				lv_cant_1_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstDegRule());
					}
					set(
						$current,
						"cant",
						lv_cant_1_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHighTime
entryRuleHighTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHighTimeRule()); }
	iv_ruleHighTime=ruleHighTime
	{ $current=$iv_ruleHighTime.current; }
	EOF;

// Rule HighTime
ruleHighTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='confidence is below'
		{
			newLeafNode(otherlv_0, grammarAccess.getHighTimeAccess().getConfidenceIsBelowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHighTimeAccess().getCantDOUBLEParserRuleCall_1_0());
				}
				lv_cant_1_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHighTimeRule());
					}
					set(
						$current,
						"cant",
						lv_cant_1_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='within'
		{
			newLeafNode(otherlv_2, grammarAccess.getHighTimeAccess().getWithinKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHighTimeAccess().getTimeDOUBLEParserRuleCall_3_0());
				}
				lv_time_3_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHighTimeRule());
					}
					set(
						$current,
						"time",
						lv_time_3_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getHighTimeAccess().getUnitTimeTypeParserRuleCall_4_0());
				}
				lv_unit_4_0=ruleTimeType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHighTimeRule());
					}
					set(
						$current,
						"unit",
						lv_unit_4_0,
						"org.xtext.example.mydsl.Adeptness.TimeType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHighPeak
entryRuleHighPeak returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHighPeakRule()); }
	iv_ruleHighPeak=ruleHighPeak
	{ $current=$iv_ruleHighPeak.current; }
	EOF;

// Rule HighPeak
ruleHighPeak returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='confidence is below'
		{
			newLeafNode(otherlv_0, grammarAccess.getHighPeakAccess().getConfidenceIsBelowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHighPeakAccess().getCantDOUBLEParserRuleCall_1_0());
				}
				lv_cant_1_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHighPeakRule());
					}
					set(
						$current,
						"cant",
						lv_cant_1_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	iv_ruleReference=ruleReference
	{ $current=$iv_ruleReference.current; }
	EOF;

// Rule Reference
ruleReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceAccess().getUpperUpperParserRuleCall_0_0_0());
					}
					lv_upper_0_0=ruleUpper
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceRule());
						}
						set(
							$current,
							"upper",
							lv_upper_0_0,
							"org.xtext.example.mydsl.Adeptness.Upper");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceAccess().getLowerLowerParserRuleCall_0_1_0());
					}
					lv_lower_1_0=ruleLower
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceRule());
						}
						set(
							$current,
							"lower",
							lv_lower_1_0,
							"org.xtext.example.mydsl.Adeptness.Lower");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceAccess().getRangeRangeParserRuleCall_0_2_0());
					}
					lv_range_2_0=ruleRange
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceRule());
						}
						set(
							$current,
							"range",
							lv_range_2_0,
							"org.xtext.example.mydsl.Adeptness.Range");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceAccess().getGapGapParserRuleCall_0_3_0());
					}
					lv_gap_3_0=ruleGap
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceRule());
						}
						set(
							$current,
							"gap",
							lv_gap_3_0,
							"org.xtext.example.mydsl.Adeptness.Gap");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceAccess().getSameSameParserRuleCall_0_4_0());
					}
					lv_same_4_0=ruleSame
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceRule());
						}
						set(
							$current,
							"same",
							lv_same_4_0,
							"org.xtext.example.mydsl.Adeptness.Same");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceAccess().getNotsameNotSameParserRuleCall_0_5_0());
					}
					lv_notsame_5_0=ruleNotSame
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceRule());
						}
						set(
							$current,
							"notsame",
							lv_notsame_5_0,
							"org.xtext.example.mydsl.Adeptness.NotSame");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getReferenceAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleSame
entryRuleSame returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSameRule()); }
	iv_ruleSame=ruleSame
	{ $current=$iv_ruleSame.current; }
	EOF;

// Rule Same
ruleSame returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='should be'
		{
			newLeafNode(otherlv_0, grammarAccess.getSameAccess().getShouldBeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSameAccess().getBound_uppBound_upParserRuleCall_1_0());
				}
				lv_bound_upp_1_0=ruleBound_up
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSameRule());
					}
					set(
						$current,
						"bound_upp",
						lv_bound_upp_1_0,
						"org.xtext.example.mydsl.Adeptness.Bound_up");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNotSame
entryRuleNotSame returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotSameRule()); }
	iv_ruleNotSame=ruleNotSame
	{ $current=$iv_ruleNotSame.current; }
	EOF;

// Rule NotSame
ruleNotSame returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='should not be'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotSameAccess().getShouldNotBeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotSameAccess().getBound_uppBound_upParserRuleCall_1_0());
				}
				lv_bound_upp_1_0=ruleBound_up
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotSameRule());
					}
					set(
						$current,
						"bound_upp",
						lv_bound_upp_1_0,
						"org.xtext.example.mydsl.Adeptness.Bound_up");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUpper
entryRuleUpper returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpperRule()); }
	iv_ruleUpper=ruleUpper
	{ $current=$iv_ruleUpper.current; }
	EOF;

// Rule Upper
ruleUpper returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='is below'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpperAccess().getIsBelowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpperAccess().getBound_uppBound_upParserRuleCall_1_0());
				}
				lv_bound_upp_1_0=ruleBound_up
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpperRule());
					}
					set(
						$current,
						"bound_upp",
						lv_bound_upp_1_0,
						"org.xtext.example.mydsl.Adeptness.Bound_up");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLower
entryRuleLower returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLowerRule()); }
	iv_ruleLower=ruleLower
	{ $current=$iv_ruleLower.current; }
	EOF;

// Rule Lower
ruleLower returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='is above'
		{
			newLeafNode(otherlv_0, grammarAccess.getLowerAccess().getIsAboveKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLowerAccess().getBound_lowerBound_DownParserRuleCall_1_0());
				}
				lv_bound_lower_1_0=ruleBound_Down
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLowerRule());
					}
					set(
						$current,
						"bound_lower",
						lv_bound_lower_1_0,
						"org.xtext.example.mydsl.Adeptness.Bound_Down");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	iv_ruleRange=ruleRange
	{ $current=$iv_ruleRange.current; }
	EOF;

// Rule Range
ruleRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='is in range between'
		{
			newLeafNode(otherlv_0, grammarAccess.getRangeAccess().getIsInRangeBetweenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getBound_lowerBound_DownParserRuleCall_1_0());
				}
				lv_bound_lower_1_0=ruleBound_Down
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"bound_lower",
						lv_bound_lower_1_0,
						"org.xtext.example.mydsl.Adeptness.Bound_Down");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='and'
		{
			newLeafNode(otherlv_2, grammarAccess.getRangeAccess().getAndKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getBound_uppBound_upParserRuleCall_3_0());
				}
				lv_bound_upp_3_0=ruleBound_up
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"bound_upp",
						lv_bound_upp_3_0,
						"org.xtext.example.mydsl.Adeptness.Bound_up");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGap
entryRuleGap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGapRule()); }
	iv_ruleGap=ruleGap
	{ $current=$iv_ruleGap.current; }
	EOF;

// Rule Gap
ruleGap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='not in range between'
		{
			newLeafNode(otherlv_0, grammarAccess.getGapAccess().getNotInRangeBetweenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGapAccess().getBound_lowerBound_DownParserRuleCall_1_0());
				}
				lv_bound_lower_1_0=ruleBound_Down
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGapRule());
					}
					set(
						$current,
						"bound_lower",
						lv_bound_lower_1_0,
						"org.xtext.example.mydsl.Adeptness.Bound_Down");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='and'
		{
			newLeafNode(otherlv_2, grammarAccess.getGapAccess().getAndKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGapAccess().getBound_uppBound_upParserRuleCall_3_0());
				}
				lv_bound_upp_3_0=ruleBound_up
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGapRule());
					}
					set(
						$current,
						"bound_upp",
						lv_bound_upp_3_0,
						"org.xtext.example.mydsl.Adeptness.Bound_up");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBound_up
entryRuleBound_up returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBound_upRule()); }
	iv_ruleBound_up=ruleBound_up
	{ $current=$iv_ruleBound_up.current; }
	EOF;

// Rule Bound_up
ruleBound_up returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBound_upAccess().getValueDOUBLEParserRuleCall_0_0());
				}
				lv_value_0_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBound_upRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBound_upAccess().getEmExpressionsModelParserRuleCall_1_0());
				}
				lv_em_1_0=ruleExpressionsModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBound_upRule());
					}
					set(
						$current,
						"em",
						lv_em_1_0,
						"org.xtext.example.mydsl.Adeptness.ExpressionsModel");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBound_Down
entryRuleBound_Down returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBound_DownRule()); }
	iv_ruleBound_Down=ruleBound_Down
	{ $current=$iv_ruleBound_Down.current; }
	EOF;

// Rule Bound_Down
ruleBound_Down returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBound_DownAccess().getValueDOUBLEParserRuleCall_0_0());
				}
				lv_value_0_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBound_DownRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"org.xtext.example.mydsl.Adeptness.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBound_DownAccess().getEmExpressionsModelParserRuleCall_1_0());
				}
				lv_em_1_0=ruleExpressionsModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBound_DownRule());
					}
					set(
						$current,
						"em",
						lv_em_1_0,
						"org.xtext.example.mydsl.Adeptness.ExpressionsModel");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); }
	iv_ruleBOOLEAN=ruleBOOLEAN
	{ $current=$iv_ruleBOOLEAN.current; }
	EOF;

// Rule BOOLEAN
ruleBOOLEAN returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBOOLEANAccess().getBoolBParserRuleCall_0());
			}
			lv_bool_0_0=ruleb
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBOOLEANRule());
				}
				set(
					$current,
					"bool",
					lv_bool_0_0,
					"org.xtext.example.mydsl.Adeptness.b");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleb
entryRuleb returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBRule()); }
	iv_ruleb=ruleb
	{ $current=$iv_ruleb.current.getText(); }
	EOF;

// Rule b
ruleb returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); }
	iv_ruleDOUBLE=ruleDOUBLE
	{ $current=$iv_ruleDOUBLE.current; }
	EOF;

// Rule DOUBLE
ruleDOUBLE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDOUBLEAccess().getDValDParserRuleCall_0());
			}
			lv_dVal_0_0=ruled
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDOUBLERule());
				}
				set(
					$current,
					"dVal",
					lv_dVal_0_0,
					"org.xtext.example.mydsl.Adeptness.d");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuled
entryRuled returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDRule()); }
	iv_ruled=ruled
	{ $current=$iv_ruled.current.getText(); }
	EOF;

// Rule d
ruled returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getDAccess().getINTTerminalRuleCall_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDAccess().getFullStopKeyword_2_0());
			}
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getDAccess().getINTTerminalRuleCall_2_1());
			}
		)?
	)
;

// Entry rule entryRuleTimeType
entryRuleTimeType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeTypeRule()); }
	iv_ruleTimeType=ruleTimeType
	{ $current=$iv_ruleTimeType.current; }
	EOF;

// Rule TimeType
ruleTimeType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_time_0_0='miliseconds'
				{
					newLeafNode(lv_time_0_0, grammarAccess.getTimeTypeAccess().getTimeMilisecondsKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeTypeRule());
					}
					setWithLastConsumed($current, "time", lv_time_0_0, "miliseconds");
				}
			)
		)
		    |
		(
			(
				lv_time_1_0='seconds'
				{
					newLeafNode(lv_time_1_0, grammarAccess.getTimeTypeAccess().getTimeSecondsKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeTypeRule());
					}
					setWithLastConsumed($current, "time", lv_time_1_0, "seconds");
				}
			)
		)
		    |
		(
			(
				lv_time_2_0='minutes'
				{
					newLeafNode(lv_time_2_0, grammarAccess.getTimeTypeAccess().getTimeMinutesKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeTypeRule());
					}
					setWithLastConsumed($current, "time", lv_time_2_0, "minutes");
				}
			)
		)
		    |
		(
			(
				lv_time_3_0='hours'
				{
					newLeafNode(lv_time_3_0, grammarAccess.getTimeTypeAccess().getTimeHoursKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeTypeRule());
					}
					setWithLastConsumed($current, "time", lv_time_3_0, "hours");
				}
			)
		)
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='datatype'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataTypeAccess().getDatatypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	iv_rulePackageDeclaration=rulePackageDeclaration
	{ $current=$iv_rulePackageDeclaration.current; }
	EOF;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.mydsl.Adeptness.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getElementsAbstractElementParserRuleCall_3_0());
				}
				lv_elements_3_0=ruleAbstractElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					add(
						$current,
						"elements",
						lv_elements_3_0,
						"org.xtext.example.mydsl.Adeptness.AbstractElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleExpressionsModel
entryRuleExpressionsModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionsModelRule()); }
	iv_ruleExpressionsModel=ruleExpressionsModel
	{ $current=$iv_ruleExpressionsModel.current; }
	EOF;

// Rule ExpressionsModel
ruleExpressionsModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getExpressionsModelAccess().getLeftParenthesisKeyword_0());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionsModelAccess().getElementsAbstractElement2ParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleAbstractElement2
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionsModelRule());
					}
					add(
						$current,
						"elements",
						lv_elements_1_0,
						"org.xtext.example.mydsl.Adeptness.AbstractElement2");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpressionsModelAccess().getRightParenthesisKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleAbstractElement2
entryRuleAbstractElement2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractElement2Rule()); }
	iv_ruleAbstractElement2=ruleAbstractElement2
	{ $current=$iv_ruleAbstractElement2.current; }
	EOF;

// Rule AbstractElement2
ruleAbstractElement2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getAbstractElement2Access().getLeftParenthesisKeyword_0());
			}
		)*
		(
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getAbstractElement2Access().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAbstractElement2Rule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAbstractElement2Access().getValueDOUBLEParserRuleCall_1_1_0());
					}
					lv_value_2_0=ruleDOUBLE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAbstractElement2Rule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"org.xtext.example.mydsl.Adeptness.DOUBLE");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAbstractElement2Access().getOpOperatorsParserRuleCall_2_0());
				}
				lv_op_3_0=ruleOperators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbstractElement2Rule());
					}
					add(
						$current,
						"op",
						lv_op_3_0,
						"org.xtext.example.mydsl.Adeptness.Operators");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getAbstractElement2Access().getRightParenthesisKeyword_3());
			}
		)*
	)
;

// Entry rule entryRuleOperators
entryRuleOperators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorsRule()); }
	iv_ruleOperators=ruleOperators
	{ $current=$iv_ruleOperators.current; }
	EOF;

// Rule Operators
ruleOperators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperatorsAccess().getOperatorOpParserRuleCall_0_0());
				}
				lv_operator_0_0=ruleOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperatorsRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"org.xtext.example.mydsl.Adeptness.Op");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getOperatorsAccess().getComparationCompOpParserRuleCall_1_0());
				}
				lv_comparation_1_0=ruleCompOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperatorsRule());
					}
					set(
						$current,
						"comparation",
						lv_comparation_1_0,
						"org.xtext.example.mydsl.Adeptness.CompOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getOperatorsAccess().getLogicOperatorLogicOpParserRuleCall_2_0());
				}
				lv_logicOperator_2_0=ruleLogicOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperatorsRule());
					}
					set(
						$current,
						"logicOperator",
						lv_logicOperator_2_0,
						"org.xtext.example.mydsl.Adeptness.LogicOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getOperatorsAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleCompOp
entryRuleCompOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompOpRule()); }
	iv_ruleCompOp=ruleCompOp
	{ $current=$iv_ruleCompOp.current; }
	EOF;

// Rule CompOp
ruleCompOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_1='=='
				{
					newLeafNode(lv_op_0_1, grammarAccess.getCompOpAccess().getOpEqualsSignEqualsSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompOpRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_1, null);
				}
				    |
				lv_op_0_2='!='
				{
					newLeafNode(lv_op_0_2, grammarAccess.getCompOpAccess().getOpExclamationMarkEqualsSignKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompOpRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_2, null);
				}
				    |
				lv_op_0_3='>='
				{
					newLeafNode(lv_op_0_3, grammarAccess.getCompOpAccess().getOpGreaterThanSignEqualsSignKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompOpRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_3, null);
				}
				    |
				lv_op_0_4='<='
				{
					newLeafNode(lv_op_0_4, grammarAccess.getCompOpAccess().getOpLessThanSignEqualsSignKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompOpRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_4, null);
				}
				    |
				lv_op_0_5='<'
				{
					newLeafNode(lv_op_0_5, grammarAccess.getCompOpAccess().getOpLessThanSignKeyword_0_4());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompOpRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_5, null);
				}
				    |
				lv_op_0_6='>'
				{
					newLeafNode(lv_op_0_6, grammarAccess.getCompOpAccess().getOpGreaterThanSignKeyword_0_5());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompOpRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_6, null);
				}
			)
		)
	)
;

// Entry rule entryRuleLogicOp
entryRuleLogicOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicOpRule()); }
	iv_ruleLogicOp=ruleLogicOp
	{ $current=$iv_ruleLogicOp.current; }
	EOF;

// Rule LogicOp
ruleLogicOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_1='&&'
				{
					newLeafNode(lv_op_0_1, grammarAccess.getLogicOpAccess().getOpAmpersandAmpersandKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicOpRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_1, null);
				}
				    |
				lv_op_0_2='||'
				{
					newLeafNode(lv_op_0_2, grammarAccess.getLogicOpAccess().getOpVerticalLineVerticalLineKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicOpRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleOp
entryRuleOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpRule()); }
	iv_ruleOp=ruleOp
	{ $current=$iv_ruleOp.current; }
	EOF;

// Rule Op
ruleOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_1='+'
				{
					newLeafNode(lv_op_0_1, grammarAccess.getOpAccess().getOpPlusSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOpRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_1, null);
				}
				    |
				lv_op_0_2='-'
				{
					newLeafNode(lv_op_0_2, grammarAccess.getOpAccess().getOpHyphenMinusKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOpRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_2, null);
				}
				    |
				lv_op_0_3='*'
				{
					newLeafNode(lv_op_0_3, grammarAccess.getOpAccess().getOpAsteriskKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOpRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_3, null);
				}
				    |
				lv_op_0_4='/'
				{
					newLeafNode(lv_op_0_4, grammarAccess.getOpAccess().getOpSolidusKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOpRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_4, null);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
