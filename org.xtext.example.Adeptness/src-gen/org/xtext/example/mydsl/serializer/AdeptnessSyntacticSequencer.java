/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.AdeptnessGrammarAccess;

@SuppressWarnings("all")
public class AdeptnessSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AdeptnessGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AbstractElement2_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_AbstractElement2_RightParenthesisKeyword_3_a;
	protected AbstractElementAlias match_During_CommaKeyword_2_p;
	protected AbstractElementAlias match_During_DuringKeyword_0_p;
	protected AbstractElementAlias match_ExpressionsModel_LeftParenthesisKeyword_0_q;
	protected AbstractElementAlias match_ExpressionsModel_RightParenthesisKeyword_2_q;
	protected AbstractElementAlias match_Wait_AfterKeyword_0_p;
	protected AbstractElementAlias match_Wait_CommaKeyword_2_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AdeptnessGrammarAccess) access;
		match_AbstractElement2_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getAbstractElement2Access().getLeftParenthesisKeyword_0());
		match_AbstractElement2_RightParenthesisKeyword_3_a = new TokenAlias(true, true, grammarAccess.getAbstractElement2Access().getRightParenthesisKeyword_3());
		match_During_CommaKeyword_2_p = new TokenAlias(true, false, grammarAccess.getDuringAccess().getCommaKeyword_2());
		match_During_DuringKeyword_0_p = new TokenAlias(true, false, grammarAccess.getDuringAccess().getDuringKeyword_0());
		match_ExpressionsModel_LeftParenthesisKeyword_0_q = new TokenAlias(false, true, grammarAccess.getExpressionsModelAccess().getLeftParenthesisKeyword_0());
		match_ExpressionsModel_RightParenthesisKeyword_2_q = new TokenAlias(false, true, grammarAccess.getExpressionsModelAccess().getRightParenthesisKeyword_2());
		match_Wait_AfterKeyword_0_p = new TokenAlias(true, false, grammarAccess.getWaitAccess().getAfterKeyword_0());
		match_Wait_CommaKeyword_2_p = new TokenAlias(true, false, grammarAccess.getWaitAccess().getCommaKeyword_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AbstractElement2_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_AbstractElement2_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbstractElement2_RightParenthesisKeyword_3_a.equals(syntax))
				emit_AbstractElement2_RightParenthesisKeyword_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_During_CommaKeyword_2_p.equals(syntax))
				emit_During_CommaKeyword_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_During_DuringKeyword_0_p.equals(syntax))
				emit_During_DuringKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionsModel_LeftParenthesisKeyword_0_q.equals(syntax))
				emit_ExpressionsModel_LeftParenthesisKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionsModel_RightParenthesisKeyword_2_q.equals(syntax))
				emit_ExpressionsModel_RightParenthesisKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Wait_AfterKeyword_0_p.equals(syntax))
				emit_Wait_AfterKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Wait_CommaKeyword_2_p.equals(syntax))
				emit_Wait_CommaKeyword_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) value=DOUBLE
	 */
	protected void emit_AbstractElement2_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 *     op+=Operators (ambiguity) (rule end)
	 *     value=DOUBLE (ambiguity) (rule end)
	 */
	protected void emit_AbstractElement2_RightParenthesisKeyword_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','+
	 *
	 * This ambiguous syntax occurs at:
	 *     time=DOUBLE (ambiguity) unit=TimeType
	 */
	protected void emit_During_CommaKeyword_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'during('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) time=DOUBLE
	 */
	protected void emit_During_DuringKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ')'? (rule start)
	 *     (rule start) (ambiguity) elements+=AbstractElement2
	 */
	protected void emit_ExpressionsModel_LeftParenthesisKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('? (ambiguity) (rule start)
	 *     elements+=AbstractElement2 (ambiguity) (rule end)
	 */
	protected void emit_ExpressionsModel_RightParenthesisKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'after('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) time=DOUBLE
	 */
	protected void emit_Wait_AfterKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','+
	 *
	 * This ambiguous syntax occurs at:
	 *     time=DOUBLE (ambiguity) unit=TimeType
	 */
	protected void emit_Wait_CommaKeyword_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
