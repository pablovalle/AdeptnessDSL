/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.AdeptnessGrammarAccess;

@SuppressWarnings("all")
public class AdeptnessSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AdeptnessGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AbstractElement2_LeftParenthesisKeyword_0_q;
	protected AbstractElementAlias match_AbstractElement2_RightParenthesisKeyword_2_3_q;
	protected AbstractElementAlias match_ExpressionsModel_LeftParenthesisKeyword_0_q;
	protected AbstractElementAlias match_ExpressionsModel_RightParenthesisKeyword_1_1_a;
	protected AbstractElementAlias match_ExpressionsModel_RightParenthesisKeyword_1_1_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AdeptnessGrammarAccess) access;
		match_AbstractElement2_LeftParenthesisKeyword_0_q = new TokenAlias(false, true, grammarAccess.getAbstractElement2Access().getLeftParenthesisKeyword_0());
		match_AbstractElement2_RightParenthesisKeyword_2_3_q = new TokenAlias(false, true, grammarAccess.getAbstractElement2Access().getRightParenthesisKeyword_2_3());
		match_ExpressionsModel_LeftParenthesisKeyword_0_q = new TokenAlias(false, true, grammarAccess.getExpressionsModelAccess().getLeftParenthesisKeyword_0());
		match_ExpressionsModel_RightParenthesisKeyword_1_1_a = new TokenAlias(true, true, grammarAccess.getExpressionsModelAccess().getRightParenthesisKeyword_1_1());
		match_ExpressionsModel_RightParenthesisKeyword_1_1_p = new TokenAlias(true, false, grammarAccess.getExpressionsModelAccess().getRightParenthesisKeyword_1_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AbstractElement2_LeftParenthesisKeyword_0_q.equals(syntax))
				emit_AbstractElement2_LeftParenthesisKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbstractElement2_RightParenthesisKeyword_2_3_q.equals(syntax))
				emit_AbstractElement2_RightParenthesisKeyword_2_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionsModel_LeftParenthesisKeyword_0_q.equals(syntax))
				emit_ExpressionsModel_LeftParenthesisKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionsModel_RightParenthesisKeyword_1_1_a.equals(syntax))
				emit_ExpressionsModel_RightParenthesisKeyword_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionsModel_RightParenthesisKeyword_1_1_p.equals(syntax))
				emit_ExpressionsModel_RightParenthesisKeyword_1_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) value=DOUBLE
	 */
	protected void emit_AbstractElement2_LeftParenthesisKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 *     value=DOUBLE (ambiguity) (rule end)
	 */
	protected void emit_AbstractElement2_RightParenthesisKeyword_2_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ')'* (rule start)
	 *     (rule start) (ambiguity) ')'* elements+=AbstractElement2
	 *     (rule start) (ambiguity) ')'+ (rule start)
	 */
	protected void emit_ExpressionsModel_LeftParenthesisKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('? (ambiguity) (rule start)
	 *     (rule start) '('? (ambiguity) elements+=AbstractElement2
	 *     elements+=AbstractElement2 (ambiguity) (rule end)
	 *     elements+=AbstractElement2 (ambiguity) elements+=AbstractElement2
	 */
	protected void emit_ExpressionsModel_RightParenthesisKeyword_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ')'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('? (ambiguity) (rule start)
	 */
	protected void emit_ExpressionsModel_RightParenthesisKeyword_1_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
