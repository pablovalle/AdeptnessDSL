/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.adeptness.Adeptness;
import org.xtext.example.mydsl.adeptness.AdeptnessPackage;
import org.xtext.example.mydsl.adeptness.BOOLEAN;
import org.xtext.example.mydsl.adeptness.Bound_Down;
import org.xtext.example.mydsl.adeptness.Bound_up;
import org.xtext.example.mydsl.adeptness.Check_Gap;
import org.xtext.example.mydsl.adeptness.Check_Range;
import org.xtext.example.mydsl.adeptness.Check_Static_lower_only;
import org.xtext.example.mydsl.adeptness.Check_Static_upper_only;
import org.xtext.example.mydsl.adeptness.DOUBLE;
import org.xtext.example.mydsl.adeptness.DataType;
import org.xtext.example.mydsl.adeptness.Import;
import org.xtext.example.mydsl.adeptness.InclusiveBound;
import org.xtext.example.mydsl.adeptness.PackageDeclaration;
import org.xtext.example.mydsl.adeptness.Signal;
import org.xtext.example.mydsl.services.AdeptnessGrammarAccess;

@SuppressWarnings("all")
public class AdeptnessSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AdeptnessGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AdeptnessPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AdeptnessPackage.ADEPTNESS:
				sequence_Adeptness(context, (Adeptness) semanticObject); 
				return; 
			case AdeptnessPackage.BOOLEAN:
				sequence_BOOLEAN(context, (BOOLEAN) semanticObject); 
				return; 
			case AdeptnessPackage.BOUND_DOWN:
				sequence_Bound_Down(context, (Bound_Down) semanticObject); 
				return; 
			case AdeptnessPackage.BOUND_UP:
				sequence_Bound_up(context, (Bound_up) semanticObject); 
				return; 
			case AdeptnessPackage.CHECK_GAP:
				sequence_Check_Gap(context, (Check_Gap) semanticObject); 
				return; 
			case AdeptnessPackage.CHECK_RANGE:
				sequence_Check_Range(context, (Check_Range) semanticObject); 
				return; 
			case AdeptnessPackage.CHECK_STATIC_LOWER_ONLY:
				sequence_Check_Static_lower_only(context, (Check_Static_lower_only) semanticObject); 
				return; 
			case AdeptnessPackage.CHECK_STATIC_UPPER_ONLY:
				sequence_Check_Static_upper_only(context, (Check_Static_upper_only) semanticObject); 
				return; 
			case AdeptnessPackage.DOUBLE:
				sequence_DOUBLE(context, (DOUBLE) semanticObject); 
				return; 
			case AdeptnessPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case AdeptnessPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case AdeptnessPackage.INCLUSIVE_BOUND:
				sequence_InclusiveBound(context, (InclusiveBound) semanticObject); 
				return; 
			case AdeptnessPackage.PACKAGE_DECLARATION:
				sequence_PackageDeclaration(context, (PackageDeclaration) semanticObject); 
				return; 
			case AdeptnessPackage.SIGNAL:
				sequence_Signal(context, (Signal) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Adeptness returns Adeptness
	 *
	 * Constraint:
	 *     elements+=AbstractElement+
	 */
	protected void sequence_Adeptness(ISerializationContext context, Adeptness semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BOOLEAN returns BOOLEAN
	 *
	 * Constraint:
	 *     bool=b
	 */
	protected void sequence_BOOLEAN(ISerializationContext context, BOOLEAN semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.BOOLEAN__BOOL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.BOOLEAN__BOOL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBOOLEANAccess().getBoolBParserRuleCall_0(), semanticObject.isBool());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Bound_Down returns Bound_Down
	 *
	 * Constraint:
	 *     (name=ID value=DOUBLE)
	 */
	protected void sequence_Bound_Down(ISerializationContext context, Bound_Down semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.BOUND_DOWN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.BOUND_DOWN__NAME));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.BOUND_DOWN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.BOUND_DOWN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBound_DownAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBound_DownAccess().getValueDOUBLEParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Bound_up returns Bound_up
	 *
	 * Constraint:
	 *     (name=ID value=DOUBLE)
	 */
	protected void sequence_Bound_up(ISerializationContext context, Bound_up semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.BOUND_UP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.BOUND_UP__NAME));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.BOUND_UP__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.BOUND_UP__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBound_upAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBound_upAccess().getValueDOUBLEParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Check_Gap returns Check_Gap
	 *
	 * Constraint:
	 *     (name=ID inclusive_bound=InclusiveBound bound_low=Bound_Down bound_up=Bound_up)
	 */
	protected void sequence_Check_Gap(ISerializationContext context, Check_Gap semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_GAP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_GAP__NAME));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_GAP__INCLUSIVE_BOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_GAP__INCLUSIVE_BOUND));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_GAP__BOUND_LOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_GAP__BOUND_LOW));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_GAP__BOUND_UP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_GAP__BOUND_UP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheck_GapAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCheck_GapAccess().getInclusive_boundInclusiveBoundParserRuleCall_3_0(), semanticObject.getInclusive_bound());
		feeder.accept(grammarAccess.getCheck_GapAccess().getBound_lowBound_DownParserRuleCall_4_0(), semanticObject.getBound_low());
		feeder.accept(grammarAccess.getCheck_GapAccess().getBound_upBound_upParserRuleCall_5_0(), semanticObject.getBound_up());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Check_Range returns Check_Range
	 *
	 * Constraint:
	 *     (name=ID inclusive_bound=InclusiveBound bound_low=Bound_Down bound_up=Bound_up)
	 */
	protected void sequence_Check_Range(ISerializationContext context, Check_Range semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_RANGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_RANGE__NAME));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_RANGE__INCLUSIVE_BOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_RANGE__INCLUSIVE_BOUND));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_RANGE__BOUND_LOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_RANGE__BOUND_LOW));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_RANGE__BOUND_UP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_RANGE__BOUND_UP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheck_RangeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCheck_RangeAccess().getInclusive_boundInclusiveBoundParserRuleCall_3_0(), semanticObject.getInclusive_bound());
		feeder.accept(grammarAccess.getCheck_RangeAccess().getBound_lowBound_DownParserRuleCall_4_0(), semanticObject.getBound_low());
		feeder.accept(grammarAccess.getCheck_RangeAccess().getBound_upBound_upParserRuleCall_5_0(), semanticObject.getBound_up());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Check_Static_lower_only returns Check_Static_lower_only
	 *
	 * Constraint:
	 *     (name=ID inclusive_bound=InclusiveBound bound_low=Bound_Down)
	 */
	protected void sequence_Check_Static_lower_only(ISerializationContext context, Check_Static_lower_only semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_STATIC_LOWER_ONLY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_STATIC_LOWER_ONLY__NAME));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_STATIC_LOWER_ONLY__INCLUSIVE_BOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_STATIC_LOWER_ONLY__INCLUSIVE_BOUND));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_STATIC_LOWER_ONLY__BOUND_LOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_STATIC_LOWER_ONLY__BOUND_LOW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheck_Static_lower_onlyAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCheck_Static_lower_onlyAccess().getInclusive_boundInclusiveBoundParserRuleCall_3_0(), semanticObject.getInclusive_bound());
		feeder.accept(grammarAccess.getCheck_Static_lower_onlyAccess().getBound_lowBound_DownParserRuleCall_4_0(), semanticObject.getBound_low());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Check_Static_upper_only returns Check_Static_upper_only
	 *
	 * Constraint:
	 *     (name=ID inclusive_bound=InclusiveBound bound_up=Bound_up)
	 */
	protected void sequence_Check_Static_upper_only(ISerializationContext context, Check_Static_upper_only semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_STATIC_UPPER_ONLY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_STATIC_UPPER_ONLY__NAME));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_STATIC_UPPER_ONLY__INCLUSIVE_BOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_STATIC_UPPER_ONLY__INCLUSIVE_BOUND));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CHECK_STATIC_UPPER_ONLY__BOUND_UP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CHECK_STATIC_UPPER_ONLY__BOUND_UP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheck_Static_upper_onlyAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCheck_Static_upper_onlyAccess().getInclusive_boundInclusiveBoundParserRuleCall_3_0(), semanticObject.getInclusive_bound());
		feeder.accept(grammarAccess.getCheck_Static_upper_onlyAccess().getBound_upBound_upParserRuleCall_4_0(), semanticObject.getBound_up());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DOUBLE returns DOUBLE
	 *
	 * Constraint:
	 *     dVal=d
	 */
	protected void sequence_DOUBLE(ISerializationContext context, DOUBLE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.DOUBLE__DVAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.DOUBLE__DVAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDOUBLEAccess().getDValDParserRuleCall_0(), semanticObject.getDVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns DataType
	 *     Type returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Import
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InclusiveBound returns InclusiveBound
	 *
	 * Constraint:
	 *     (name=ID value=BOOLEAN)
	 */
	protected void sequence_InclusiveBound(ISerializationContext context, InclusiveBound semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.INCLUSIVE_BOUND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.INCLUSIVE_BOUND__NAME));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.INCLUSIVE_BOUND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.INCLUSIVE_BOUND__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInclusiveBoundAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInclusiveBoundAccess().getValueBOOLEANParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns PackageDeclaration
	 *     PackageDeclaration returns PackageDeclaration
	 *
	 * Constraint:
	 *     (name=QualifiedName elements+=AbstractElement*)
	 */
	protected void sequence_PackageDeclaration(ISerializationContext context, PackageDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Signal
	 *     Type returns Signal
	 *     Signal returns Signal
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         check_static_upper+=Check_Static_upper_only* 
	 *         check_static_lower+=Check_Static_lower_only* 
	 *         check_range+=Check_Range* 
	 *         check_gap+=Check_Gap*
	 *     )
	 */
	protected void sequence_Signal(ISerializationContext context, Signal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
