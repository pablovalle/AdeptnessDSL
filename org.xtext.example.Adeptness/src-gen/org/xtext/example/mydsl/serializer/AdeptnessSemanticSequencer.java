/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.adeptness.Adeptness;
import org.xtext.example.mydsl.adeptness.AdeptnessPackage;
import org.xtext.example.mydsl.adeptness.And;
import org.xtext.example.mydsl.adeptness.BOOLEAN;
import org.xtext.example.mydsl.adeptness.BoolConstant;
import org.xtext.example.mydsl.adeptness.Bound_Down;
import org.xtext.example.mydsl.adeptness.Bound_up;
import org.xtext.example.mydsl.adeptness.Checks;
import org.xtext.example.mydsl.adeptness.Comparison;
import org.xtext.example.mydsl.adeptness.ConstDeg;
import org.xtext.example.mydsl.adeptness.DOUBLE;
import org.xtext.example.mydsl.adeptness.DataType;
import org.xtext.example.mydsl.adeptness.Description;
import org.xtext.example.mydsl.adeptness.Equality;
import org.xtext.example.mydsl.adeptness.EvalExpression;
import org.xtext.example.mydsl.adeptness.Expression;
import org.xtext.example.mydsl.adeptness.ExpressionsModel;
import org.xtext.example.mydsl.adeptness.FailReason;
import org.xtext.example.mydsl.adeptness.Gap;
import org.xtext.example.mydsl.adeptness.HighPeak;
import org.xtext.example.mydsl.adeptness.HighTime;
import org.xtext.example.mydsl.adeptness.ImportMonitoringPlan;
import org.xtext.example.mydsl.adeptness.Imports;
import org.xtext.example.mydsl.adeptness.InclusiveBound;
import org.xtext.example.mydsl.adeptness.IntConstant;
import org.xtext.example.mydsl.adeptness.Lower;
import org.xtext.example.mydsl.adeptness.Minus;
import org.xtext.example.mydsl.adeptness.MonitoringFile;
import org.xtext.example.mydsl.adeptness.MonitoringPlan;
import org.xtext.example.mydsl.adeptness.MonitoringVariable;
import org.xtext.example.mydsl.adeptness.MonitoringVariableExpresion;
import org.xtext.example.mydsl.adeptness.MulOrDiv;
import org.xtext.example.mydsl.adeptness.Not;
import org.xtext.example.mydsl.adeptness.Or;
import org.xtext.example.mydsl.adeptness.Oracle;
import org.xtext.example.mydsl.adeptness.PackageDeclaration;
import org.xtext.example.mydsl.adeptness.Plus;
import org.xtext.example.mydsl.adeptness.PrecondReference;
import org.xtext.example.mydsl.adeptness.Range;
import org.xtext.example.mydsl.adeptness.Reason;
import org.xtext.example.mydsl.adeptness.Reference;
import org.xtext.example.mydsl.adeptness.Sig_type;
import org.xtext.example.mydsl.adeptness.Signal;
import org.xtext.example.mydsl.adeptness.StringConstant;
import org.xtext.example.mydsl.adeptness.TimeType;
import org.xtext.example.mydsl.adeptness.Upper;
import org.xtext.example.mydsl.adeptness.Variable;
import org.xtext.example.mydsl.adeptness.When;
import org.xtext.example.mydsl.adeptness.XPeaks;
import org.xtext.example.mydsl.services.AdeptnessGrammarAccess;

@SuppressWarnings("all")
public class AdeptnessSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AdeptnessGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AdeptnessPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AdeptnessPackage.ADEPTNESS:
				sequence_Adeptness(context, (Adeptness) semanticObject); 
				return; 
			case AdeptnessPackage.AND:
				sequence_And(context, (And) semanticObject); 
				return; 
			case AdeptnessPackage.BOOLEAN:
				sequence_BOOLEAN(context, (BOOLEAN) semanticObject); 
				return; 
			case AdeptnessPackage.BOOL_CONSTANT:
				sequence_Atomic(context, (BoolConstant) semanticObject); 
				return; 
			case AdeptnessPackage.BOUND_DOWN:
				sequence_Bound_Down(context, (Bound_Down) semanticObject); 
				return; 
			case AdeptnessPackage.BOUND_UP:
				sequence_Bound_up(context, (Bound_up) semanticObject); 
				return; 
			case AdeptnessPackage.CHECKS:
				sequence_Checks(context, (Checks) semanticObject); 
				return; 
			case AdeptnessPackage.COMPARISON:
				sequence_Comparison(context, (Comparison) semanticObject); 
				return; 
			case AdeptnessPackage.CONST_DEG:
				sequence_ConstDeg(context, (ConstDeg) semanticObject); 
				return; 
			case AdeptnessPackage.DOUBLE:
				sequence_DOUBLE(context, (DOUBLE) semanticObject); 
				return; 
			case AdeptnessPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case AdeptnessPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case AdeptnessPackage.EQUALITY:
				sequence_Equality(context, (Equality) semanticObject); 
				return; 
			case AdeptnessPackage.EVAL_EXPRESSION:
				sequence_EvalExpression(context, (EvalExpression) semanticObject); 
				return; 
			case AdeptnessPackage.EXPRESSION:
				sequence_Atomic(context, (Expression) semanticObject); 
				return; 
			case AdeptnessPackage.EXPRESSIONS_MODEL:
				sequence_ExpressionsModel(context, (ExpressionsModel) semanticObject); 
				return; 
			case AdeptnessPackage.FAIL_REASON:
				sequence_FailReason(context, (FailReason) semanticObject); 
				return; 
			case AdeptnessPackage.GAP:
				sequence_Gap(context, (Gap) semanticObject); 
				return; 
			case AdeptnessPackage.HIGH_PEAK:
				sequence_HighPeak(context, (HighPeak) semanticObject); 
				return; 
			case AdeptnessPackage.HIGH_TIME:
				sequence_HighTime(context, (HighTime) semanticObject); 
				return; 
			case AdeptnessPackage.IMPORT_MONITORING_PLAN:
				sequence_ImportMonitoringPlan(context, (ImportMonitoringPlan) semanticObject); 
				return; 
			case AdeptnessPackage.IMPORTS:
				sequence_Imports(context, (Imports) semanticObject); 
				return; 
			case AdeptnessPackage.INCLUSIVE_BOUND:
				sequence_InclusiveBound(context, (InclusiveBound) semanticObject); 
				return; 
			case AdeptnessPackage.INT_CONSTANT:
				sequence_Atomic(context, (IntConstant) semanticObject); 
				return; 
			case AdeptnessPackage.LOWER:
				sequence_Lower(context, (Lower) semanticObject); 
				return; 
			case AdeptnessPackage.MINUS:
				sequence_PlusOrMinus(context, (Minus) semanticObject); 
				return; 
			case AdeptnessPackage.MONITORING_FILE:
				sequence_MonitoringFile(context, (MonitoringFile) semanticObject); 
				return; 
			case AdeptnessPackage.MONITORING_PLAN:
				sequence_MonitoringPlan(context, (MonitoringPlan) semanticObject); 
				return; 
			case AdeptnessPackage.MONITORING_VARIABLE:
				sequence_MonitoringVariable(context, (MonitoringVariable) semanticObject); 
				return; 
			case AdeptnessPackage.MONITORING_VARIABLE_EXPRESION:
				sequence_MonitoringVariableExpresion(context, (MonitoringVariableExpresion) semanticObject); 
				return; 
			case AdeptnessPackage.MUL_OR_DIV:
				sequence_MulOrDiv(context, (MulOrDiv) semanticObject); 
				return; 
			case AdeptnessPackage.NOT:
				sequence_Primary(context, (Not) semanticObject); 
				return; 
			case AdeptnessPackage.OR:
				sequence_Or(context, (Or) semanticObject); 
				return; 
			case AdeptnessPackage.ORACLE:
				sequence_Oracle(context, (Oracle) semanticObject); 
				return; 
			case AdeptnessPackage.PACKAGE_DECLARATION:
				sequence_PackageDeclaration(context, (PackageDeclaration) semanticObject); 
				return; 
			case AdeptnessPackage.PLUS:
				sequence_PlusOrMinus(context, (Plus) semanticObject); 
				return; 
			case AdeptnessPackage.PRECOND_REFERENCE:
				sequence_PrecondReference(context, (PrecondReference) semanticObject); 
				return; 
			case AdeptnessPackage.RANGE:
				sequence_Range(context, (Range) semanticObject); 
				return; 
			case AdeptnessPackage.REASON:
				sequence_Reason(context, (Reason) semanticObject); 
				return; 
			case AdeptnessPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case AdeptnessPackage.SIG_TYPE:
				sequence_Sig_type(context, (Sig_type) semanticObject); 
				return; 
			case AdeptnessPackage.SIGNAL:
				sequence_Signal(context, (Signal) semanticObject); 
				return; 
			case AdeptnessPackage.STRING_CONSTANT:
				sequence_Atomic(context, (StringConstant) semanticObject); 
				return; 
			case AdeptnessPackage.TIME_TYPE:
				sequence_TimeType(context, (TimeType) semanticObject); 
				return; 
			case AdeptnessPackage.UPPER:
				sequence_Upper(context, (Upper) semanticObject); 
				return; 
			case AdeptnessPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case AdeptnessPackage.WHEN:
				sequence_When(context, (When) semanticObject); 
				return; 
			case AdeptnessPackage.XPEAKS:
				sequence_XPeaks(context, (XPeaks) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Adeptness returns Adeptness
	 *
	 * Constraint:
	 *     elements+=AbstractElement+
	 */
	protected void sequence_Adeptness(ISerializationContext context, Adeptness semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns And
	 *     Or returns And
	 *     Or.Or_1_0 returns And
	 *     And returns And
	 *     And.And_1_0 returns And
	 *     Equality returns And
	 *     Equality.Equality_1_0 returns And
	 *     Comparison returns And
	 *     Comparison.Comparison_1_0 returns And
	 *     PlusOrMinus returns And
	 *     PlusOrMinus.Plus_1_0_0_0 returns And
	 *     PlusOrMinus.Minus_1_0_1_0 returns And
	 *     MulOrDiv returns And
	 *     MulOrDiv.MulOrDiv_1_0_0 returns And
	 *     Primary returns And
	 *
	 * Constraint:
	 *     (left=And_And_1_0 right=Equality)
	 */
	protected void sequence_And(ISerializationContext context, And semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.AND__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.AND__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndAccess().getAndLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BoolConstant
	 *     Or returns BoolConstant
	 *     Or.Or_1_0 returns BoolConstant
	 *     And returns BoolConstant
	 *     And.And_1_0 returns BoolConstant
	 *     Equality returns BoolConstant
	 *     Equality.Equality_1_0 returns BoolConstant
	 *     Comparison returns BoolConstant
	 *     Comparison.Comparison_1_0 returns BoolConstant
	 *     PlusOrMinus returns BoolConstant
	 *     PlusOrMinus.Plus_1_0_0_0 returns BoolConstant
	 *     PlusOrMinus.Minus_1_0_1_0 returns BoolConstant
	 *     MulOrDiv returns BoolConstant
	 *     MulOrDiv.MulOrDiv_1_0_0 returns BoolConstant
	 *     Primary returns BoolConstant
	 *     Atomic returns BoolConstant
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 */
	protected void sequence_Atomic(ISerializationContext context, BoolConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *     Or returns Expression
	 *     Or.Or_1_0 returns Expression
	 *     And returns Expression
	 *     And.And_1_0 returns Expression
	 *     Equality returns Expression
	 *     Equality.Equality_1_0 returns Expression
	 *     Comparison returns Expression
	 *     Comparison.Comparison_1_0 returns Expression
	 *     PlusOrMinus returns Expression
	 *     PlusOrMinus.Plus_1_0_0_0 returns Expression
	 *     PlusOrMinus.Minus_1_0_1_0 returns Expression
	 *     MulOrDiv returns Expression
	 *     MulOrDiv.MulOrDiv_1_0_0 returns Expression
	 *     Primary returns Expression
	 *     Atomic returns Expression
	 *
	 * Constraint:
	 *     variable=Variable
	 */
	protected void sequence_Atomic(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.EXPRESSION__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.EXPRESSION__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getVariableVariableParserRuleCall_3_0(), semanticObject.getVariable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IntConstant
	 *     Or returns IntConstant
	 *     Or.Or_1_0 returns IntConstant
	 *     And returns IntConstant
	 *     And.And_1_0 returns IntConstant
	 *     Equality returns IntConstant
	 *     Equality.Equality_1_0 returns IntConstant
	 *     Comparison returns IntConstant
	 *     Comparison.Comparison_1_0 returns IntConstant
	 *     PlusOrMinus returns IntConstant
	 *     PlusOrMinus.Plus_1_0_0_0 returns IntConstant
	 *     PlusOrMinus.Minus_1_0_1_0 returns IntConstant
	 *     MulOrDiv returns IntConstant
	 *     MulOrDiv.MulOrDiv_1_0_0 returns IntConstant
	 *     Primary returns IntConstant
	 *     Atomic returns IntConstant
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Atomic(ISerializationContext context, IntConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.INT_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.INT_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns StringConstant
	 *     Or returns StringConstant
	 *     Or.Or_1_0 returns StringConstant
	 *     And returns StringConstant
	 *     And.And_1_0 returns StringConstant
	 *     Equality returns StringConstant
	 *     Equality.Equality_1_0 returns StringConstant
	 *     Comparison returns StringConstant
	 *     Comparison.Comparison_1_0 returns StringConstant
	 *     PlusOrMinus returns StringConstant
	 *     PlusOrMinus.Plus_1_0_0_0 returns StringConstant
	 *     PlusOrMinus.Minus_1_0_1_0 returns StringConstant
	 *     MulOrDiv returns StringConstant
	 *     MulOrDiv.MulOrDiv_1_0_0 returns StringConstant
	 *     Primary returns StringConstant
	 *     Atomic returns StringConstant
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Atomic(ISerializationContext context, StringConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.STRING_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.STRING_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BOOLEAN returns BOOLEAN
	 *
	 * Constraint:
	 *     bool=b
	 */
	protected void sequence_BOOLEAN(ISerializationContext context, BOOLEAN semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.BOOLEAN__BOOL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.BOOLEAN__BOOL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBOOLEANAccess().getBoolBParserRuleCall_0(), semanticObject.isBool());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Bound_Down returns Bound_Down
	 *
	 * Constraint:
	 *     (value=DOUBLE | name=ID | em=ExpressionsModel)
	 */
	protected void sequence_Bound_Down(ISerializationContext context, Bound_Down semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bound_up returns Bound_up
	 *
	 * Constraint:
	 *     (value=DOUBLE | name=ID | em=ExpressionsModel)
	 */
	protected void sequence_Bound_up(ISerializationContext context, Bound_up semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Checks returns Checks
	 *
	 * Constraint:
	 *     ((name=ID | em=ExpressionsModel) reference=Reference failReason+=FailReason+ description=Description)
	 */
	protected void sequence_Checks(ISerializationContext context, Checks semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Comparison
	 *     Or returns Comparison
	 *     Or.Or_1_0 returns Comparison
	 *     And returns Comparison
	 *     And.And_1_0 returns Comparison
	 *     Equality returns Comparison
	 *     Equality.Equality_1_0 returns Comparison
	 *     Comparison returns Comparison
	 *     Comparison.Comparison_1_0 returns Comparison
	 *     PlusOrMinus returns Comparison
	 *     PlusOrMinus.Plus_1_0_0_0 returns Comparison
	 *     PlusOrMinus.Minus_1_0_1_0 returns Comparison
	 *     MulOrDiv returns Comparison
	 *     MulOrDiv.MulOrDiv_1_0_0 returns Comparison
	 *     Primary returns Comparison
	 *
	 * Constraint:
	 *     (left=Comparison_Comparison_1_0 (op='>=' | op='<=' | op='>' | op='<') right=PlusOrMinus)
	 */
	protected void sequence_Comparison(ISerializationContext context, Comparison semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstDeg returns ConstDeg
	 *
	 * Constraint:
	 *     cant=DOUBLE
	 */
	protected void sequence_ConstDeg(ISerializationContext context, ConstDeg semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CONST_DEG__CANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CONST_DEG__CANT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstDegAccess().getCantDOUBLEParserRuleCall_1_0(), semanticObject.getCant());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DOUBLE returns DOUBLE
	 *
	 * Constraint:
	 *     dVal=d
	 */
	protected void sequence_DOUBLE(ISerializationContext context, DOUBLE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.DOUBLE__DVAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.DOUBLE__DVAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDOUBLEAccess().getDValDParserRuleCall_0(), semanticObject.getDVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns DataType
	 *     Type returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Description returns Description
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.DESCRIPTION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.DESCRIPTION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescriptionAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Equality
	 *     Or returns Equality
	 *     Or.Or_1_0 returns Equality
	 *     And returns Equality
	 *     And.And_1_0 returns Equality
	 *     Equality returns Equality
	 *     Equality.Equality_1_0 returns Equality
	 *     Comparison returns Equality
	 *     Comparison.Comparison_1_0 returns Equality
	 *     PlusOrMinus returns Equality
	 *     PlusOrMinus.Plus_1_0_0_0 returns Equality
	 *     PlusOrMinus.Minus_1_0_1_0 returns Equality
	 *     MulOrDiv returns Equality
	 *     MulOrDiv.MulOrDiv_1_0_0 returns Equality
	 *     Primary returns Equality
	 *
	 * Constraint:
	 *     (left=Equality_Equality_1_0 (op='==' | op='!=') right=Comparison)
	 */
	protected void sequence_Equality(ISerializationContext context, Equality semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement2 returns EvalExpression
	 *     EvalExpression returns EvalExpression
	 *
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_EvalExpression(ISerializationContext context, EvalExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.ABSTRACT_ELEMENT2__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.ABSTRACT_ELEMENT2__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvalExpressionAccess().getExpressionExpressionParserRuleCall_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionsModel returns ExpressionsModel
	 *
	 * Constraint:
	 *     elements+=AbstractElement2+
	 */
	protected void sequence_ExpressionsModel(ISerializationContext context, ExpressionsModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FailReason returns FailReason
	 *
	 * Constraint:
	 *     reason=Reason
	 */
	protected void sequence_FailReason(ISerializationContext context, FailReason semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.FAIL_REASON__REASON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.FAIL_REASON__REASON));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFailReasonAccess().getReasonReasonParserRuleCall_1_0(), semanticObject.getReason());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Gap returns Gap
	 *
	 * Constraint:
	 *     (bound_lower=Bound_Down bound_upp=Bound_up)
	 */
	protected void sequence_Gap(ISerializationContext context, Gap semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.GAP__BOUND_LOWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.GAP__BOUND_LOWER));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.GAP__BOUND_UPP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.GAP__BOUND_UPP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGapAccess().getBound_lowerBound_DownParserRuleCall_1_0(), semanticObject.getBound_lower());
		feeder.accept(grammarAccess.getGapAccess().getBound_uppBound_upParserRuleCall_3_0(), semanticObject.getBound_upp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HighPeak returns HighPeak
	 *
	 * Constraint:
	 *     cant=DOUBLE
	 */
	protected void sequence_HighPeak(ISerializationContext context, HighPeak semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.HIGH_PEAK__CANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.HIGH_PEAK__CANT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHighPeakAccess().getCantDOUBLEParserRuleCall_1_0(), semanticObject.getCant());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HighTime returns HighTime
	 *
	 * Constraint:
	 *     (cant=DOUBLE time=DOUBLE unit=TimeType)
	 */
	protected void sequence_HighTime(ISerializationContext context, HighTime semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.HIGH_TIME__CANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.HIGH_TIME__CANT));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.HIGH_TIME__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.HIGH_TIME__TIME));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.HIGH_TIME__UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.HIGH_TIME__UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHighTimeAccess().getCantDOUBLEParserRuleCall_1_0(), semanticObject.getCant());
		feeder.accept(grammarAccess.getHighTimeAccess().getTimeDOUBLEParserRuleCall_3_0(), semanticObject.getTime());
		feeder.accept(grammarAccess.getHighTimeAccess().getUnitTimeTypeParserRuleCall_4_0(), semanticObject.getUnit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ImportMonitoringPlan returns ImportMonitoringPlan
	 *
	 * Constraint:
	 *     importURI=STRING
	 */
	protected void sequence_ImportMonitoringPlan(ISerializationContext context, ImportMonitoringPlan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.IMPORT_MONITORING_PLAN__IMPORT_URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.IMPORT_MONITORING_PLAN__IMPORT_URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportMonitoringPlanAccess().getImportURISTRINGTerminalRuleCall_1_0(), semanticObject.getImportURI());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Imports
	 *     Imports returns Imports
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_Imports(ISerializationContext context, Imports semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.IMPORTS__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.IMPORTS__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportsAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InclusiveBound returns InclusiveBound
	 *
	 * Constraint:
	 *     (name=ID value=BOOLEAN)
	 */
	protected void sequence_InclusiveBound(ISerializationContext context, InclusiveBound semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.INCLUSIVE_BOUND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.INCLUSIVE_BOUND__NAME));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.INCLUSIVE_BOUND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.INCLUSIVE_BOUND__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInclusiveBoundAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInclusiveBoundAccess().getValueBOOLEANParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lower returns Lower
	 *
	 * Constraint:
	 *     bound_lower=Bound_Down
	 */
	protected void sequence_Lower(ISerializationContext context, Lower semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.LOWER__BOUND_LOWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.LOWER__BOUND_LOWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLowerAccess().getBound_lowerBound_DownParserRuleCall_1_0(), semanticObject.getBound_lower());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns MonitoringFile
	 *     Type returns MonitoringFile
	 *     MonitoringFile returns MonitoringFile
	 *
	 * Constraint:
	 *     (name=ID monitoringPlan+=MonitoringPlan+)
	 */
	protected void sequence_MonitoringFile(ISerializationContext context, MonitoringFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MonitoringPlan returns MonitoringPlan
	 *
	 * Constraint:
	 *     monitoringVariables=MonitoringVariable
	 */
	protected void sequence_MonitoringPlan(ISerializationContext context, MonitoringPlan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.MONITORING_PLAN__MONITORING_VARIABLES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.MONITORING_PLAN__MONITORING_VARIABLES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMonitoringPlanAccess().getMonitoringVariablesMonitoringVariableParserRuleCall_0(), semanticObject.getMonitoringVariables());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MonitoringVariableExpresion returns MonitoringVariableExpresion
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MonitoringVariableExpresion(ISerializationContext context, MonitoringVariableExpresion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.MONITORING_VARIABLE_EXPRESION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.MONITORING_VARIABLE_EXPRESION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMonitoringVariableExpresionAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MonitoringVariable returns MonitoringVariable
	 *
	 * Constraint:
	 *     (name=ID MonitoringVariableDatatype=Sig_type (max=DOUBLE min=DOUBLE)?)
	 */
	protected void sequence_MonitoringVariable(ISerializationContext context, MonitoringVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns MulOrDiv
	 *     Or returns MulOrDiv
	 *     Or.Or_1_0 returns MulOrDiv
	 *     And returns MulOrDiv
	 *     And.And_1_0 returns MulOrDiv
	 *     Equality returns MulOrDiv
	 *     Equality.Equality_1_0 returns MulOrDiv
	 *     Comparison returns MulOrDiv
	 *     Comparison.Comparison_1_0 returns MulOrDiv
	 *     PlusOrMinus returns MulOrDiv
	 *     PlusOrMinus.Plus_1_0_0_0 returns MulOrDiv
	 *     PlusOrMinus.Minus_1_0_1_0 returns MulOrDiv
	 *     MulOrDiv returns MulOrDiv
	 *     MulOrDiv.MulOrDiv_1_0_0 returns MulOrDiv
	 *     Primary returns MulOrDiv
	 *
	 * Constraint:
	 *     (left=MulOrDiv_MulOrDiv_1_0_0 (op='*' | op='/') right=Primary)
	 */
	protected void sequence_MulOrDiv(ISerializationContext context, MulOrDiv semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Or
	 *     Or returns Or
	 *     Or.Or_1_0 returns Or
	 *     And returns Or
	 *     And.And_1_0 returns Or
	 *     Equality returns Or
	 *     Equality.Equality_1_0 returns Or
	 *     Comparison returns Or
	 *     Comparison.Comparison_1_0 returns Or
	 *     PlusOrMinus returns Or
	 *     PlusOrMinus.Plus_1_0_0_0 returns Or
	 *     PlusOrMinus.Minus_1_0_1_0 returns Or
	 *     MulOrDiv returns Or
	 *     MulOrDiv.MulOrDiv_1_0_0 returns Or
	 *     Primary returns Or
	 *
	 * Constraint:
	 *     (left=Or_Or_1_0 right=And)
	 */
	protected void sequence_Or(ISerializationContext context, Or semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.OR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.OR__LEFT));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.OR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.OR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrAccess().getOrLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Oracle returns Oracle
	 *
	 * Constraint:
	 *     (name=ID when+=When? check+=Checks+)
	 */
	protected void sequence_Oracle(ISerializationContext context, Oracle semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns PackageDeclaration
	 *     PackageDeclaration returns PackageDeclaration
	 *
	 * Constraint:
	 *     (name=QualifiedName elements+=AbstractElement*)
	 */
	protected void sequence_PackageDeclaration(ISerializationContext context, PackageDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Minus
	 *     Or returns Minus
	 *     Or.Or_1_0 returns Minus
	 *     And returns Minus
	 *     And.And_1_0 returns Minus
	 *     Equality returns Minus
	 *     Equality.Equality_1_0 returns Minus
	 *     Comparison returns Minus
	 *     Comparison.Comparison_1_0 returns Minus
	 *     PlusOrMinus returns Minus
	 *     PlusOrMinus.Plus_1_0_0_0 returns Minus
	 *     PlusOrMinus.Minus_1_0_1_0 returns Minus
	 *     MulOrDiv returns Minus
	 *     MulOrDiv.MulOrDiv_1_0_0 returns Minus
	 *     Primary returns Minus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Minus_1_0_1_0 right=MulOrDiv)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Plus
	 *     Or returns Plus
	 *     Or.Or_1_0 returns Plus
	 *     And returns Plus
	 *     And.And_1_0 returns Plus
	 *     Equality returns Plus
	 *     Equality.Equality_1_0 returns Plus
	 *     Comparison returns Plus
	 *     Comparison.Comparison_1_0 returns Plus
	 *     PlusOrMinus returns Plus
	 *     PlusOrMinus.Plus_1_0_0_0 returns Plus
	 *     PlusOrMinus.Minus_1_0_1_0 returns Plus
	 *     MulOrDiv returns Plus
	 *     MulOrDiv.MulOrDiv_1_0_0 returns Plus
	 *     Primary returns Plus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Plus_1_0_0_0 right=MulOrDiv)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PrecondReference returns PrecondReference
	 *
	 * Constraint:
	 *     (upper=Upper | lower=Lower | range=Range | gap=Gap)
	 */
	protected void sequence_PrecondReference(ISerializationContext context, PrecondReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Not
	 *     Or returns Not
	 *     Or.Or_1_0 returns Not
	 *     And returns Not
	 *     And.And_1_0 returns Not
	 *     Equality returns Not
	 *     Equality.Equality_1_0 returns Not
	 *     Comparison returns Not
	 *     Comparison.Comparison_1_0 returns Not
	 *     PlusOrMinus returns Not
	 *     PlusOrMinus.Plus_1_0_0_0 returns Not
	 *     PlusOrMinus.Minus_1_0_1_0 returns Not
	 *     MulOrDiv returns Not
	 *     MulOrDiv.MulOrDiv_1_0_0 returns Not
	 *     Primary returns Not
	 *
	 * Constraint:
	 *     expression=Primary
	 */
	protected void sequence_Primary(ISerializationContext context, Not semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.NOT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.NOT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Range returns Range
	 *
	 * Constraint:
	 *     (bound_lower=Bound_Down bound_upp=Bound_up)
	 */
	protected void sequence_Range(ISerializationContext context, Range semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.RANGE__BOUND_LOWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.RANGE__BOUND_LOWER));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.RANGE__BOUND_UPP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.RANGE__BOUND_UPP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRangeAccess().getBound_lowerBound_DownParserRuleCall_1_0(), semanticObject.getBound_lower());
		feeder.accept(grammarAccess.getRangeAccess().getBound_uppBound_upParserRuleCall_3_0(), semanticObject.getBound_upp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reason returns Reason
	 *
	 * Constraint:
	 *     (highPeak=HighPeak | highTime=HighTime | constDeg=ConstDeg | xPeaks=XPeaks)
	 */
	protected void sequence_Reason(ISerializationContext context, Reason semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (upper=Upper | lower=Lower | range=Range | gap=Gap)
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sig_type returns Sig_type
	 *
	 * Constraint:
	 *     (sig_type='boolean' | sig_type='int' | sig_type='double')
	 */
	protected void sequence_Sig_type(ISerializationContext context, Sig_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Signal
	 *     Type returns Signal
	 *     Signal returns Signal
	 *
	 * Constraint:
	 *     (name=ID cardinalityNumCPS=INT? superType=[MonitoringFile|QualifiedName]? oracle+=Oracle+)
	 */
	protected void sequence_Signal(ISerializationContext context, Signal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimeType returns TimeType
	 *
	 * Constraint:
	 *     (time='miliseconds' | time='seconds' | time='minutes' | time='hours')
	 */
	protected void sequence_TimeType(ISerializationContext context, TimeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Upper returns Upper
	 *
	 * Constraint:
	 *     bound_upp=Bound_up
	 */
	protected void sequence_Upper(ISerializationContext context, Upper semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.UPPER__BOUND_UPP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.UPPER__BOUND_UPP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpperAccess().getBound_uppBound_upParserRuleCall_1_0(), semanticObject.getBound_upp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement2 returns Variable
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (name=ID expression=Expression?)
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     When returns When
	 *
	 * Constraint:
	 *     ((name=ID | em=ExpressionsModel) precondReference=PrecondReference)
	 */
	protected void sequence_When(ISerializationContext context, When semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPeaks returns XPeaks
	 *
	 * Constraint:
	 *     (cant=DOUBLE nPeaks=DOUBLE time=DOUBLE unit=TimeType)
	 */
	protected void sequence_XPeaks(ISerializationContext context, XPeaks semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.XPEAKS__CANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.XPEAKS__CANT));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.XPEAKS__NPEAKS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.XPEAKS__NPEAKS));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.XPEAKS__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.XPEAKS__TIME));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.XPEAKS__UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.XPEAKS__UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXPeaksAccess().getCantDOUBLEParserRuleCall_1_0(), semanticObject.getCant());
		feeder.accept(grammarAccess.getXPeaksAccess().getNPeaksDOUBLEParserRuleCall_3_0(), semanticObject.getNPeaks());
		feeder.accept(grammarAccess.getXPeaksAccess().getTimeDOUBLEParserRuleCall_5_0(), semanticObject.getTime());
		feeder.accept(grammarAccess.getXPeaksAccess().getUnitTimeTypeParserRuleCall_6_0(), semanticObject.getUnit());
		feeder.finish();
	}
	
	
}
