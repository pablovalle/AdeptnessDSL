/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.adeptness.Adeptness;
import org.xtext.example.mydsl.adeptness.AdeptnessPackage;
import org.xtext.example.mydsl.adeptness.BOOLEAN;
import org.xtext.example.mydsl.adeptness.Bound_Down;
import org.xtext.example.mydsl.adeptness.Bound_up;
import org.xtext.example.mydsl.adeptness.Check;
import org.xtext.example.mydsl.adeptness.ConstDeg;
import org.xtext.example.mydsl.adeptness.DOUBLE;
import org.xtext.example.mydsl.adeptness.DataType;
import org.xtext.example.mydsl.adeptness.FailReason;
import org.xtext.example.mydsl.adeptness.Gap;
import org.xtext.example.mydsl.adeptness.HighPeak;
import org.xtext.example.mydsl.adeptness.HighTime;
import org.xtext.example.mydsl.adeptness.Import;
import org.xtext.example.mydsl.adeptness.InclusiveBound;
import org.xtext.example.mydsl.adeptness.Lower;
import org.xtext.example.mydsl.adeptness.Oracle;
import org.xtext.example.mydsl.adeptness.PackageDeclaration;
import org.xtext.example.mydsl.adeptness.Range;
import org.xtext.example.mydsl.adeptness.Reference;
import org.xtext.example.mydsl.adeptness.Signal;
import org.xtext.example.mydsl.adeptness.Upper;
import org.xtext.example.mydsl.adeptness.XPeaks;
import org.xtext.example.mydsl.services.AdeptnessGrammarAccess;

@SuppressWarnings("all")
public class AdeptnessSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AdeptnessGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AdeptnessPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AdeptnessPackage.ADEPTNESS:
				sequence_Adeptness(context, (Adeptness) semanticObject); 
				return; 
			case AdeptnessPackage.BOOLEAN:
				sequence_BOOLEAN(context, (BOOLEAN) semanticObject); 
				return; 
			case AdeptnessPackage.BOUND_DOWN:
				sequence_Bound_Down(context, (Bound_Down) semanticObject); 
				return; 
			case AdeptnessPackage.BOUND_UP:
				sequence_Bound_up(context, (Bound_up) semanticObject); 
				return; 
			case AdeptnessPackage.CHECK:
				sequence_Check(context, (Check) semanticObject); 
				return; 
			case AdeptnessPackage.CONST_DEG:
				sequence_ConstDeg(context, (ConstDeg) semanticObject); 
				return; 
			case AdeptnessPackage.DOUBLE:
				sequence_DOUBLE(context, (DOUBLE) semanticObject); 
				return; 
			case AdeptnessPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case AdeptnessPackage.FAIL_REASON:
				sequence_FailReason(context, (FailReason) semanticObject); 
				return; 
			case AdeptnessPackage.GAP:
				sequence_Gap(context, (Gap) semanticObject); 
				return; 
			case AdeptnessPackage.HIGH_PEAK:
				sequence_HighPeak(context, (HighPeak) semanticObject); 
				return; 
			case AdeptnessPackage.HIGH_TIME:
				sequence_HighTime(context, (HighTime) semanticObject); 
				return; 
			case AdeptnessPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case AdeptnessPackage.INCLUSIVE_BOUND:
				sequence_InclusiveBound(context, (InclusiveBound) semanticObject); 
				return; 
			case AdeptnessPackage.LOWER:
				sequence_Lower(context, (Lower) semanticObject); 
				return; 
			case AdeptnessPackage.ORACLE:
				sequence_Oracle(context, (Oracle) semanticObject); 
				return; 
			case AdeptnessPackage.PACKAGE_DECLARATION:
				sequence_PackageDeclaration(context, (PackageDeclaration) semanticObject); 
				return; 
			case AdeptnessPackage.RANGE:
				sequence_Range(context, (Range) semanticObject); 
				return; 
			case AdeptnessPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case AdeptnessPackage.SIGNAL:
				sequence_Signal(context, (Signal) semanticObject); 
				return; 
			case AdeptnessPackage.UPPER:
				sequence_Upper(context, (Upper) semanticObject); 
				return; 
			case AdeptnessPackage.XPEAKS:
				sequence_XPeaks(context, (XPeaks) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Adeptness returns Adeptness
	 *
	 * Constraint:
	 *     elements+=AbstractElement+
	 */
	protected void sequence_Adeptness(ISerializationContext context, Adeptness semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BOOLEAN returns BOOLEAN
	 *
	 * Constraint:
	 *     bool=b
	 */
	protected void sequence_BOOLEAN(ISerializationContext context, BOOLEAN semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.BOOLEAN__BOOL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.BOOLEAN__BOOL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBOOLEANAccess().getBoolBParserRuleCall_0(), semanticObject.isBool());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Bound_Down returns Bound_Down
	 *
	 * Constraint:
	 *     value=DOUBLE
	 */
	protected void sequence_Bound_Down(ISerializationContext context, Bound_Down semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.BOUND_DOWN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.BOUND_DOWN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBound_DownAccess().getValueDOUBLEParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Bound_up returns Bound_up
	 *
	 * Constraint:
	 *     value=DOUBLE
	 */
	protected void sequence_Bound_up(ISerializationContext context, Bound_up semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.BOUND_UP__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.BOUND_UP__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBound_upAccess().getValueDOUBLEParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Check returns Check
	 *
	 * Constraint:
	 *     (name=STRING reference=Reference failReason+=FailReason+ description=STRING)
	 */
	protected void sequence_Check(ISerializationContext context, Check semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstDeg returns ConstDeg
	 *
	 * Constraint:
	 *     cant=DOUBLE
	 */
	protected void sequence_ConstDeg(ISerializationContext context, ConstDeg semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.CONST_DEG__CANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.CONST_DEG__CANT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstDegAccess().getCantDOUBLEParserRuleCall_1_0(), semanticObject.getCant());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DOUBLE returns DOUBLE
	 *
	 * Constraint:
	 *     dVal=d
	 */
	protected void sequence_DOUBLE(ISerializationContext context, DOUBLE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.DOUBLE__DVAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.DOUBLE__DVAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDOUBLEAccess().getDValDParserRuleCall_0(), semanticObject.getDVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns DataType
	 *     Type returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FailReason returns FailReason
	 *
	 * Constraint:
	 *     (highPeak=HighPeak | highTime=HighTime | constDeg=ConstDeg | xPeaks=XPeaks)
	 */
	protected void sequence_FailReason(ISerializationContext context, FailReason semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Gap returns Gap
	 *
	 * Constraint:
	 *     (bound_lower=Bound_Down bound_upp=Bound_up)
	 */
	protected void sequence_Gap(ISerializationContext context, Gap semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.GAP__BOUND_LOWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.GAP__BOUND_LOWER));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.GAP__BOUND_UPP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.GAP__BOUND_UPP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGapAccess().getBound_lowerBound_DownParserRuleCall_1_0(), semanticObject.getBound_lower());
		feeder.accept(grammarAccess.getGapAccess().getBound_uppBound_upParserRuleCall_3_0(), semanticObject.getBound_upp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HighPeak returns HighPeak
	 *
	 * Constraint:
	 *     cant=DOUBLE
	 */
	protected void sequence_HighPeak(ISerializationContext context, HighPeak semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.HIGH_PEAK__CANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.HIGH_PEAK__CANT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHighPeakAccess().getCantDOUBLEParserRuleCall_1_0(), semanticObject.getCant());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HighTime returns HighTime
	 *
	 * Constraint:
	 *     (cant=DOUBLE time=DOUBLE)
	 */
	protected void sequence_HighTime(ISerializationContext context, HighTime semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.HIGH_TIME__CANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.HIGH_TIME__CANT));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.HIGH_TIME__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.HIGH_TIME__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHighTimeAccess().getCantDOUBLEParserRuleCall_1_0(), semanticObject.getCant());
		feeder.accept(grammarAccess.getHighTimeAccess().getTimeDOUBLEParserRuleCall_3_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Import
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InclusiveBound returns InclusiveBound
	 *
	 * Constraint:
	 *     (name=ID value=BOOLEAN)
	 */
	protected void sequence_InclusiveBound(ISerializationContext context, InclusiveBound semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.INCLUSIVE_BOUND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.INCLUSIVE_BOUND__NAME));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.INCLUSIVE_BOUND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.INCLUSIVE_BOUND__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInclusiveBoundAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInclusiveBoundAccess().getValueBOOLEANParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lower returns Lower
	 *
	 * Constraint:
	 *     bound_lower=Bound_Down
	 */
	protected void sequence_Lower(ISerializationContext context, Lower semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.LOWER__BOUND_LOWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.LOWER__BOUND_LOWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLowerAccess().getBound_lowerBound_DownParserRuleCall_1_0(), semanticObject.getBound_lower());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Oracle returns Oracle
	 *
	 * Constraint:
	 *     (name=ID check+=Check+)
	 */
	protected void sequence_Oracle(ISerializationContext context, Oracle semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns PackageDeclaration
	 *     PackageDeclaration returns PackageDeclaration
	 *
	 * Constraint:
	 *     (name=QualifiedName elements+=AbstractElement*)
	 */
	protected void sequence_PackageDeclaration(ISerializationContext context, PackageDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Range returns Range
	 *
	 * Constraint:
	 *     (bound_lower=Bound_Down bound_upp=Bound_up)
	 */
	protected void sequence_Range(ISerializationContext context, Range semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.RANGE__BOUND_LOWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.RANGE__BOUND_LOWER));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.RANGE__BOUND_UPP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.RANGE__BOUND_UPP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRangeAccess().getBound_lowerBound_DownParserRuleCall_1_0(), semanticObject.getBound_lower());
		feeder.accept(grammarAccess.getRangeAccess().getBound_uppBound_upParserRuleCall_3_0(), semanticObject.getBound_upp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (upper=Upper | lower=Lower | range=Range | gap=Gap)
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Signal
	 *     Type returns Signal
	 *     Signal returns Signal
	 *
	 * Constraint:
	 *     (name=ID oracle+=Oracle+)
	 */
	protected void sequence_Signal(ISerializationContext context, Signal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Upper returns Upper
	 *
	 * Constraint:
	 *     bound_upp=Bound_up
	 */
	protected void sequence_Upper(ISerializationContext context, Upper semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.UPPER__BOUND_UPP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.UPPER__BOUND_UPP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpperAccess().getBound_uppBound_upParserRuleCall_1_0(), semanticObject.getBound_upp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XPeaks returns XPeaks
	 *
	 * Constraint:
	 *     (cant=DOUBLE nPeaks=DOUBLE time=DOUBLE)
	 */
	protected void sequence_XPeaks(ISerializationContext context, XPeaks semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.XPEAKS__CANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.XPEAKS__CANT));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.XPEAKS__NPEAKS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.XPEAKS__NPEAKS));
			if (transientValues.isValueTransient(semanticObject, AdeptnessPackage.Literals.XPEAKS__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdeptnessPackage.Literals.XPEAKS__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXPeaksAccess().getCantDOUBLEParserRuleCall_1_0(), semanticObject.getCant());
		feeder.accept(grammarAccess.getXPeaksAccess().getNPeaksDOUBLEParserRuleCall_3_0(), semanticObject.getNPeaks());
		feeder.accept(grammarAccess.getXPeaksAccess().getTimeDOUBLEParserRuleCall_6_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
}
